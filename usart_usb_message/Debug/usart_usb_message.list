
usart_usb_message.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007980  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08007b80  08007b80  00017b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ffc  08007ffc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007ffc  08007ffc  00017ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008004  08008004  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008004  08008004  00018004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008008  08008008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800800c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001dc  080081e8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  080081e8  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012df1  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002343  00000000  00000000  00032ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00035340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  000361e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f46  00000000  00000000  00036fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011277  00000000  00000000  0005feee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe207  00000000  00000000  00071165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016f36c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ce4  00000000  00000000  0016f3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08007b68 	.word	0x08007b68

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08007b68 	.word	0x08007b68

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <analogOutputConverter>:
#include "analogOutputConverter.h"

double analogOutputConverter(float freq, float XMIN, float XMAX, float YMIN, float YMAX)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b087      	sub	sp, #28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80005f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80005f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80005fa:	edc7 1a02 	vstr	s3, [r7, #8]
 80005fe:	ed87 2a01 	vstr	s4, [r7, #4]
	return ((freq - XMIN)*(YMAX - YMIN)) / (XMAX - XMIN) + YMIN;
 8000602:	ed97 7a05 	vldr	s14, [r7, #20]
 8000606:	edd7 7a04 	vldr	s15, [r7, #16]
 800060a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800060e:	edd7 6a01 	vldr	s13, [r7, #4]
 8000612:	edd7 7a02 	vldr	s15, [r7, #8]
 8000616:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800061a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800061e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000622:	edd7 7a04 	vldr	s15, [r7, #16]
 8000626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800062a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800062e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000636:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
}
 800063a:	eeb0 0b47 	vmov.f64	d0, d7
 800063e:	371c      	adds	r7, #28
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	ed2d 8b02 	vpush	{d8}
 800064e:	b0a0      	sub	sp, #128	; 0x80
 8000650:	af02      	add	r7, sp, #8
 8000652:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a5c      	ldr	r2, [pc, #368]	; (80007c8 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000658:	4293      	cmp	r3, r2
 800065a:	f040 80a9 	bne.w	80007b0 <HAL_TIM_IC_CaptureCallback+0x168>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	7f1b      	ldrb	r3, [r3, #28]
 8000662:	2b01      	cmp	r3, #1
 8000664:	f040 80a4 	bne.w	80007b0 <HAL_TIM_IC_CaptureCallback+0x168>
		{
			count++;
 8000668:	4b58      	ldr	r3, [pc, #352]	; (80007cc <HAL_TIM_IC_CaptureCallback+0x184>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b56      	ldr	r3, [pc, #344]	; (80007cc <HAL_TIM_IC_CaptureCallback+0x184>)
 8000672:	701a      	strb	r2, [r3, #0]
			if(count == 1)
 8000674:	4b55      	ldr	r3, [pc, #340]	; (80007cc <HAL_TIM_IC_CaptureCallback+0x184>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d108      	bne.n	800068e <HAL_TIM_IC_CaptureCallback+0x46>
			{
				__HAL_TIM_SET_COUNTER(&htim4, 0x0000);
 800067c:	4b52      	ldr	r3, [pc, #328]	; (80007c8 <HAL_TIM_IC_CaptureCallback+0x180>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2200      	movs	r2, #0
 8000682:	625a      	str	r2, [r3, #36]	; 0x24
				__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 8000684:	4b52      	ldr	r3, [pc, #328]	; (80007d0 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2200      	movs	r2, #0
 800068a:	625a      	str	r2, [r3, #36]	; 0x24

				HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
			}
		}
	}
}
 800068c:	e090      	b.n	80007b0 <HAL_TIM_IC_CaptureCallback+0x168>
			else if(count == 2)
 800068e:	4b4f      	ldr	r3, [pc, #316]	; (80007cc <HAL_TIM_IC_CaptureCallback+0x184>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b02      	cmp	r3, #2
 8000694:	f040 808c 	bne.w	80007b0 <HAL_TIM_IC_CaptureCallback+0x168>
				HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);
 8000698:	2100      	movs	r1, #0
 800069a:	484b      	ldr	r0, [pc, #300]	; (80007c8 <HAL_TIM_IC_CaptureCallback+0x180>)
 800069c:	f002 ff2c 	bl	80034f8 <HAL_TIM_IC_Stop_IT>
				count = 0;
 80006a0:	4b4a      	ldr	r3, [pc, #296]	; (80007cc <HAL_TIM_IC_CaptureCallback+0x184>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
				uint16_t countMain = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80006a6:	2100      	movs	r1, #0
 80006a8:	4847      	ldr	r0, [pc, #284]	; (80007c8 <HAL_TIM_IC_CaptureCallback+0x180>)
 80006aa:	f003 fb05 	bl	8003cb8 <HAL_TIM_ReadCapturedValue>
 80006ae:	4603      	mov	r3, r0
 80006b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
				uint16_t countSecondary = __HAL_TIM_GET_COUNTER(&htim3);
 80006b4:	4b46      	ldr	r3, [pc, #280]	; (80007d0 <HAL_TIM_IC_CaptureCallback+0x188>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
				uint16_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3);
 80006be:	4b44      	ldr	r3, [pc, #272]	; (80007d0 <HAL_TIM_IC_CaptureCallback+0x188>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
				uint32_t res = countMain + (countSecondary * arr) + countSecondary;
 80006c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80006cc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80006d0:	f8b7 1072 	ldrh.w	r1, [r7, #114]	; 0x72
 80006d4:	fb01 f303 	mul.w	r3, r1, r3
 80006d8:	441a      	add	r2, r3
 80006da:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80006de:	4413      	add	r3, r2
 80006e0:	66fb      	str	r3, [r7, #108]	; 0x6c
				freq = 1 / (res / 1000000.0);
 80006e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006e4:	ee07 3a90 	vmov	s15, r3
 80006e8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80006ec:	ed9f 5b34 	vldr	d5, [pc, #208]	; 80007c0 <HAL_TIM_IC_CaptureCallback+0x178>
 80006f0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80006f4:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80006f8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80006fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000700:	4b34      	ldr	r3, [pc, #208]	; (80007d4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000702:	edc3 7a00 	vstr	s15, [r3]
				freq -= (freq*5)/1000;
 8000706:	4b33      	ldr	r3, [pc, #204]	; (80007d4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000708:	ed93 7a00 	vldr	s14, [r3]
 800070c:	4b31      	ldr	r3, [pc, #196]	; (80007d4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 800070e:	edd3 7a00 	vldr	s15, [r3]
 8000712:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000716:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800071a:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80007d8 <HAL_TIM_IC_CaptureCallback+0x190>
 800071e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000726:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000728:	edc3 7a00 	vstr	s15, [r3]
				char str[96] = {0,};
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	225c      	movs	r2, #92	; 0x5c
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f004 fc07 	bl	8004f4c <memset>
				sprintf(str, "Frequency: %.3f Hz | OUT %0.3f\n--------------------\n", freq, analogOutputConverter(freq, XMIN, XMAX, YMIN, YMAX));
 800073e:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000740:	edd3 7a00 	vldr	s15, [r3]
 8000744:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <HAL_TIM_IC_CaptureCallback+0x18c>)
 800074a:	edd3 7a00 	vldr	s15, [r3]
 800074e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80007dc <HAL_TIM_IC_CaptureCallback+0x194>
 8000752:	eddf 6a23 	vldr	s13, [pc, #140]	; 80007e0 <HAL_TIM_IC_CaptureCallback+0x198>
 8000756:	ed9f 6a21 	vldr	s12, [pc, #132]	; 80007dc <HAL_TIM_IC_CaptureCallback+0x194>
 800075a:	eddf 5a22 	vldr	s11, [pc, #136]	; 80007e4 <HAL_TIM_IC_CaptureCallback+0x19c>
 800075e:	eeb0 2a65 	vmov.f32	s4, s11
 8000762:	eef0 1a46 	vmov.f32	s3, s12
 8000766:	eeb0 1a66 	vmov.f32	s2, s13
 800076a:	eef0 0a47 	vmov.f32	s1, s14
 800076e:	eeb0 0a67 	vmov.f32	s0, s15
 8000772:	f7ff ff39 	bl	80005e8 <analogOutputConverter>
 8000776:	eeb0 7b40 	vmov.f64	d7, d0
 800077a:	f107 000c 	add.w	r0, r7, #12
 800077e:	ed8d 7b00 	vstr	d7, [sp]
 8000782:	ec53 2b18 	vmov	r2, r3, d8
 8000786:	4918      	ldr	r1, [pc, #96]	; (80007e8 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8000788:	f005 f82c 	bl	80057e4 <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 1000);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fd55 	bl	8000240 <strlen>
 8000796:	4603      	mov	r3, r0
 8000798:	b29a      	uxth	r2, r3
 800079a:	f107 010c 	add.w	r1, r7, #12
 800079e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a2:	4812      	ldr	r0, [pc, #72]	; (80007ec <HAL_TIM_IC_CaptureCallback+0x1a4>)
 80007a4:	f003 ff02 	bl	80045ac <HAL_UART_Transmit>
				HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80007a8:	2100      	movs	r1, #0
 80007aa:	4807      	ldr	r0, [pc, #28]	; (80007c8 <HAL_TIM_IC_CaptureCallback+0x180>)
 80007ac:	f002 fd54 	bl	8003258 <HAL_TIM_IC_Start_IT>
}
 80007b0:	bf00      	nop
 80007b2:	3778      	adds	r7, #120	; 0x78
 80007b4:	46bd      	mov	sp, r7
 80007b6:	ecbd 8b02 	vpop	{d8}
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	f3af 8000 	nop.w
 80007c0:	00000000 	.word	0x00000000
 80007c4:	412e8480 	.word	0x412e8480
 80007c8:	2000020c 	.word	0x2000020c
 80007cc:	200001f8 	.word	0x200001f8
 80007d0:	200002dc 	.word	0x200002dc
 80007d4:	200001fc 	.word	0x200001fc
 80007d8:	447a0000 	.word	0x447a0000
 80007dc:	00000000 	.word	0x00000000
 80007e0:	42480000 	.word	0x42480000
 80007e4:	457ff000 	.word	0x457ff000
 80007e8:	08007b80 	.word	0x08007b80
 80007ec:	20000258 	.word	0x20000258

080007f0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	ed2d 8b04 	vpush	{d8-d9}
 80007f6:	b0a1      	sub	sp, #132	; 0x84
 80007f8:	af06      	add	r7, sp, #24
 80007fa:	6078      	str	r0, [r7, #4]
	if(htim == &htim1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a44      	ldr	r2, [pc, #272]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d174      	bne.n	80008ee <HAL_TIM_PeriodElapsedCallback+0xfe>
	{
		freq = __HAL_TIM_GET_COUNTER(&htim2) - 6*(__HAL_TIM_GET_COUNTER(&htim2)/1000);
 8000804:	4b43      	ldr	r3, [pc, #268]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800080a:	4b42      	ldr	r3, [pc, #264]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000810:	4a41      	ldr	r2, [pc, #260]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000812:	fba2 2303 	umull	r2, r3, r2, r3
 8000816:	099a      	lsrs	r2, r3, #6
 8000818:	4613      	mov	r3, r2
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	4413      	add	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	1acb      	subs	r3, r1, r3
 8000822:	ee07 3a90 	vmov	s15, r3
 8000826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800082a:	4b3c      	ldr	r3, [pc, #240]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800082c:	edc3 7a00 	vstr	s15, [r3]

		char str[96] = {0,};
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	225c      	movs	r2, #92	; 0x5c
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f004 fb85 	bl	8004f4c <memset>

		sprintf(str,"Frequency: %.3f MHz | %.3f KHz | %lu Hz | OUT: %f\n--------------------\n", (float)freq / 1000000.0, (float)freq / 1000.0, (uint32_t)freq, analogOutputConverter(freq, XMIN, XMAX, YMIN, YMAX));
 8000842:	4b36      	ldr	r3, [pc, #216]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000844:	edd3 7a00 	vldr	s15, [r3]
 8000848:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800084c:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8000900 <HAL_TIM_PeriodElapsedCallback+0x110>
 8000850:	ee87 9b06 	vdiv.f64	d9, d7, d6
 8000854:	4b31      	ldr	r3, [pc, #196]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000856:	edd3 7a00 	vldr	s15, [r3]
 800085a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800085e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8000908 <HAL_TIM_PeriodElapsedCallback+0x118>
 8000862:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8000866:	4b2d      	ldr	r3, [pc, #180]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000868:	edd3 7a00 	vldr	s15, [r3]
 800086c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000870:	ee17 4a90 	vmov	r4, s15
 8000874:	4b29      	ldr	r3, [pc, #164]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000876:	edd3 7a00 	vldr	s15, [r3]
 800087a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000920 <HAL_TIM_PeriodElapsedCallback+0x130>
 800087e:	eddf 6a29 	vldr	s13, [pc, #164]	; 8000924 <HAL_TIM_PeriodElapsedCallback+0x134>
 8000882:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8000920 <HAL_TIM_PeriodElapsedCallback+0x130>
 8000886:	eddf 5a28 	vldr	s11, [pc, #160]	; 8000928 <HAL_TIM_PeriodElapsedCallback+0x138>
 800088a:	eeb0 2a65 	vmov.f32	s4, s11
 800088e:	eef0 1a46 	vmov.f32	s3, s12
 8000892:	eeb0 1a66 	vmov.f32	s2, s13
 8000896:	eef0 0a47 	vmov.f32	s1, s14
 800089a:	eeb0 0a67 	vmov.f32	s0, s15
 800089e:	f7ff fea3 	bl	80005e8 <analogOutputConverter>
 80008a2:	eeb0 7b40 	vmov.f64	d7, d0
 80008a6:	f107 0008 	add.w	r0, r7, #8
 80008aa:	ed8d 7b04 	vstr	d7, [sp, #16]
 80008ae:	9402      	str	r4, [sp, #8]
 80008b0:	ed8d 8b00 	vstr	d8, [sp]
 80008b4:	ec53 2b19 	vmov	r2, r3, d9
 80008b8:	491c      	ldr	r1, [pc, #112]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80008ba:	f004 ff93 	bl	80057e4 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 1000);
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fcbc 	bl	8000240 <strlen>
 80008c8:	4603      	mov	r3, r0
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	f107 0108 	add.w	r1, r7, #8
 80008d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d4:	4816      	ldr	r0, [pc, #88]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80008d6:	f003 fe69 	bl	80045ac <HAL_UART_Transmit>



		HAL_TIM_Base_Stop_IT(&htim1);
 80008da:	480d      	ldr	r0, [pc, #52]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80008dc:	f002 fc36 	bl	800314c <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2200      	movs	r2, #0
 80008e6:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim1);
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80008ea:	f002 fbb7 	bl	800305c <HAL_TIM_Base_Start_IT>

	}
}
 80008ee:	bf00      	nop
 80008f0:	376c      	adds	r7, #108	; 0x6c
 80008f2:	46bd      	mov	sp, r7
 80008f4:	ecbd 8b04 	vpop	{d8-d9}
 80008f8:	bd90      	pop	{r4, r7, pc}
 80008fa:	bf00      	nop
 80008fc:	f3af 8000 	nop.w
 8000900:	00000000 	.word	0x00000000
 8000904:	412e8480 	.word	0x412e8480
 8000908:	00000000 	.word	0x00000000
 800090c:	408f4000 	.word	0x408f4000
 8000910:	2000033c 	.word	0x2000033c
 8000914:	20000388 	.word	0x20000388
 8000918:	10624dd3 	.word	0x10624dd3
 800091c:	200001fc 	.word	0x200001fc
 8000920:	00000000 	.word	0x00000000
 8000924:	42480000 	.word	0x42480000
 8000928:	457ff000 	.word	0x457ff000
 800092c:	08007bb8 	.word	0x08007bb8
 8000930:	20000258 	.word	0x20000258

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	ed2d 8b02 	vpush	{d8}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f000 fdc6 	bl	80014ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000942:	f000 f893 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000946:	f000 fae7 	bl	8000f18 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800094a:	f000 fab5 	bl	8000eb8 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800094e:	f000 f947 	bl	8000be0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000952:	f000 f9a3 	bl	8000c9c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000956:	f000 fa0b 	bl	8000d70 <MX_TIM3_Init>
  MX_TIM4_Init();
 800095a:	f000 fa59 	bl	8000e10 <MX_TIM4_Init>
  MX_DAC_Init();
 800095e:	f000 f915 	bl	8000b8c <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000962:	2100      	movs	r1, #0
 8000964:	4837      	ldr	r0, [pc, #220]	; (8000a44 <main+0x110>)
 8000966:	f002 fc77 	bl	8003258 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 800096a:	4837      	ldr	r0, [pc, #220]	; (8000a48 <main+0x114>)
 800096c:	f002 fade 	bl	8002f2c <HAL_TIM_Base_Start>
  __HAL_DAC_ENABLE(&hdac, DAC_CHANNEL_1);
 8000970:	4b36      	ldr	r3, [pc, #216]	; (8000a4c <main+0x118>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4b35      	ldr	r3, [pc, #212]	; (8000a4c <main+0x118>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f042 0201 	orr.w	r2, r2, #1
 800097e:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  const float Vref = 3.3;
 8000980:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <main+0x11c>)
 8000982:	607b      	str	r3, [r7, #4]
	  float volt = 1;
 8000984:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000988:	603b      	str	r3, [r7, #0]
    /* USER CODE BEGIN 3 */
	  if (freq < 2)
 800098a:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <main+0x120>)
 800098c:	edd3 7a00 	vldr	s15, [r3]
 8000990:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800099c:	d50d      	bpl.n	80009ba <main+0x86>
	  {
		  HAL_TIM_Base_Stop_IT(&htim1);
 800099e:	482e      	ldr	r0, [pc, #184]	; (8000a58 <main+0x124>)
 80009a0:	f002 fbd4 	bl	800314c <HAL_TIM_Base_Stop_IT>
		  HAL_TIM_Base_Stop(&htim2);
 80009a4:	482d      	ldr	r0, [pc, #180]	; (8000a5c <main+0x128>)
 80009a6:	f002 fb31 	bl	800300c <HAL_TIM_Base_Stop>
		  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80009aa:	2100      	movs	r1, #0
 80009ac:	4825      	ldr	r0, [pc, #148]	; (8000a44 <main+0x110>)
 80009ae:	f002 fc53 	bl	8003258 <HAL_TIM_IC_Start_IT>
		  HAL_TIM_Base_Start(&htim3);
 80009b2:	4825      	ldr	r0, [pc, #148]	; (8000a48 <main+0x114>)
 80009b4:	f002 faba 	bl	8002f2c <HAL_TIM_Base_Start>
 80009b8:	e016      	b.n	80009e8 <main+0xb4>
	  }
	  else if (freq >= 2)
 80009ba:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <main+0x120>)
 80009bc:	edd3 7a00 	vldr	s15, [r3]
 80009c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80009c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009cc:	db0c      	blt.n	80009e8 <main+0xb4>
	  {
		  HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);
 80009ce:	2100      	movs	r1, #0
 80009d0:	481c      	ldr	r0, [pc, #112]	; (8000a44 <main+0x110>)
 80009d2:	f002 fd91 	bl	80034f8 <HAL_TIM_IC_Stop_IT>
		  HAL_TIM_Base_Stop(&htim3);
 80009d6:	481c      	ldr	r0, [pc, #112]	; (8000a48 <main+0x114>)
 80009d8:	f002 fb18 	bl	800300c <HAL_TIM_Base_Stop>
		  HAL_TIM_Base_Start_IT(&htim1);
 80009dc:	481e      	ldr	r0, [pc, #120]	; (8000a58 <main+0x124>)
 80009de:	f002 fb3d 	bl	800305c <HAL_TIM_Base_Start_IT>
		  HAL_TIM_Base_Start(&htim2);
 80009e2:	481e      	ldr	r0, [pc, #120]	; (8000a5c <main+0x128>)
 80009e4:	f002 faa2 	bl	8002f2c <HAL_TIM_Base_Start>
	  }
	  HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, (volt/Vref)*analogOutputConverter(freq, XMIN, XMAX, YMIN, YMAX));
 80009e8:	edd7 6a00 	vldr	s13, [r7]
 80009ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80009f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009f4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <main+0x120>)
 80009fa:	edd3 7a00 	vldr	s15, [r3]
 80009fe:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000a60 <main+0x12c>
 8000a02:	eddf 6a18 	vldr	s13, [pc, #96]	; 8000a64 <main+0x130>
 8000a06:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8000a60 <main+0x12c>
 8000a0a:	eddf 5a17 	vldr	s11, [pc, #92]	; 8000a68 <main+0x134>
 8000a0e:	eeb0 2a65 	vmov.f32	s4, s11
 8000a12:	eef0 1a46 	vmov.f32	s3, s12
 8000a16:	eeb0 1a66 	vmov.f32	s2, s13
 8000a1a:	eef0 0a47 	vmov.f32	s1, s14
 8000a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a22:	f7ff fde1 	bl	80005e8 <analogOutputConverter>
 8000a26:	eeb0 7b40 	vmov.f64	d7, d0
 8000a2a:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000a2e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a32:	ee17 3a90 	vmov	r3, s15
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4804      	ldr	r0, [pc, #16]	; (8000a4c <main+0x118>)
 8000a3c:	f000 fed7 	bl	80017ee <HAL_DAC_SetValue>
  {
 8000a40:	e79e      	b.n	8000980 <main+0x4c>
 8000a42:	bf00      	nop
 8000a44:	2000020c 	.word	0x2000020c
 8000a48:	200002dc 	.word	0x200002dc
 8000a4c:	20000328 	.word	0x20000328
 8000a50:	40533333 	.word	0x40533333
 8000a54:	200001fc 	.word	0x200001fc
 8000a58:	2000033c 	.word	0x2000033c
 8000a5c:	20000388 	.word	0x20000388
 8000a60:	00000000 	.word	0x00000000
 8000a64:	42480000 	.word	0x42480000
 8000a68:	457ff000 	.word	0x457ff000

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0b8      	sub	sp, #224	; 0xe0
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a76:	2234      	movs	r2, #52	; 0x34
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f004 fa66 	bl	8004f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	2290      	movs	r2, #144	; 0x90
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f004 fa57 	bl	8004f4c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4b39      	ldr	r3, [pc, #228]	; (8000b84 <SystemClock_Config+0x118>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a38      	ldr	r2, [pc, #224]	; (8000b84 <SystemClock_Config+0x118>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <SystemClock_Config+0x118>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ab6:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <SystemClock_Config+0x11c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000abe:	4a32      	ldr	r2, [pc, #200]	; (8000b88 <SystemClock_Config+0x11c>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6013      	str	r3, [r2, #0]
 8000ac6:	4b30      	ldr	r3, [pc, #192]	; (8000b88 <SystemClock_Config+0x11c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ade:	2310      	movs	r3, #16
 8000ae0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000af0:	2308      	movs	r3, #8
 8000af2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 108;
 8000af6:	236c      	movs	r3, #108	; 0x6c
 8000af8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b02:	2309      	movs	r3, #9
 8000b04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b08:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 f8df 	bl	8001cd0 <HAL_RCC_OscConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000b18:	f000 fa2e 	bl	8000f78 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b1c:	f001 f888 	bl	8001c30 <HAL_PWREx_EnableOverDrive>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000b26:	f000 fa27 	bl	8000f78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b30:	2302      	movs	r3, #2
 8000b32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000b36:	2380      	movs	r3, #128	; 0x80
 8000b38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b48:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 fb6c 	bl	800222c <HAL_RCC_ClockConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b5a:	f000 fa0d 	bl	8000f78 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b62:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f001 fd5d 	bl	800262c <HAL_RCCEx_PeriphCLKConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000b78:	f000 f9fe 	bl	8000f78 <Error_Handler>
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	37e0      	adds	r7, #224	; 0xe0
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40007000 	.word	0x40007000

08000b8c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_DAC_Init+0x4c>)
 8000b9c:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <MX_DAC_Init+0x50>)
 8000b9e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000ba0:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <MX_DAC_Init+0x4c>)
 8000ba2:	f000 fe02 	bl	80017aa <HAL_DAC_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000bac:	f000 f9e4 	bl	8000f78 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <MX_DAC_Init+0x4c>)
 8000bc0:	f000 fe3a 	bl	8001838 <HAL_DAC_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000bca:	f000 f9d5 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000328 	.word	0x20000328
 8000bdc:	40007400 	.word	0x40007400

08000be0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bfe:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <MX_TIM1_Init+0xb4>)
 8000c00:	4a25      	ldr	r2, [pc, #148]	; (8000c98 <MX_TIM1_Init+0xb8>)
 8000c02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5399;
 8000c04:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <MX_TIM1_Init+0xb4>)
 8000c06:	f241 5217 	movw	r2, #5399	; 0x1517
 8000c0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0c:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <MX_TIM1_Init+0xb4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000c12:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <MX_TIM1_Init+0xb4>)
 8000c14:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <MX_TIM1_Init+0xb4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <MX_TIM1_Init+0xb4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <MX_TIM1_Init+0xb4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c2c:	4819      	ldr	r0, [pc, #100]	; (8000c94 <MX_TIM1_Init+0xb4>)
 8000c2e:	f002 f925 	bl	8002e7c <HAL_TIM_Base_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000c38:	f000 f99e 	bl	8000f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4619      	mov	r1, r3
 8000c48:	4812      	ldr	r0, [pc, #72]	; (8000c94 <MX_TIM1_Init+0xb4>)
 8000c4a:	f002 ff29 	bl	8003aa0 <HAL_TIM_ConfigClockSource>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000c54:	f000 f990 	bl	8000f78 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000c58:	2108      	movs	r1, #8
 8000c5a:	480e      	ldr	r0, [pc, #56]	; (8000c94 <MX_TIM1_Init+0xb4>)
 8000c5c:	f002 fd0a 	bl	8003674 <HAL_TIM_OnePulse_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c66:	f000 f987 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000c6a:	2310      	movs	r3, #16
 8000c6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4806      	ldr	r0, [pc, #24]	; (8000c94 <MX_TIM1_Init+0xb4>)
 8000c7c:	f003 fb9c 	bl	80043b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000c86:	f000 f977 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	3720      	adds	r7, #32
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2000033c 	.word	0x2000033c
 8000c98:	40010000 	.word	0x40010000

08000c9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08c      	sub	sp, #48	; 0x30
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ca2:	f107 0320 	add.w	r3, r7, #32
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cca:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <MX_TIM2_Init+0xd0>)
 8000ccc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cd0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cd2:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <MX_TIM2_Init+0xd0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd8:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <MX_TIM2_Init+0xd0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000cde:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <MX_TIM2_Init+0xd0>)
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <MX_TIM2_Init+0xd0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cec:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <MX_TIM2_Init+0xd0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cf2:	481e      	ldr	r0, [pc, #120]	; (8000d6c <MX_TIM2_Init+0xd0>)
 8000cf4:	f002 f8c2 	bl	8002e7c <HAL_TIM_Base_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000cfe:	f000 f93b 	bl	8000f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d06:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sClockSourceConfig.ClockFilter = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d14:	f107 0320 	add.w	r3, r7, #32
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4814      	ldr	r0, [pc, #80]	; (8000d6c <MX_TIM2_Init+0xd0>)
 8000d1c:	f002 fec0 	bl	8003aa0 <HAL_TIM_ConfigClockSource>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d26:	f000 f927 	bl	8000f78 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8000d2a:	2305      	movs	r3, #5
 8000d2c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	4619      	mov	r1, r3
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <MX_TIM2_Init+0xd0>)
 8000d3a:	f002 ff7b 	bl	8003c34 <HAL_TIM_SlaveConfigSynchro>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000d44:	f000 f918 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d48:	2320      	movs	r3, #32
 8000d4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d50:	463b      	mov	r3, r7
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_TIM2_Init+0xd0>)
 8000d56:	f003 fb2f 	bl	80043b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8000d60:	f000 f90a 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	3730      	adds	r7, #48	; 0x30
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000388 	.word	0x20000388

08000d70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d86:	463b      	mov	r3, r7
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d90:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <MX_TIM3_Init+0x98>)
 8000d92:	4a1e      	ldr	r2, [pc, #120]	; (8000e0c <MX_TIM3_Init+0x9c>)
 8000d94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <MX_TIM3_Init+0x98>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MX_TIM3_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <MX_TIM3_Init+0x98>)
 8000da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_TIM3_Init+0x98>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_TIM3_Init+0x98>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000db6:	4814      	ldr	r0, [pc, #80]	; (8000e08 <MX_TIM3_Init+0x98>)
 8000db8:	f002 f860 	bl	8002e7c <HAL_TIM_Base_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000dc2:	f000 f8d9 	bl	8000f78 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8000dca:	2330      	movs	r3, #48	; 0x30
 8000dcc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <MX_TIM3_Init+0x98>)
 8000dd6:	f002 ff2d 	bl	8003c34 <HAL_TIM_SlaveConfigSynchro>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000de0:	f000 f8ca 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de4:	2300      	movs	r3, #0
 8000de6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dec:	463b      	mov	r3, r7
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_TIM3_Init+0x98>)
 8000df2:	f003 fae1 	bl	80043b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000dfc:	f000 f8bc 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	3720      	adds	r7, #32
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200002dc 	.word	0x200002dc
 8000e0c:	40000400 	.word	0x40000400

08000e10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <MX_TIM4_Init+0xa0>)
 8000e30:	4a20      	ldr	r2, [pc, #128]	; (8000eb4 <MX_TIM4_Init+0xa4>)
 8000e32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 53;
 8000e34:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <MX_TIM4_Init+0xa0>)
 8000e36:	2235      	movs	r2, #53	; 0x35
 8000e38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <MX_TIM4_Init+0xa0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <MX_TIM4_Init+0xa0>)
 8000e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <MX_TIM4_Init+0xa0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <MX_TIM4_Init+0xa0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000e54:	4816      	ldr	r0, [pc, #88]	; (8000eb0 <MX_TIM4_Init+0xa0>)
 8000e56:	f002 f9a8 	bl	80031aa <HAL_TIM_IC_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000e60:	f000 f88a 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e64:	2320      	movs	r3, #32
 8000e66:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <MX_TIM4_Init+0xa0>)
 8000e74:	f003 faa0 	bl	80043b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000e7e:	f000 f87b 	bl	8000f78 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e86:	2301      	movs	r3, #1
 8000e88:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2200      	movs	r2, #0
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_TIM4_Init+0xa0>)
 8000e9a:	f002 fd64 	bl	8003966 <HAL_TIM_IC_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000ea4:	f000 f868 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2000020c 	.word	0x2000020c
 8000eb4:	40000800 	.word	0x40000800

08000eb8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ebe:	4a15      	ldr	r2, [pc, #84]	; (8000f14 <MX_USART3_UART_Init+0x5c>)
 8000ec0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ec4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USART3_UART_Init+0x58>)
 8000efc:	f003 fb08 	bl	8004510 <HAL_UART_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f06:	f000 f837 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000258 	.word	0x20000258
 8000f14:	40004800 	.word	0x40004800

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_GPIO_Init+0x5c>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <MX_GPIO_Init+0x5c>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_GPIO_Init+0x5c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_GPIO_Init+0x5c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <MX_GPIO_Init+0x5c>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <MX_GPIO_Init+0x5c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <MX_GPIO_Init+0x5c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <MX_GPIO_Init+0x5c>)
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <MX_GPIO_Init+0x5c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <Error_Handler+0x8>
	...

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <HAL_MspInit+0x44>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_MspInit+0x44>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <HAL_MspInit+0x44>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_MspInit+0x44>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_MspInit+0x44>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fac:	6453      	str	r3, [r2, #68]	; 0x44
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_MspInit+0x44>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800

08000fcc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a15      	ldr	r2, [pc, #84]	; (8001040 <HAL_DAC_MspInit+0x74>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d123      	bne.n	8001036 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_DAC_MspInit+0x78>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a14      	ldr	r2, [pc, #80]	; (8001044 <HAL_DAC_MspInit+0x78>)
 8000ff4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_DAC_MspInit+0x78>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <HAL_DAC_MspInit+0x78>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <HAL_DAC_MspInit+0x78>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <HAL_DAC_MspInit+0x78>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800101e:	2310      	movs	r3, #16
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001022:	2303      	movs	r3, #3
 8001024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <HAL_DAC_MspInit+0x7c>)
 8001032:	f000 fc51 	bl	80018d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	; 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40007400 	.word	0x40007400
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000

0800104c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	; 0x30
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a2d      	ldr	r2, [pc, #180]	; (8001120 <HAL_TIM_Base_MspInit+0xd4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d114      	bne.n	8001098 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800106e:	4b2d      	ldr	r3, [pc, #180]	; (8001124 <HAL_TIM_Base_MspInit+0xd8>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a2c      	ldr	r2, [pc, #176]	; (8001124 <HAL_TIM_Base_MspInit+0xd8>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <HAL_TIM_Base_MspInit+0xd8>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	61bb      	str	r3, [r7, #24]
 8001084:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	2019      	movs	r0, #25
 800108c:	f000 fb57 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001090:	2019      	movs	r0, #25
 8001092:	f000 fb70 	bl	8001776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001096:	e03e      	b.n	8001116 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a0:	d128      	bne.n	80010f4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <HAL_TIM_Base_MspInit+0xd8>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a1f      	ldr	r2, [pc, #124]	; (8001124 <HAL_TIM_Base_MspInit+0xd8>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <HAL_TIM_Base_MspInit+0xd8>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <HAL_TIM_Base_MspInit+0xd8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a19      	ldr	r2, [pc, #100]	; (8001124 <HAL_TIM_Base_MspInit+0xd8>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_TIM_Base_MspInit+0xd8>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010d2:	2301      	movs	r3, #1
 80010d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010e2:	2301      	movs	r3, #1
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	480e      	ldr	r0, [pc, #56]	; (8001128 <HAL_TIM_Base_MspInit+0xdc>)
 80010ee:	f000 fbf3 	bl	80018d8 <HAL_GPIO_Init>
}
 80010f2:	e010      	b.n	8001116 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0c      	ldr	r2, [pc, #48]	; (800112c <HAL_TIM_Base_MspInit+0xe0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d10b      	bne.n	8001116 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <HAL_TIM_Base_MspInit+0xd8>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	4a08      	ldr	r2, [pc, #32]	; (8001124 <HAL_TIM_Base_MspInit+0xd8>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	6413      	str	r3, [r2, #64]	; 0x40
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_TIM_Base_MspInit+0xd8>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
}
 8001116:	bf00      	nop
 8001118:	3730      	adds	r7, #48	; 0x30
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40010000 	.word	0x40010000
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000
 800112c:	40000400 	.word	0x40000400

08001130 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <HAL_TIM_IC_MspInit+0x8c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d130      	bne.n	80011b4 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <HAL_TIM_IC_MspInit+0x90>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	4a1a      	ldr	r2, [pc, #104]	; (80011c0 <HAL_TIM_IC_MspInit+0x90>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6413      	str	r3, [r2, #64]	; 0x40
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <HAL_TIM_IC_MspInit+0x90>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_TIM_IC_MspInit+0x90>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <HAL_TIM_IC_MspInit+0x90>)
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_TIM_IC_MspInit+0x90>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001194:	2302      	movs	r3, #2
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	4809      	ldr	r0, [pc, #36]	; (80011c4 <HAL_TIM_IC_MspInit+0x94>)
 80011a0:	f000 fb9a 	bl	80018d8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	201e      	movs	r0, #30
 80011aa:	f000 fac8 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011ae:	201e      	movs	r0, #30
 80011b0:	f000 fae1 	bl	8001776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40000800 	.word	0x40000800
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020c00 	.word	0x40020c00

080011c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a17      	ldr	r2, [pc, #92]	; (8001244 <HAL_UART_MspInit+0x7c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d128      	bne.n	800123c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_UART_MspInit+0x80>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a16      	ldr	r2, [pc, #88]	; (8001248 <HAL_UART_MspInit+0x80>)
 80011f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_UART_MspInit+0x80>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <HAL_UART_MspInit+0x80>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a10      	ldr	r2, [pc, #64]	; (8001248 <HAL_UART_MspInit+0x80>)
 8001208:	f043 0308 	orr.w	r3, r3, #8
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <HAL_UART_MspInit+0x80>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800121a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800121e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800122c:	2307      	movs	r3, #7
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	4805      	ldr	r0, [pc, #20]	; (800124c <HAL_UART_MspInit+0x84>)
 8001238:	f000 fb4e 	bl	80018d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800123c:	bf00      	nop
 800123e:	3728      	adds	r7, #40	; 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40004800 	.word	0x40004800
 8001248:	40023800 	.word	0x40023800
 800124c:	40020c00 	.word	0x40020c00

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <NMI_Handler+0x4>

08001256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <MemManage_Handler+0x4>

08001262 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <UsageFault_Handler+0x4>

0800126e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129c:	f000 f954 	bl	8001548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80012aa:	f002 fa3d 	bl	8003728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000033c 	.word	0x2000033c

080012b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <TIM4_IRQHandler+0x10>)
 80012be:	f002 fa33 	bl	8003728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2000020c 	.word	0x2000020c

080012cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
	return 1;
 80012d0:	2301      	movs	r3, #1
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <_kill>:

int _kill(int pid, int sig)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012e6:	f003 fe07 	bl	8004ef8 <__errno>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2216      	movs	r2, #22
 80012ee:	601a      	str	r2, [r3, #0]
	return -1;
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <_exit>:

void _exit (int status)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ffe7 	bl	80012dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800130e:	e7fe      	b.n	800130e <_exit+0x12>

08001310 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	e00a      	b.n	8001338 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001322:	f3af 8000 	nop.w
 8001326:	4601      	mov	r1, r0
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	60ba      	str	r2, [r7, #8]
 800132e:	b2ca      	uxtb	r2, r1
 8001330:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	3301      	adds	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	429a      	cmp	r2, r3
 800133e:	dbf0      	blt.n	8001322 <_read+0x12>
	}

return len;
 8001340:	687b      	ldr	r3, [r7, #4]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	e009      	b.n	8001370 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	60ba      	str	r2, [r7, #8]
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	3301      	adds	r3, #1
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	429a      	cmp	r2, r3
 8001376:	dbf1      	blt.n	800135c <_write+0x12>
	}
	return len;
 8001378:	687b      	ldr	r3, [r7, #4]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <_close>:

int _close(int file)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
	return -1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013aa:	605a      	str	r2, [r3, #4]
	return 0;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <_isatty>:

int _isatty(int file)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
	return 1;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
	return 0;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f4:	4a14      	ldr	r2, [pc, #80]	; (8001448 <_sbrk+0x5c>)
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <_sbrk+0x60>)
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <_sbrk+0x64>)
 800140a:	4a12      	ldr	r2, [pc, #72]	; (8001454 <_sbrk+0x68>)
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	429a      	cmp	r2, r3
 800141a:	d207      	bcs.n	800142c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800141c:	f003 fd6c 	bl	8004ef8 <__errno>
 8001420:	4603      	mov	r3, r0
 8001422:	220c      	movs	r2, #12
 8001424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	e009      	b.n	8001440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <_sbrk+0x64>)
 800143c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20080000 	.word	0x20080000
 800144c:	00000400 	.word	0x00000400
 8001450:	20000200 	.word	0x20000200
 8001454:	200003e8 	.word	0x200003e8

08001458 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <SystemInit+0x20>)
 800145e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <SystemInit+0x20>)
 8001464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <Reset_Handler>:
 800147c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b4 <LoopFillZerobss+0x12>
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <LoopFillZerobss+0x16>)
 8001482:	490e      	ldr	r1, [pc, #56]	; (80014bc <LoopFillZerobss+0x1a>)
 8001484:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <LoopFillZerobss+0x1e>)
 8001486:	2300      	movs	r3, #0
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:
 800148a:	58d4      	ldr	r4, [r2, r3]
 800148c:	50c4      	str	r4, [r0, r3]
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:
 8001490:	18c4      	adds	r4, r0, r3
 8001492:	428c      	cmp	r4, r1
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
 8001496:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <LoopFillZerobss+0x22>)
 8001498:	4c0b      	ldr	r4, [pc, #44]	; (80014c8 <LoopFillZerobss+0x26>)
 800149a:	2300      	movs	r3, #0
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:
 80014a2:	42a2      	cmp	r2, r4
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>
 80014a6:	f7ff ffd7 	bl	8001458 <SystemInit>
 80014aa:	f003 fd2b 	bl	8004f04 <__libc_init_array>
 80014ae:	f7ff fa41 	bl	8000934 <main>
 80014b2:	4770      	bx	lr
 80014b4:	20080000 	.word	0x20080000
 80014b8:	20000000 	.word	0x20000000
 80014bc:	200001dc 	.word	0x200001dc
 80014c0:	0800800c 	.word	0x0800800c
 80014c4:	200001dc 	.word	0x200001dc
 80014c8:	200003e8 	.word	0x200003e8

080014cc <ADC_IRQHandler>:
 80014cc:	e7fe      	b.n	80014cc <ADC_IRQHandler>

080014ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d2:	2003      	movs	r0, #3
 80014d4:	f000 f928 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d8:	2000      	movs	r0, #0
 80014da:	f000 f805 	bl	80014e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014de:	f7ff fd51 	bl	8000f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_InitTick+0x54>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_InitTick+0x58>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f943 	bl	8001792 <HAL_SYSTICK_Config>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e00e      	b.n	8001534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d80a      	bhi.n	8001532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f000 f90b 	bl	800173e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001528:	4a06      	ldr	r2, [pc, #24]	; (8001544 <HAL_InitTick+0x5c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	e000      	b.n	8001534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000000 	.word	0x20000000
 8001540:	20000008 	.word	0x20000008
 8001544:	20000004 	.word	0x20000004

08001548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_IncTick+0x20>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_IncTick+0x24>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <HAL_IncTick+0x24>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000008 	.word	0x20000008
 800156c:	200003d4 	.word	0x200003d4

08001570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_GetTick+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	200003d4 	.word	0x200003d4

08001588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <__NVIC_SetPriorityGrouping+0x40>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a4:	4013      	ands	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x40>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00
 80015cc:	05fa0000 	.word	0x05fa0000

080015d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <__NVIC_GetPriorityGrouping+0x18>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f003 0307 	and.w	r3, r3, #7
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	db0b      	blt.n	8001616 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	f003 021f 	and.w	r2, r3, #31
 8001604:	4907      	ldr	r1, [pc, #28]	; (8001624 <__NVIC_EnableIRQ+0x38>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	2001      	movs	r0, #1
 800160e:	fa00 f202 	lsl.w	r2, r0, r2
 8001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000e100 	.word	0xe000e100

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	; (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	; (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f4:	d301      	bcc.n	80016fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00f      	b.n	800171a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <SysTick_Config+0x40>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001702:	210f      	movs	r1, #15
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f7ff ff8e 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <SysTick_Config+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <SysTick_Config+0x40>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff29 	bl	8001588 <__NVIC_SetPriorityGrouping>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001750:	f7ff ff3e 	bl	80015d0 <__NVIC_GetPriorityGrouping>
 8001754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f7ff ff8e 	bl	800167c <NVIC_EncodePriority>
 8001760:	4602      	mov	r2, r0
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff5d 	bl	8001628 <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff31 	bl	80015ec <__NVIC_EnableIRQ>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ffa2 	bl	80016e4 <SysTick_Config>
 80017a0:	4603      	mov	r3, r0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e014      	b.n	80017e6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	791b      	ldrb	r3, [r3, #4]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d105      	bne.n	80017d2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fbfd 	bl	8000fcc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2202      	movs	r2, #2
 80017d6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b087      	sub	sp, #28
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d105      	bne.n	8001818 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	3308      	adds	r3, #8
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	e004      	b.n	8001822 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	3314      	adds	r3, #20
 8001820:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	461a      	mov	r2, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	371c      	adds	r7, #28
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	795b      	ldrb	r3, [r3, #5]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_DAC_ConfigChannel+0x18>
 800184c:	2302      	movs	r3, #2
 800184e:	e03c      	b.n	80018ca <HAL_DAC_ConfigChannel+0x92>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2201      	movs	r2, #1
 8001854:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2202      	movs	r2, #2
 800185a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	4013      	ands	r3, r2
 8001878:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f003 0310 	and.w	r3, r3, #16
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4313      	orrs	r3, r2
 8001896:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6819      	ldr	r1, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	22c0      	movs	r2, #192	; 0xc0
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	400a      	ands	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2201      	movs	r2, #1
 80018c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	371c      	adds	r7, #28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	e175      	b.n	8001be4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018f8:	2201      	movs	r2, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	429a      	cmp	r2, r3
 8001912:	f040 8164 	bne.w	8001bde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d005      	beq.n	800192e <HAL_GPIO_Init+0x56>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d130      	bne.n	8001990 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 0201 	and.w	r2, r3, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b03      	cmp	r3, #3
 800199a:	d017      	beq.n	80019cc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d123      	bne.n	8001a20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	69b9      	ldr	r1, [r7, #24]
 8001a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80be 	beq.w	8001bde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	4b66      	ldr	r3, [pc, #408]	; (8001bfc <HAL_GPIO_Init+0x324>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	4a65      	ldr	r2, [pc, #404]	; (8001bfc <HAL_GPIO_Init+0x324>)
 8001a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6e:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <HAL_GPIO_Init+0x324>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a7a:	4a61      	ldr	r2, [pc, #388]	; (8001c00 <HAL_GPIO_Init+0x328>)
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	220f      	movs	r2, #15
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a58      	ldr	r2, [pc, #352]	; (8001c04 <HAL_GPIO_Init+0x32c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d037      	beq.n	8001b16 <HAL_GPIO_Init+0x23e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a57      	ldr	r2, [pc, #348]	; (8001c08 <HAL_GPIO_Init+0x330>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d031      	beq.n	8001b12 <HAL_GPIO_Init+0x23a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a56      	ldr	r2, [pc, #344]	; (8001c0c <HAL_GPIO_Init+0x334>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d02b      	beq.n	8001b0e <HAL_GPIO_Init+0x236>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a55      	ldr	r2, [pc, #340]	; (8001c10 <HAL_GPIO_Init+0x338>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d025      	beq.n	8001b0a <HAL_GPIO_Init+0x232>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a54      	ldr	r2, [pc, #336]	; (8001c14 <HAL_GPIO_Init+0x33c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01f      	beq.n	8001b06 <HAL_GPIO_Init+0x22e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a53      	ldr	r2, [pc, #332]	; (8001c18 <HAL_GPIO_Init+0x340>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d019      	beq.n	8001b02 <HAL_GPIO_Init+0x22a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a52      	ldr	r2, [pc, #328]	; (8001c1c <HAL_GPIO_Init+0x344>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_GPIO_Init+0x226>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a51      	ldr	r2, [pc, #324]	; (8001c20 <HAL_GPIO_Init+0x348>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00d      	beq.n	8001afa <HAL_GPIO_Init+0x222>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a50      	ldr	r2, [pc, #320]	; (8001c24 <HAL_GPIO_Init+0x34c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d007      	beq.n	8001af6 <HAL_GPIO_Init+0x21e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4f      	ldr	r2, [pc, #316]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d101      	bne.n	8001af2 <HAL_GPIO_Init+0x21a>
 8001aee:	2309      	movs	r3, #9
 8001af0:	e012      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001af2:	230a      	movs	r3, #10
 8001af4:	e010      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001af6:	2308      	movs	r3, #8
 8001af8:	e00e      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001afa:	2307      	movs	r3, #7
 8001afc:	e00c      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001afe:	2306      	movs	r3, #6
 8001b00:	e00a      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b02:	2305      	movs	r3, #5
 8001b04:	e008      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b06:	2304      	movs	r3, #4
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e004      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b16:	2300      	movs	r3, #0
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	f002 0203 	and.w	r2, r2, #3
 8001b1e:	0092      	lsls	r2, r2, #2
 8001b20:	4093      	lsls	r3, r2
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b28:	4935      	ldr	r1, [pc, #212]	; (8001c00 <HAL_GPIO_Init+0x328>)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	3302      	adds	r3, #2
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b36:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b5a:	4a34      	ldr	r2, [pc, #208]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b60:	4b32      	ldr	r3, [pc, #200]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b84:	4a29      	ldr	r2, [pc, #164]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b8a:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bae:	4a1f      	ldr	r2, [pc, #124]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd8:	4a14      	ldr	r2, [pc, #80]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3301      	adds	r3, #1
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b0f      	cmp	r3, #15
 8001be8:	f67f ae86 	bls.w	80018f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3724      	adds	r7, #36	; 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40013800 	.word	0x40013800
 8001c04:	40020000 	.word	0x40020000
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020c00 	.word	0x40020c00
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40021400 	.word	0x40021400
 8001c1c:	40021800 	.word	0x40021800
 8001c20:	40021c00 	.word	0x40021c00
 8001c24:	40022000 	.word	0x40022000
 8001c28:	40022400 	.word	0x40022400
 8001c2c:	40013c00 	.word	0x40013c00

08001c30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1d      	ldr	r2, [pc, #116]	; (8001ccc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c5e:	f7ff fc87 	bl	8001570 <HAL_GetTick>
 8001c62:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c64:	e009      	b.n	8001c7a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c66:	f7ff fc83 	bl	8001570 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c74:	d901      	bls.n	8001c7a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e022      	b.n	8001cc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c7a:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c86:	d1ee      	bne.n	8001c66 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c88:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0f      	ldr	r2, [pc, #60]	; (8001ccc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c94:	f7ff fc6c 	bl	8001570 <HAL_GetTick>
 8001c98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c9a:	e009      	b.n	8001cb0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c9c:	f7ff fc68 	bl	8001570 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001caa:	d901      	bls.n	8001cb0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e007      	b.n	8001cc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cbc:	d1ee      	bne.n	8001c9c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40007000 	.word	0x40007000

08001cd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e29b      	b.n	800221e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8087 	beq.w	8001e02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cf4:	4b96      	ldr	r3, [pc, #600]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d00c      	beq.n	8001d1a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d00:	4b93      	ldr	r3, [pc, #588]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d112      	bne.n	8001d32 <HAL_RCC_OscConfig+0x62>
 8001d0c:	4b90      	ldr	r3, [pc, #576]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d18:	d10b      	bne.n	8001d32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1a:	4b8d      	ldr	r3, [pc, #564]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d06c      	beq.n	8001e00 <HAL_RCC_OscConfig+0x130>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d168      	bne.n	8001e00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e275      	b.n	800221e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3a:	d106      	bne.n	8001d4a <HAL_RCC_OscConfig+0x7a>
 8001d3c:	4b84      	ldr	r3, [pc, #528]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a83      	ldr	r2, [pc, #524]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	e02e      	b.n	8001da8 <HAL_RCC_OscConfig+0xd8>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x9c>
 8001d52:	4b7f      	ldr	r3, [pc, #508]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a7e      	ldr	r2, [pc, #504]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	4b7c      	ldr	r3, [pc, #496]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7b      	ldr	r2, [pc, #492]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e01d      	b.n	8001da8 <HAL_RCC_OscConfig+0xd8>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0xc0>
 8001d76:	4b76      	ldr	r3, [pc, #472]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a75      	ldr	r2, [pc, #468]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b73      	ldr	r3, [pc, #460]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a72      	ldr	r2, [pc, #456]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e00b      	b.n	8001da8 <HAL_RCC_OscConfig+0xd8>
 8001d90:	4b6f      	ldr	r3, [pc, #444]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a6e      	ldr	r2, [pc, #440]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b6c      	ldr	r3, [pc, #432]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a6b      	ldr	r2, [pc, #428]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7ff fbde 	bl	8001570 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff fbda 	bl	8001570 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	; 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e229      	b.n	800221e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	4b61      	ldr	r3, [pc, #388]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0xe8>
 8001dd6:	e014      	b.n	8001e02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fbca 	bl	8001570 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de0:	f7ff fbc6 	bl	8001570 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	; 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e215      	b.n	800221e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df2:	4b57      	ldr	r3, [pc, #348]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x110>
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d069      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e0e:	4b50      	ldr	r3, [pc, #320]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1a:	4b4d      	ldr	r3, [pc, #308]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d11c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x190>
 8001e26:	4b4a      	ldr	r3, [pc, #296]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d116      	bne.n	8001e60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e32:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <HAL_RCC_OscConfig+0x17a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d001      	beq.n	8001e4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e1e9      	b.n	800221e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4a:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	493d      	ldr	r1, [pc, #244]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5e:	e040      	b.n	8001ee2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d023      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e68:	4b39      	ldr	r3, [pc, #228]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a38      	ldr	r2, [pc, #224]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff fb7c 	bl	8001570 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e7c:	f7ff fb78 	bl	8001570 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e1c7      	b.n	800221e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8e:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4929      	ldr	r1, [pc, #164]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
 8001eae:	e018      	b.n	8001ee2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb0:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a26      	ldr	r2, [pc, #152]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fb58 	bl	8001570 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec4:	f7ff fb54 	bl	8001570 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e1a3      	b.n	800221e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d038      	beq.n	8001f60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d019      	beq.n	8001f2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef6:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001efa:	4a15      	ldr	r2, [pc, #84]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f02:	f7ff fb35 	bl	8001570 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f0a:	f7ff fb31 	bl	8001570 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e180      	b.n	800221e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x23a>
 8001f28:	e01a      	b.n	8001f60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f2e:	4a08      	ldr	r2, [pc, #32]	; (8001f50 <HAL_RCC_OscConfig+0x280>)
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f36:	f7ff fb1b 	bl	8001570 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3e:	f7ff fb17 	bl	8001570 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d903      	bls.n	8001f54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e166      	b.n	800221e <HAL_RCC_OscConfig+0x54e>
 8001f50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f54:	4b92      	ldr	r3, [pc, #584]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8001f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1ee      	bne.n	8001f3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80a4 	beq.w	80020b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6e:	4b8c      	ldr	r3, [pc, #560]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10d      	bne.n	8001f96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7a:	4b89      	ldr	r3, [pc, #548]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a88      	ldr	r2, [pc, #544]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8001f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
 8001f86:	4b86      	ldr	r3, [pc, #536]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f92:	2301      	movs	r3, #1
 8001f94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f96:	4b83      	ldr	r3, [pc, #524]	; (80021a4 <HAL_RCC_OscConfig+0x4d4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d118      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001fa2:	4b80      	ldr	r3, [pc, #512]	; (80021a4 <HAL_RCC_OscConfig+0x4d4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a7f      	ldr	r2, [pc, #508]	; (80021a4 <HAL_RCC_OscConfig+0x4d4>)
 8001fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fae:	f7ff fadf 	bl	8001570 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb6:	f7ff fadb 	bl	8001570 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b64      	cmp	r3, #100	; 0x64
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e12a      	b.n	800221e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc8:	4b76      	ldr	r3, [pc, #472]	; (80021a4 <HAL_RCC_OscConfig+0x4d4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d106      	bne.n	8001fea <HAL_RCC_OscConfig+0x31a>
 8001fdc:	4b70      	ldr	r3, [pc, #448]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	4a6f      	ldr	r2, [pc, #444]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe8:	e02d      	b.n	8002046 <HAL_RCC_OscConfig+0x376>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0x33c>
 8001ff2:	4b6b      	ldr	r3, [pc, #428]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a6a      	ldr	r2, [pc, #424]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffe:	4b68      	ldr	r3, [pc, #416]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002002:	4a67      	ldr	r2, [pc, #412]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8002004:	f023 0304 	bic.w	r3, r3, #4
 8002008:	6713      	str	r3, [r2, #112]	; 0x70
 800200a:	e01c      	b.n	8002046 <HAL_RCC_OscConfig+0x376>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b05      	cmp	r3, #5
 8002012:	d10c      	bne.n	800202e <HAL_RCC_OscConfig+0x35e>
 8002014:	4b62      	ldr	r3, [pc, #392]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	4a61      	ldr	r2, [pc, #388]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 800201a:	f043 0304 	orr.w	r3, r3, #4
 800201e:	6713      	str	r3, [r2, #112]	; 0x70
 8002020:	4b5f      	ldr	r3, [pc, #380]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002024:	4a5e      	ldr	r2, [pc, #376]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6713      	str	r3, [r2, #112]	; 0x70
 800202c:	e00b      	b.n	8002046 <HAL_RCC_OscConfig+0x376>
 800202e:	4b5c      	ldr	r3, [pc, #368]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8002030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002032:	4a5b      	ldr	r2, [pc, #364]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8002034:	f023 0301 	bic.w	r3, r3, #1
 8002038:	6713      	str	r3, [r2, #112]	; 0x70
 800203a:	4b59      	ldr	r3, [pc, #356]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203e:	4a58      	ldr	r2, [pc, #352]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8002040:	f023 0304 	bic.w	r3, r3, #4
 8002044:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d015      	beq.n	800207a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204e:	f7ff fa8f 	bl	8001570 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002054:	e00a      	b.n	800206c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002056:	f7ff fa8b 	bl	8001570 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	f241 3288 	movw	r2, #5000	; 0x1388
 8002064:	4293      	cmp	r3, r2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e0d8      	b.n	800221e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206c:	4b4c      	ldr	r3, [pc, #304]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 800206e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0ee      	beq.n	8002056 <HAL_RCC_OscConfig+0x386>
 8002078:	e014      	b.n	80020a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207a:	f7ff fa79 	bl	8001570 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002080:	e00a      	b.n	8002098 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f7ff fa75 	bl	8001570 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002090:	4293      	cmp	r3, r2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e0c2      	b.n	800221e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002098:	4b41      	ldr	r3, [pc, #260]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1ee      	bne.n	8002082 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d105      	bne.n	80020b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020aa:	4b3d      	ldr	r3, [pc, #244]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	4a3c      	ldr	r2, [pc, #240]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 80020b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80ae 	beq.w	800221c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020c0:	4b37      	ldr	r3, [pc, #220]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d06d      	beq.n	80021a8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d14b      	bne.n	800216c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d4:	4b32      	ldr	r3, [pc, #200]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a31      	ldr	r2, [pc, #196]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 80020da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e0:	f7ff fa46 	bl	8001570 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e8:	f7ff fa42 	bl	8001570 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e091      	b.n	800221e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fa:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69da      	ldr	r2, [r3, #28]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	019b      	lsls	r3, r3, #6
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	085b      	lsrs	r3, r3, #1
 800211e:	3b01      	subs	r3, #1
 8002120:	041b      	lsls	r3, r3, #16
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	061b      	lsls	r3, r3, #24
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	071b      	lsls	r3, r3, #28
 8002132:	491b      	ldr	r1, [pc, #108]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8002134:	4313      	orrs	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a18      	ldr	r2, [pc, #96]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 800213e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7ff fa14 	bl	8001570 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214c:	f7ff fa10 	bl	8001570 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e05f      	b.n	800221e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0x47c>
 800216a:	e057      	b.n	800221c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0b      	ldr	r2, [pc, #44]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8002172:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7ff f9fa 	bl	8001570 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002180:	f7ff f9f6 	bl	8001570 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e045      	b.n	800221e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002192:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <HAL_RCC_OscConfig+0x4d0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x4b0>
 800219e:	e03d      	b.n	800221c <HAL_RCC_OscConfig+0x54c>
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80021a8:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <HAL_RCC_OscConfig+0x558>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d030      	beq.n	8002218 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d129      	bne.n	8002218 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d122      	bne.n	8002218 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021d8:	4013      	ands	r3, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d119      	bne.n	8002218 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	085b      	lsrs	r3, r3, #1
 80021f0:	3b01      	subs	r3, #1
 80021f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d10f      	bne.n	8002218 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002204:	429a      	cmp	r2, r3
 8002206:	d107      	bne.n	8002218 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800

0800222c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0d0      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002244:	4b6a      	ldr	r3, [pc, #424]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d910      	bls.n	8002274 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b67      	ldr	r3, [pc, #412]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 020f 	bic.w	r2, r3, #15
 800225a:	4965      	ldr	r1, [pc, #404]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b63      	ldr	r3, [pc, #396]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0b8      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d020      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800228c:	4b59      	ldr	r3, [pc, #356]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	4a58      	ldr	r2, [pc, #352]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 8002292:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002296:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022a4:	4b53      	ldr	r3, [pc, #332]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4a52      	ldr	r2, [pc, #328]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 80022aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b0:	4b50      	ldr	r3, [pc, #320]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	494d      	ldr	r1, [pc, #308]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d040      	beq.n	8002350 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	4b47      	ldr	r3, [pc, #284]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d115      	bne.n	800230e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e07f      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d107      	bne.n	80022fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ee:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e073      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fe:	4b3d      	ldr	r3, [pc, #244]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e06b      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230e:	4b39      	ldr	r3, [pc, #228]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f023 0203 	bic.w	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4936      	ldr	r1, [pc, #216]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 800231c:	4313      	orrs	r3, r2
 800231e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002320:	f7ff f926 	bl	8001570 <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	e00a      	b.n	800233e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002328:	f7ff f922 	bl	8001570 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	; 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e053      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 020c 	and.w	r2, r3, #12
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	429a      	cmp	r2, r3
 800234e:	d1eb      	bne.n	8002328 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d210      	bcs.n	8002380 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 020f 	bic.w	r2, r3, #15
 8002366:	4922      	ldr	r1, [pc, #136]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e032      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4916      	ldr	r1, [pc, #88]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d009      	beq.n	80023be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	490e      	ldr	r1, [pc, #56]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023be:	f000 f821 	bl	8002404 <HAL_RCC_GetSysClockFreq>
 80023c2:	4602      	mov	r2, r0
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	490a      	ldr	r1, [pc, #40]	; (80023f8 <HAL_RCC_ClockConfig+0x1cc>)
 80023d0:	5ccb      	ldrb	r3, [r1, r3]
 80023d2:	fa22 f303 	lsr.w	r3, r2, r3
 80023d6:	4a09      	ldr	r2, [pc, #36]	; (80023fc <HAL_RCC_ClockConfig+0x1d0>)
 80023d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <HAL_RCC_ClockConfig+0x1d4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff f882 	bl	80014e8 <HAL_InitTick>

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023c00 	.word	0x40023c00
 80023f4:	40023800 	.word	0x40023800
 80023f8:	08007c00 	.word	0x08007c00
 80023fc:	20000000 	.word	0x20000000
 8002400:	20000004 	.word	0x20000004

08002404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002404:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	2300      	movs	r3, #0
 8002416:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800241c:	4b67      	ldr	r3, [pc, #412]	; (80025bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 030c 	and.w	r3, r3, #12
 8002424:	2b08      	cmp	r3, #8
 8002426:	d00d      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0x40>
 8002428:	2b08      	cmp	r3, #8
 800242a:	f200 80bd 	bhi.w	80025a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0x34>
 8002432:	2b04      	cmp	r3, #4
 8002434:	d003      	beq.n	800243e <HAL_RCC_GetSysClockFreq+0x3a>
 8002436:	e0b7      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002438:	4b61      	ldr	r3, [pc, #388]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800243a:	60bb      	str	r3, [r7, #8]
      break;
 800243c:	e0b7      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800243e:	4b60      	ldr	r3, [pc, #384]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002440:	60bb      	str	r3, [r7, #8]
      break;
 8002442:	e0b4      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002444:	4b5d      	ldr	r3, [pc, #372]	; (80025bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800244c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800244e:	4b5b      	ldr	r3, [pc, #364]	; (80025bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d04d      	beq.n	80024f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800245a:	4b58      	ldr	r3, [pc, #352]	; (80025bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	099b      	lsrs	r3, r3, #6
 8002460:	461a      	mov	r2, r3
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	f240 10ff 	movw	r0, #511	; 0x1ff
 800246a:	f04f 0100 	mov.w	r1, #0
 800246e:	ea02 0800 	and.w	r8, r2, r0
 8002472:	ea03 0901 	and.w	r9, r3, r1
 8002476:	4640      	mov	r0, r8
 8002478:	4649      	mov	r1, r9
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	014b      	lsls	r3, r1, #5
 8002484:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002488:	0142      	lsls	r2, r0, #5
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	ebb0 0008 	subs.w	r0, r0, r8
 8002492:	eb61 0109 	sbc.w	r1, r1, r9
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	f04f 0300 	mov.w	r3, #0
 800249e:	018b      	lsls	r3, r1, #6
 80024a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024a4:	0182      	lsls	r2, r0, #6
 80024a6:	1a12      	subs	r2, r2, r0
 80024a8:	eb63 0301 	sbc.w	r3, r3, r1
 80024ac:	f04f 0000 	mov.w	r0, #0
 80024b0:	f04f 0100 	mov.w	r1, #0
 80024b4:	00d9      	lsls	r1, r3, #3
 80024b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024ba:	00d0      	lsls	r0, r2, #3
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	eb12 0208 	adds.w	r2, r2, r8
 80024c4:	eb43 0309 	adc.w	r3, r3, r9
 80024c8:	f04f 0000 	mov.w	r0, #0
 80024cc:	f04f 0100 	mov.w	r1, #0
 80024d0:	0299      	lsls	r1, r3, #10
 80024d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80024d6:	0290      	lsls	r0, r2, #10
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	461a      	mov	r2, r3
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	f7fd ff02 	bl	80002f0 <__aeabi_uldivmod>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4613      	mov	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	e04a      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f6:	4b31      	ldr	r3, [pc, #196]	; (80025bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	099b      	lsrs	r3, r3, #6
 80024fc:	461a      	mov	r2, r3
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002506:	f04f 0100 	mov.w	r1, #0
 800250a:	ea02 0400 	and.w	r4, r2, r0
 800250e:	ea03 0501 	and.w	r5, r3, r1
 8002512:	4620      	mov	r0, r4
 8002514:	4629      	mov	r1, r5
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	014b      	lsls	r3, r1, #5
 8002520:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002524:	0142      	lsls	r2, r0, #5
 8002526:	4610      	mov	r0, r2
 8002528:	4619      	mov	r1, r3
 800252a:	1b00      	subs	r0, r0, r4
 800252c:	eb61 0105 	sbc.w	r1, r1, r5
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	018b      	lsls	r3, r1, #6
 800253a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800253e:	0182      	lsls	r2, r0, #6
 8002540:	1a12      	subs	r2, r2, r0
 8002542:	eb63 0301 	sbc.w	r3, r3, r1
 8002546:	f04f 0000 	mov.w	r0, #0
 800254a:	f04f 0100 	mov.w	r1, #0
 800254e:	00d9      	lsls	r1, r3, #3
 8002550:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002554:	00d0      	lsls	r0, r2, #3
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	1912      	adds	r2, r2, r4
 800255c:	eb45 0303 	adc.w	r3, r5, r3
 8002560:	f04f 0000 	mov.w	r0, #0
 8002564:	f04f 0100 	mov.w	r1, #0
 8002568:	0299      	lsls	r1, r3, #10
 800256a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800256e:	0290      	lsls	r0, r2, #10
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	461a      	mov	r2, r3
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	f7fd feb6 	bl	80002f0 <__aeabi_uldivmod>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4613      	mov	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	0c1b      	lsrs	r3, r3, #16
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	3301      	adds	r3, #1
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	60bb      	str	r3, [r7, #8]
      break;
 80025a6:	e002      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80025aa:	60bb      	str	r3, [r7, #8]
      break;
 80025ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ae:	68bb      	ldr	r3, [r7, #8]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
 80025c0:	00f42400 	.word	0x00f42400

080025c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ca:	681b      	ldr	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000000 	.word	0x20000000

080025dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025e0:	f7ff fff0 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	0a9b      	lsrs	r3, r3, #10
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4903      	ldr	r1, [pc, #12]	; (8002600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40023800 	.word	0x40023800
 8002600:	08007c10 	.word	0x08007c10

08002604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002608:	f7ff ffdc 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 800260c:	4602      	mov	r2, r0
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	0b5b      	lsrs	r3, r3, #13
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	4903      	ldr	r1, [pc, #12]	; (8002628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800261a:	5ccb      	ldrb	r3, [r1, r3]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40023800 	.word	0x40023800
 8002628:	08007c10 	.word	0x08007c10

0800262c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d012      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002654:	4b69      	ldr	r3, [pc, #420]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	4a68      	ldr	r2, [pc, #416]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800265a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800265e:	6093      	str	r3, [r2, #8]
 8002660:	4b66      	ldr	r3, [pc, #408]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002668:	4964      	ldr	r1, [pc, #400]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002676:	2301      	movs	r3, #1
 8002678:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d017      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002686:	4b5d      	ldr	r3, [pc, #372]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800268c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	4959      	ldr	r1, [pc, #356]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a4:	d101      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80026a6:	2301      	movs	r3, #1
 80026a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80026b2:	2301      	movs	r3, #1
 80026b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d017      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026c2:	4b4e      	ldr	r3, [pc, #312]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	494a      	ldr	r1, [pc, #296]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026e0:	d101      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026e2:	2301      	movs	r3, #1
 80026e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80026ee:	2301      	movs	r3, #1
 80026f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80026fe:	2301      	movs	r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 808b 	beq.w	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002710:	4b3a      	ldr	r3, [pc, #232]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	4a39      	ldr	r2, [pc, #228]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271a:	6413      	str	r3, [r2, #64]	; 0x40
 800271c:	4b37      	ldr	r3, [pc, #220]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002728:	4b35      	ldr	r3, [pc, #212]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a34      	ldr	r2, [pc, #208]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800272e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002732:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002734:	f7fe ff1c 	bl	8001570 <HAL_GetTick>
 8002738:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273c:	f7fe ff18 	bl	8001570 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e38f      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800274e:	4b2c      	ldr	r3, [pc, #176]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800275a:	4b28      	ldr	r3, [pc, #160]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002762:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d035      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	429a      	cmp	r2, r3
 8002776:	d02e      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002778:	4b20      	ldr	r3, [pc, #128]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002780:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002782:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	4a1d      	ldr	r2, [pc, #116]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800278e:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	4a1a      	ldr	r2, [pc, #104]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002798:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800279a:	4a18      	ldr	r2, [pc, #96]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027a0:	4b16      	ldr	r3, [pc, #88]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d114      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe fee0 	bl	8001570 <HAL_GetTick>
 80027b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b2:	e00a      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b4:	f7fe fedc 	bl	8001570 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e351      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ca:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0ee      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027e2:	d111      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027f0:	4b04      	ldr	r3, [pc, #16]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027f2:	400b      	ands	r3, r1
 80027f4:	4901      	ldr	r1, [pc, #4]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
 80027fa:	e00b      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80027fc:	40023800 	.word	0x40023800
 8002800:	40007000 	.word	0x40007000
 8002804:	0ffffcff 	.word	0x0ffffcff
 8002808:	4bb3      	ldr	r3, [pc, #716]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	4ab2      	ldr	r2, [pc, #712]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800280e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002812:	6093      	str	r3, [r2, #8]
 8002814:	4bb0      	ldr	r3, [pc, #704]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002816:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002820:	49ad      	ldr	r1, [pc, #692]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002822:	4313      	orrs	r3, r2
 8002824:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	2b00      	cmp	r3, #0
 8002830:	d010      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002832:	4ba9      	ldr	r3, [pc, #676]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002838:	4aa7      	ldr	r2, [pc, #668]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800283a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800283e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002842:	4ba5      	ldr	r3, [pc, #660]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002844:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	49a2      	ldr	r1, [pc, #648]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002860:	4b9d      	ldr	r3, [pc, #628]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002866:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800286e:	499a      	ldr	r1, [pc, #616]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002882:	4b95      	ldr	r3, [pc, #596]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002888:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002890:	4991      	ldr	r1, [pc, #580]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028a4:	4b8c      	ldr	r3, [pc, #560]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b2:	4989      	ldr	r1, [pc, #548]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028c6:	4b84      	ldr	r3, [pc, #528]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	4980      	ldr	r1, [pc, #512]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028e8:	4b7b      	ldr	r3, [pc, #492]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ee:	f023 0203 	bic.w	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	4978      	ldr	r1, [pc, #480]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800290a:	4b73      	ldr	r3, [pc, #460]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002910:	f023 020c 	bic.w	r2, r3, #12
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002918:	496f      	ldr	r1, [pc, #444]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800292c:	4b6a      	ldr	r3, [pc, #424]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002932:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293a:	4967      	ldr	r1, [pc, #412]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800294e:	4b62      	ldr	r3, [pc, #392]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002954:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800295c:	495e      	ldr	r1, [pc, #376]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002970:	4b59      	ldr	r3, [pc, #356]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002976:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	4956      	ldr	r1, [pc, #344]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002992:	4b51      	ldr	r3, [pc, #324]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002998:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a0:	494d      	ldr	r1, [pc, #308]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80029b4:	4b48      	ldr	r3, [pc, #288]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	4945      	ldr	r1, [pc, #276]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80029d6:	4b40      	ldr	r3, [pc, #256]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e4:	493c      	ldr	r1, [pc, #240]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029f8:	4b37      	ldr	r3, [pc, #220]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a06:	4934      	ldr	r1, [pc, #208]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d011      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a1a:	4b2f      	ldr	r3, [pc, #188]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a20:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a28:	492b      	ldr	r1, [pc, #172]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a38:	d101      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a5a:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a60:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a68:	491b      	ldr	r1, [pc, #108]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00b      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a7c:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a82:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a8c:	4912      	ldr	r1, [pc, #72]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00b      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002aa0:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab0:	4909      	ldr	r1, [pc, #36]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00f      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ac4:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad4:	e002      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	4986      	ldr	r1, [pc, #536]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00b      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002af0:	4b81      	ldr	r3, [pc, #516]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b00:	497d      	ldr	r1, [pc, #500]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d006      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 80d6 	beq.w	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b1c:	4b76      	ldr	r3, [pc, #472]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a75      	ldr	r2, [pc, #468]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b28:	f7fe fd22 	bl	8001570 <HAL_GetTick>
 8002b2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b30:	f7fe fd1e 	bl	8001570 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	; 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e195      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b42:	4b6d      	ldr	r3, [pc, #436]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d021      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d11d      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b62:	4b65      	ldr	r3, [pc, #404]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b68:	0c1b      	lsrs	r3, r3, #16
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b70:	4b61      	ldr	r3, [pc, #388]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b76:	0e1b      	lsrs	r3, r3, #24
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	019a      	lsls	r2, r3, #6
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	041b      	lsls	r3, r3, #16
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	061b      	lsls	r3, r3, #24
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	071b      	lsls	r3, r3, #28
 8002b96:	4958      	ldr	r1, [pc, #352]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d004      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bb2:	d00a      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d02e      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc8:	d129      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bca:	4b4b      	ldr	r3, [pc, #300]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd0:	0c1b      	lsrs	r3, r3, #16
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bd8:	4b47      	ldr	r3, [pc, #284]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bde:	0f1b      	lsrs	r3, r3, #28
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	019a      	lsls	r2, r3, #6
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	041b      	lsls	r3, r3, #16
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	061b      	lsls	r3, r3, #24
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	071b      	lsls	r3, r3, #28
 8002bfe:	493e      	ldr	r1, [pc, #248]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c06:	4b3c      	ldr	r3, [pc, #240]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c0c:	f023 021f 	bic.w	r2, r3, #31
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	3b01      	subs	r3, #1
 8002c16:	4938      	ldr	r1, [pc, #224]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d01d      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c2a:	4b33      	ldr	r3, [pc, #204]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c30:	0e1b      	lsrs	r3, r3, #24
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c38:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c3e:	0f1b      	lsrs	r3, r3, #28
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	019a      	lsls	r2, r3, #6
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	041b      	lsls	r3, r3, #16
 8002c52:	431a      	orrs	r2, r3
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	061b      	lsls	r3, r3, #24
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	071b      	lsls	r3, r3, #28
 8002c5e:	4926      	ldr	r1, [pc, #152]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d011      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	019a      	lsls	r2, r3, #6
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	041b      	lsls	r3, r3, #16
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	071b      	lsls	r3, r3, #28
 8002c8e:	491a      	ldr	r1, [pc, #104]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c96:	4b18      	ldr	r3, [pc, #96]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a17      	ldr	r2, [pc, #92]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca2:	f7fe fc65 	bl	8001570 <HAL_GetTick>
 8002ca6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002caa:	f7fe fc61 	bl	8001570 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b64      	cmp	r3, #100	; 0x64
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0d8      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	f040 80ce 	bne.w	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002cd0:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a08      	ldr	r2, [pc, #32]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cdc:	f7fe fc48 	bl	8001570 <HAL_GetTick>
 8002ce0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ce2:	e00b      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ce4:	f7fe fc44 	bl	8001570 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	; 0x64
 8002cf0:	d904      	bls.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e0bb      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cfc:	4b5e      	ldr	r3, [pc, #376]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d08:	d0ec      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d02e      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d12a      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d32:	4b51      	ldr	r3, [pc, #324]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d38:	0c1b      	lsrs	r3, r3, #16
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d40:	4b4d      	ldr	r3, [pc, #308]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	0f1b      	lsrs	r3, r3, #28
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	019a      	lsls	r2, r3, #6
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	041b      	lsls	r3, r3, #16
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	061b      	lsls	r3, r3, #24
 8002d60:	431a      	orrs	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	071b      	lsls	r3, r3, #28
 8002d66:	4944      	ldr	r1, [pc, #272]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d6e:	4b42      	ldr	r3, [pc, #264]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	021b      	lsls	r3, r3, #8
 8002d80:	493d      	ldr	r1, [pc, #244]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d022      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d9c:	d11d      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d9e:	4b36      	ldr	r3, [pc, #216]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da4:	0e1b      	lsrs	r3, r3, #24
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002dac:	4b32      	ldr	r3, [pc, #200]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db2:	0f1b      	lsrs	r3, r3, #28
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	019a      	lsls	r2, r3, #6
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	041b      	lsls	r3, r3, #16
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	061b      	lsls	r3, r3, #24
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	071b      	lsls	r3, r3, #28
 8002dd2:	4929      	ldr	r1, [pc, #164]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d028      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002de6:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dec:	0e1b      	lsrs	r3, r3, #24
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002df4:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	0c1b      	lsrs	r3, r3, #16
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	019a      	lsls	r2, r3, #6
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	041b      	lsls	r3, r3, #16
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	061b      	lsls	r3, r3, #24
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	071b      	lsls	r3, r3, #28
 8002e1a:	4917      	ldr	r1, [pc, #92]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e22:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	4911      	ldr	r1, [pc, #68]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e38:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a0e      	ldr	r2, [pc, #56]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e44:	f7fe fb94 	bl	8001570 <HAL_GetTick>
 8002e48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e4c:	f7fe fb90 	bl	8001570 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	; 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e007      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e6a:	d1ef      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3720      	adds	r7, #32
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800

08002e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e049      	b.n	8002f22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fe f8d2 	bl	800104c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f000 ff5e 	bl	8003d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d001      	beq.n	8002f44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e04c      	b.n	8002fde <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a26      	ldr	r2, [pc, #152]	; (8002fec <HAL_TIM_Base_Start+0xc0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d022      	beq.n	8002f9c <HAL_TIM_Base_Start+0x70>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5e:	d01d      	beq.n	8002f9c <HAL_TIM_Base_Start+0x70>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a22      	ldr	r2, [pc, #136]	; (8002ff0 <HAL_TIM_Base_Start+0xc4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d018      	beq.n	8002f9c <HAL_TIM_Base_Start+0x70>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a21      	ldr	r2, [pc, #132]	; (8002ff4 <HAL_TIM_Base_Start+0xc8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d013      	beq.n	8002f9c <HAL_TIM_Base_Start+0x70>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1f      	ldr	r2, [pc, #124]	; (8002ff8 <HAL_TIM_Base_Start+0xcc>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00e      	beq.n	8002f9c <HAL_TIM_Base_Start+0x70>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1e      	ldr	r2, [pc, #120]	; (8002ffc <HAL_TIM_Base_Start+0xd0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d009      	beq.n	8002f9c <HAL_TIM_Base_Start+0x70>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1c      	ldr	r2, [pc, #112]	; (8003000 <HAL_TIM_Base_Start+0xd4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_TIM_Base_Start+0x70>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <HAL_TIM_Base_Start+0xd8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d115      	bne.n	8002fc8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	4b19      	ldr	r3, [pc, #100]	; (8003008 <HAL_TIM_Base_Start+0xdc>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b06      	cmp	r3, #6
 8002fac:	d015      	beq.n	8002fda <HAL_TIM_Base_Start+0xae>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d011      	beq.n	8002fda <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0201 	orr.w	r2, r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc6:	e008      	b.n	8002fda <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	e000      	b.n	8002fdc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40010000 	.word	0x40010000
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40000800 	.word	0x40000800
 8002ff8:	40000c00 	.word	0x40000c00
 8002ffc:	40010400 	.word	0x40010400
 8003000:	40014000 	.word	0x40014000
 8003004:	40001800 	.word	0x40001800
 8003008:	00010007 	.word	0x00010007

0800300c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6a1a      	ldr	r2, [r3, #32]
 800301a:	f241 1311 	movw	r3, #4369	; 0x1111
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10f      	bne.n	8003044 <HAL_TIM_Base_Stop+0x38>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6a1a      	ldr	r2, [r3, #32]
 800302a:	f240 4344 	movw	r3, #1092	; 0x444
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <HAL_TIM_Base_Stop+0x38>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	d001      	beq.n	8003074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e054      	b.n	800311e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a26      	ldr	r2, [pc, #152]	; (800312c <HAL_TIM_Base_Start_IT+0xd0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d022      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x80>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309e:	d01d      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x80>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a22      	ldr	r2, [pc, #136]	; (8003130 <HAL_TIM_Base_Start_IT+0xd4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d018      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x80>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a21      	ldr	r2, [pc, #132]	; (8003134 <HAL_TIM_Base_Start_IT+0xd8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d013      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x80>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1f      	ldr	r2, [pc, #124]	; (8003138 <HAL_TIM_Base_Start_IT+0xdc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00e      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x80>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1e      	ldr	r2, [pc, #120]	; (800313c <HAL_TIM_Base_Start_IT+0xe0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d009      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x80>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1c      	ldr	r2, [pc, #112]	; (8003140 <HAL_TIM_Base_Start_IT+0xe4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d004      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x80>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1b      	ldr	r2, [pc, #108]	; (8003144 <HAL_TIM_Base_Start_IT+0xe8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d115      	bne.n	8003108 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	4b19      	ldr	r3, [pc, #100]	; (8003148 <HAL_TIM_Base_Start_IT+0xec>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b06      	cmp	r3, #6
 80030ec:	d015      	beq.n	800311a <HAL_TIM_Base_Start_IT+0xbe>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f4:	d011      	beq.n	800311a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003106:	e008      	b.n	800311a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	e000      	b.n	800311c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40010000 	.word	0x40010000
 8003130:	40000400 	.word	0x40000400
 8003134:	40000800 	.word	0x40000800
 8003138:	40000c00 	.word	0x40000c00
 800313c:	40010400 	.word	0x40010400
 8003140:	40014000 	.word	0x40014000
 8003144:	40001800 	.word	0x40001800
 8003148:	00010007 	.word	0x00010007

0800314c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0201 	bic.w	r2, r2, #1
 8003162:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6a1a      	ldr	r2, [r3, #32]
 800316a:	f241 1311 	movw	r3, #4369	; 0x1111
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10f      	bne.n	8003194 <HAL_TIM_Base_Stop_IT+0x48>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6a1a      	ldr	r2, [r3, #32]
 800317a:	f240 4344 	movw	r3, #1092	; 0x444
 800317e:	4013      	ands	r3, r2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d107      	bne.n	8003194 <HAL_TIM_Base_Stop_IT+0x48>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e049      	b.n	8003250 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d106      	bne.n	80031d6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7fd ffad 	bl	8001130 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2202      	movs	r2, #2
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3304      	adds	r3, #4
 80031e6:	4619      	mov	r1, r3
 80031e8:	4610      	mov	r0, r2
 80031ea:	f000 fdc7 	bl	8003d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d104      	bne.n	8003276 <HAL_TIM_IC_Start_IT+0x1e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003272:	b2db      	uxtb	r3, r3
 8003274:	e023      	b.n	80032be <HAL_TIM_IC_Start_IT+0x66>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b04      	cmp	r3, #4
 800327a:	d104      	bne.n	8003286 <HAL_TIM_IC_Start_IT+0x2e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003282:	b2db      	uxtb	r3, r3
 8003284:	e01b      	b.n	80032be <HAL_TIM_IC_Start_IT+0x66>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d104      	bne.n	8003296 <HAL_TIM_IC_Start_IT+0x3e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003292:	b2db      	uxtb	r3, r3
 8003294:	e013      	b.n	80032be <HAL_TIM_IC_Start_IT+0x66>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b0c      	cmp	r3, #12
 800329a:	d104      	bne.n	80032a6 <HAL_TIM_IC_Start_IT+0x4e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	e00b      	b.n	80032be <HAL_TIM_IC_Start_IT+0x66>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b10      	cmp	r3, #16
 80032aa:	d104      	bne.n	80032b6 <HAL_TIM_IC_Start_IT+0x5e>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	e003      	b.n	80032be <HAL_TIM_IC_Start_IT+0x66>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d104      	bne.n	80032d0 <HAL_TIM_IC_Start_IT+0x78>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	e013      	b.n	80032f8 <HAL_TIM_IC_Start_IT+0xa0>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d104      	bne.n	80032e0 <HAL_TIM_IC_Start_IT+0x88>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	e00b      	b.n	80032f8 <HAL_TIM_IC_Start_IT+0xa0>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d104      	bne.n	80032f0 <HAL_TIM_IC_Start_IT+0x98>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	e003      	b.n	80032f8 <HAL_TIM_IC_Start_IT+0xa0>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80032fa:	7bbb      	ldrb	r3, [r7, #14]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d102      	bne.n	8003306 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003300:	7b7b      	ldrb	r3, [r7, #13]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d001      	beq.n	800330a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e0e2      	b.n	80034d0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d104      	bne.n	800331a <HAL_TIM_IC_Start_IT+0xc2>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003318:	e023      	b.n	8003362 <HAL_TIM_IC_Start_IT+0x10a>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b04      	cmp	r3, #4
 800331e:	d104      	bne.n	800332a <HAL_TIM_IC_Start_IT+0xd2>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003328:	e01b      	b.n	8003362 <HAL_TIM_IC_Start_IT+0x10a>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b08      	cmp	r3, #8
 800332e:	d104      	bne.n	800333a <HAL_TIM_IC_Start_IT+0xe2>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003338:	e013      	b.n	8003362 <HAL_TIM_IC_Start_IT+0x10a>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b0c      	cmp	r3, #12
 800333e:	d104      	bne.n	800334a <HAL_TIM_IC_Start_IT+0xf2>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003348:	e00b      	b.n	8003362 <HAL_TIM_IC_Start_IT+0x10a>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b10      	cmp	r3, #16
 800334e:	d104      	bne.n	800335a <HAL_TIM_IC_Start_IT+0x102>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003358:	e003      	b.n	8003362 <HAL_TIM_IC_Start_IT+0x10a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2202      	movs	r2, #2
 800335e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d104      	bne.n	8003372 <HAL_TIM_IC_Start_IT+0x11a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003370:	e013      	b.n	800339a <HAL_TIM_IC_Start_IT+0x142>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b04      	cmp	r3, #4
 8003376:	d104      	bne.n	8003382 <HAL_TIM_IC_Start_IT+0x12a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003380:	e00b      	b.n	800339a <HAL_TIM_IC_Start_IT+0x142>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b08      	cmp	r3, #8
 8003386:	d104      	bne.n	8003392 <HAL_TIM_IC_Start_IT+0x13a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003390:	e003      	b.n	800339a <HAL_TIM_IC_Start_IT+0x142>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2202      	movs	r2, #2
 8003396:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b0c      	cmp	r3, #12
 800339e:	d841      	bhi.n	8003424 <HAL_TIM_IC_Start_IT+0x1cc>
 80033a0:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <HAL_TIM_IC_Start_IT+0x150>)
 80033a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a6:	bf00      	nop
 80033a8:	080033dd 	.word	0x080033dd
 80033ac:	08003425 	.word	0x08003425
 80033b0:	08003425 	.word	0x08003425
 80033b4:	08003425 	.word	0x08003425
 80033b8:	080033ef 	.word	0x080033ef
 80033bc:	08003425 	.word	0x08003425
 80033c0:	08003425 	.word	0x08003425
 80033c4:	08003425 	.word	0x08003425
 80033c8:	08003401 	.word	0x08003401
 80033cc:	08003425 	.word	0x08003425
 80033d0:	08003425 	.word	0x08003425
 80033d4:	08003425 	.word	0x08003425
 80033d8:	08003413 	.word	0x08003413
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0202 	orr.w	r2, r2, #2
 80033ea:	60da      	str	r2, [r3, #12]
      break;
 80033ec:	e01d      	b.n	800342a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0204 	orr.w	r2, r2, #4
 80033fc:	60da      	str	r2, [r3, #12]
      break;
 80033fe:	e014      	b.n	800342a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0208 	orr.w	r2, r2, #8
 800340e:	60da      	str	r2, [r3, #12]
      break;
 8003410:	e00b      	b.n	800342a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0210 	orr.w	r2, r2, #16
 8003420:	60da      	str	r2, [r3, #12]
      break;
 8003422:	e002      	b.n	800342a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
      break;
 8003428:	bf00      	nop
  }

  if (status == HAL_OK)
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d14e      	bne.n	80034ce <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2201      	movs	r2, #1
 8003436:	6839      	ldr	r1, [r7, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f000 ff97 	bl	800436c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a25      	ldr	r2, [pc, #148]	; (80034d8 <HAL_TIM_IC_Start_IT+0x280>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d022      	beq.n	800348e <HAL_TIM_IC_Start_IT+0x236>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003450:	d01d      	beq.n	800348e <HAL_TIM_IC_Start_IT+0x236>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a21      	ldr	r2, [pc, #132]	; (80034dc <HAL_TIM_IC_Start_IT+0x284>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d018      	beq.n	800348e <HAL_TIM_IC_Start_IT+0x236>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1f      	ldr	r2, [pc, #124]	; (80034e0 <HAL_TIM_IC_Start_IT+0x288>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d013      	beq.n	800348e <HAL_TIM_IC_Start_IT+0x236>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a1e      	ldr	r2, [pc, #120]	; (80034e4 <HAL_TIM_IC_Start_IT+0x28c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00e      	beq.n	800348e <HAL_TIM_IC_Start_IT+0x236>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1c      	ldr	r2, [pc, #112]	; (80034e8 <HAL_TIM_IC_Start_IT+0x290>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d009      	beq.n	800348e <HAL_TIM_IC_Start_IT+0x236>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1b      	ldr	r2, [pc, #108]	; (80034ec <HAL_TIM_IC_Start_IT+0x294>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d004      	beq.n	800348e <HAL_TIM_IC_Start_IT+0x236>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a19      	ldr	r2, [pc, #100]	; (80034f0 <HAL_TIM_IC_Start_IT+0x298>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d115      	bne.n	80034ba <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	4b17      	ldr	r3, [pc, #92]	; (80034f4 <HAL_TIM_IC_Start_IT+0x29c>)
 8003496:	4013      	ands	r3, r2
 8003498:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b06      	cmp	r3, #6
 800349e:	d015      	beq.n	80034cc <HAL_TIM_IC_Start_IT+0x274>
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a6:	d011      	beq.n	80034cc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b8:	e008      	b.n	80034cc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 0201 	orr.w	r2, r2, #1
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	e000      	b.n	80034ce <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034cc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40010000 	.word	0x40010000
 80034dc:	40000400 	.word	0x40000400
 80034e0:	40000800 	.word	0x40000800
 80034e4:	40000c00 	.word	0x40000c00
 80034e8:	40010400 	.word	0x40010400
 80034ec:	40014000 	.word	0x40014000
 80034f0:	40001800 	.word	0x40001800
 80034f4:	00010007 	.word	0x00010007

080034f8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	73fb      	strb	r3, [r7, #15]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b0c      	cmp	r3, #12
 800350a:	d841      	bhi.n	8003590 <HAL_TIM_IC_Stop_IT+0x98>
 800350c:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <HAL_TIM_IC_Stop_IT+0x1c>)
 800350e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003512:	bf00      	nop
 8003514:	08003549 	.word	0x08003549
 8003518:	08003591 	.word	0x08003591
 800351c:	08003591 	.word	0x08003591
 8003520:	08003591 	.word	0x08003591
 8003524:	0800355b 	.word	0x0800355b
 8003528:	08003591 	.word	0x08003591
 800352c:	08003591 	.word	0x08003591
 8003530:	08003591 	.word	0x08003591
 8003534:	0800356d 	.word	0x0800356d
 8003538:	08003591 	.word	0x08003591
 800353c:	08003591 	.word	0x08003591
 8003540:	08003591 	.word	0x08003591
 8003544:	0800357f 	.word	0x0800357f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0202 	bic.w	r2, r2, #2
 8003556:	60da      	str	r2, [r3, #12]
      break;
 8003558:	e01d      	b.n	8003596 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0204 	bic.w	r2, r2, #4
 8003568:	60da      	str	r2, [r3, #12]
      break;
 800356a:	e014      	b.n	8003596 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0208 	bic.w	r2, r2, #8
 800357a:	60da      	str	r2, [r3, #12]
      break;
 800357c:	e00b      	b.n	8003596 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0210 	bic.w	r2, r2, #16
 800358c:	60da      	str	r2, [r3, #12]
      break;
 800358e:	e002      	b.n	8003596 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
      break;
 8003594:	bf00      	nop
  }

  if (status == HAL_OK)
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d166      	bne.n	800366a <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2200      	movs	r2, #0
 80035a2:	6839      	ldr	r1, [r7, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fee1 	bl	800436c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6a1a      	ldr	r2, [r3, #32]
 80035b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10f      	bne.n	80035da <HAL_TIM_IC_Stop_IT+0xe2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6a1a      	ldr	r2, [r3, #32]
 80035c0:	f240 4344 	movw	r3, #1092	; 0x444
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d107      	bne.n	80035da <HAL_TIM_IC_Stop_IT+0xe2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0201 	bic.w	r2, r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d104      	bne.n	80035ea <HAL_TIM_IC_Stop_IT+0xf2>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e8:	e023      	b.n	8003632 <HAL_TIM_IC_Stop_IT+0x13a>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d104      	bne.n	80035fa <HAL_TIM_IC_Stop_IT+0x102>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f8:	e01b      	b.n	8003632 <HAL_TIM_IC_Stop_IT+0x13a>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d104      	bne.n	800360a <HAL_TIM_IC_Stop_IT+0x112>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003608:	e013      	b.n	8003632 <HAL_TIM_IC_Stop_IT+0x13a>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b0c      	cmp	r3, #12
 800360e:	d104      	bne.n	800361a <HAL_TIM_IC_Stop_IT+0x122>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003618:	e00b      	b.n	8003632 <HAL_TIM_IC_Stop_IT+0x13a>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b10      	cmp	r3, #16
 800361e:	d104      	bne.n	800362a <HAL_TIM_IC_Stop_IT+0x132>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003628:	e003      	b.n	8003632 <HAL_TIM_IC_Stop_IT+0x13a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d104      	bne.n	8003642 <HAL_TIM_IC_Stop_IT+0x14a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003640:	e013      	b.n	800366a <HAL_TIM_IC_Stop_IT+0x172>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b04      	cmp	r3, #4
 8003646:	d104      	bne.n	8003652 <HAL_TIM_IC_Stop_IT+0x15a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003650:	e00b      	b.n	800366a <HAL_TIM_IC_Stop_IT+0x172>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b08      	cmp	r3, #8
 8003656:	d104      	bne.n	8003662 <HAL_TIM_IC_Stop_IT+0x16a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003660:	e003      	b.n	800366a <HAL_TIM_IC_Stop_IT+0x172>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 800366a:	7bfb      	ldrb	r3, [r7, #15]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e041      	b.n	800370c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f839 	bl	8003714 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2202      	movs	r2, #2
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3304      	adds	r3, #4
 80036b2:	4619      	mov	r1, r3
 80036b4:	4610      	mov	r0, r2
 80036b6:	f000 fb61 	bl	8003d7c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0208 	bic.w	r2, r2, #8
 80036c8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6819      	ldr	r1, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b02      	cmp	r3, #2
 800373c:	d122      	bne.n	8003784 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b02      	cmp	r3, #2
 800374a:	d11b      	bne.n	8003784 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0202 	mvn.w	r2, #2
 8003754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fc ff6c 	bl	8000648 <HAL_TIM_IC_CaptureCallback>
 8003770:	e005      	b.n	800377e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fae4 	bl	8003d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 faeb 	bl	8003d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b04      	cmp	r3, #4
 8003790:	d122      	bne.n	80037d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b04      	cmp	r3, #4
 800379e:	d11b      	bne.n	80037d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0204 	mvn.w	r2, #4
 80037a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2202      	movs	r2, #2
 80037ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fc ff42 	bl	8000648 <HAL_TIM_IC_CaptureCallback>
 80037c4:	e005      	b.n	80037d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 faba 	bl	8003d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fac1 	bl	8003d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d122      	bne.n	800382c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d11b      	bne.n	800382c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0208 	mvn.w	r2, #8
 80037fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2204      	movs	r2, #4
 8003802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fc ff18 	bl	8000648 <HAL_TIM_IC_CaptureCallback>
 8003818:	e005      	b.n	8003826 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fa90 	bl	8003d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fa97 	bl	8003d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b10      	cmp	r3, #16
 8003838:	d122      	bne.n	8003880 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0310 	and.w	r3, r3, #16
 8003844:	2b10      	cmp	r3, #16
 8003846:	d11b      	bne.n	8003880 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0210 	mvn.w	r2, #16
 8003850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2208      	movs	r2, #8
 8003856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fc feee 	bl	8000648 <HAL_TIM_IC_CaptureCallback>
 800386c:	e005      	b.n	800387a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fa66 	bl	8003d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 fa6d 	bl	8003d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b01      	cmp	r3, #1
 800388c:	d10e      	bne.n	80038ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b01      	cmp	r3, #1
 800389a:	d107      	bne.n	80038ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0201 	mvn.w	r2, #1
 80038a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fc ffa2 	bl	80007f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b6:	2b80      	cmp	r3, #128	; 0x80
 80038b8:	d10e      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c4:	2b80      	cmp	r3, #128	; 0x80
 80038c6:	d107      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fe08 	bl	80044e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e6:	d10e      	bne.n	8003906 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f2:	2b80      	cmp	r3, #128	; 0x80
 80038f4:	d107      	bne.n	8003906 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fdfb 	bl	80044fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003910:	2b40      	cmp	r3, #64	; 0x40
 8003912:	d10e      	bne.n	8003932 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391e:	2b40      	cmp	r3, #64	; 0x40
 8003920:	d107      	bne.n	8003932 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800392a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fa1b 	bl	8003d68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b20      	cmp	r3, #32
 800393e:	d10e      	bne.n	800395e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b20      	cmp	r3, #32
 800394c:	d107      	bne.n	800395e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f06f 0220 	mvn.w	r2, #32
 8003956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fdbb 	bl	80044d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b086      	sub	sp, #24
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003980:	2302      	movs	r3, #2
 8003982:	e088      	b.n	8003a96 <HAL_TIM_IC_ConfigChannel+0x130>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d11b      	bne.n	80039ca <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	6819      	ldr	r1, [r3, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f000 fb1f 	bl	8003fe4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	699a      	ldr	r2, [r3, #24]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 020c 	bic.w	r2, r2, #12
 80039b4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6999      	ldr	r1, [r3, #24]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	619a      	str	r2, [r3, #24]
 80039c8:	e060      	b.n	8003a8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d11c      	bne.n	8003a0a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	6819      	ldr	r1, [r3, #0]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f000 fba3 	bl	800412a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039f2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6999      	ldr	r1, [r3, #24]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	021a      	lsls	r2, r3, #8
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	619a      	str	r2, [r3, #24]
 8003a08:	e040      	b.n	8003a8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d11b      	bne.n	8003a48 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	6819      	ldr	r1, [r3, #0]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f000 fbf0 	bl	8004204 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 020c 	bic.w	r2, r2, #12
 8003a32:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69d9      	ldr	r1, [r3, #28]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	61da      	str	r2, [r3, #28]
 8003a46:	e021      	b.n	8003a8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b0c      	cmp	r3, #12
 8003a4c:	d11c      	bne.n	8003a88 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	6819      	ldr	r1, [r3, #0]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f000 fc0d 	bl	800427c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69da      	ldr	r2, [r3, #28]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a70:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69d9      	ldr	r1, [r3, #28]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	021a      	lsls	r2, r3, #8
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	61da      	str	r2, [r3, #28]
 8003a86:	e001      	b.n	8003a8c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_TIM_ConfigClockSource+0x1c>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e0b4      	b.n	8003c26 <HAL_TIM_ConfigClockSource+0x186>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	4b56      	ldr	r3, [pc, #344]	; (8003c30 <HAL_TIM_ConfigClockSource+0x190>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ae2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af4:	d03e      	beq.n	8003b74 <HAL_TIM_ConfigClockSource+0xd4>
 8003af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afa:	f200 8087 	bhi.w	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b02:	f000 8086 	beq.w	8003c12 <HAL_TIM_ConfigClockSource+0x172>
 8003b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0a:	d87f      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b70      	cmp	r3, #112	; 0x70
 8003b0e:	d01a      	beq.n	8003b46 <HAL_TIM_ConfigClockSource+0xa6>
 8003b10:	2b70      	cmp	r3, #112	; 0x70
 8003b12:	d87b      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b60      	cmp	r3, #96	; 0x60
 8003b16:	d050      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x11a>
 8003b18:	2b60      	cmp	r3, #96	; 0x60
 8003b1a:	d877      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b1c:	2b50      	cmp	r3, #80	; 0x50
 8003b1e:	d03c      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0xfa>
 8003b20:	2b50      	cmp	r3, #80	; 0x50
 8003b22:	d873      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b24:	2b40      	cmp	r3, #64	; 0x40
 8003b26:	d058      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x13a>
 8003b28:	2b40      	cmp	r3, #64	; 0x40
 8003b2a:	d86f      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b2c:	2b30      	cmp	r3, #48	; 0x30
 8003b2e:	d064      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x15a>
 8003b30:	2b30      	cmp	r3, #48	; 0x30
 8003b32:	d86b      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d060      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x15a>
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d867      	bhi.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d05c      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x15a>
 8003b40:	2b10      	cmp	r3, #16
 8003b42:	d05a      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x15a>
 8003b44:	e062      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	6899      	ldr	r1, [r3, #8]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f000 fbe9 	bl	800432c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	609a      	str	r2, [r3, #8]
      break;
 8003b72:	e04f      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	6899      	ldr	r1, [r3, #8]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f000 fbd2 	bl	800432c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b96:	609a      	str	r2, [r3, #8]
      break;
 8003b98:	e03c      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6859      	ldr	r1, [r3, #4]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f000 fa90 	bl	80040cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2150      	movs	r1, #80	; 0x50
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fb9f 	bl	80042f6 <TIM_ITRx_SetConfig>
      break;
 8003bb8:	e02c      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	6859      	ldr	r1, [r3, #4]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f000 faec 	bl	80041a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2160      	movs	r1, #96	; 0x60
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fb8f 	bl	80042f6 <TIM_ITRx_SetConfig>
      break;
 8003bd8:	e01c      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6859      	ldr	r1, [r3, #4]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	461a      	mov	r2, r3
 8003be8:	f000 fa70 	bl	80040cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2140      	movs	r1, #64	; 0x40
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fb7f 	bl	80042f6 <TIM_ITRx_SetConfig>
      break;
 8003bf8:	e00c      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4619      	mov	r1, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	f000 fb76 	bl	80042f6 <TIM_ITRx_SetConfig>
      break;
 8003c0a:	e003      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c10:	e000      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	fffeff88 	.word	0xfffeff88

08003c34 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_TIM_SlaveConfigSynchro+0x18>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e031      	b.n	8003cb0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003c5c:	6839      	ldr	r1, [r7, #0]
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f92c 	bl	8003ebc <TIM_SlaveTimer_SetConfig>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d009      	beq.n	8003c7e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e018      	b.n	8003cb0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c8c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c9c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b0c      	cmp	r3, #12
 8003cca:	d831      	bhi.n	8003d30 <HAL_TIM_ReadCapturedValue+0x78>
 8003ccc:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003d09 	.word	0x08003d09
 8003cd8:	08003d31 	.word	0x08003d31
 8003cdc:	08003d31 	.word	0x08003d31
 8003ce0:	08003d31 	.word	0x08003d31
 8003ce4:	08003d13 	.word	0x08003d13
 8003ce8:	08003d31 	.word	0x08003d31
 8003cec:	08003d31 	.word	0x08003d31
 8003cf0:	08003d31 	.word	0x08003d31
 8003cf4:	08003d1d 	.word	0x08003d1d
 8003cf8:	08003d31 	.word	0x08003d31
 8003cfc:	08003d31 	.word	0x08003d31
 8003d00:	08003d31 	.word	0x08003d31
 8003d04:	08003d27 	.word	0x08003d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0e:	60fb      	str	r3, [r7, #12]

      break;
 8003d10:	e00f      	b.n	8003d32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	60fb      	str	r3, [r7, #12]

      break;
 8003d1a:	e00a      	b.n	8003d32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d22:	60fb      	str	r3, [r7, #12]

      break;
 8003d24:	e005      	b.n	8003d32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	60fb      	str	r3, [r7, #12]

      break;
 8003d2e:	e000      	b.n	8003d32 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003d30:	bf00      	nop
  }

  return tmpreg;
 8003d32:	68fb      	ldr	r3, [r7, #12]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a40      	ldr	r2, [pc, #256]	; (8003e90 <TIM_Base_SetConfig+0x114>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d013      	beq.n	8003dbc <TIM_Base_SetConfig+0x40>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9a:	d00f      	beq.n	8003dbc <TIM_Base_SetConfig+0x40>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a3d      	ldr	r2, [pc, #244]	; (8003e94 <TIM_Base_SetConfig+0x118>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00b      	beq.n	8003dbc <TIM_Base_SetConfig+0x40>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a3c      	ldr	r2, [pc, #240]	; (8003e98 <TIM_Base_SetConfig+0x11c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d007      	beq.n	8003dbc <TIM_Base_SetConfig+0x40>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a3b      	ldr	r2, [pc, #236]	; (8003e9c <TIM_Base_SetConfig+0x120>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d003      	beq.n	8003dbc <TIM_Base_SetConfig+0x40>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a3a      	ldr	r2, [pc, #232]	; (8003ea0 <TIM_Base_SetConfig+0x124>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d108      	bne.n	8003dce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a2f      	ldr	r2, [pc, #188]	; (8003e90 <TIM_Base_SetConfig+0x114>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d02b      	beq.n	8003e2e <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ddc:	d027      	beq.n	8003e2e <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a2c      	ldr	r2, [pc, #176]	; (8003e94 <TIM_Base_SetConfig+0x118>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d023      	beq.n	8003e2e <TIM_Base_SetConfig+0xb2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a2b      	ldr	r2, [pc, #172]	; (8003e98 <TIM_Base_SetConfig+0x11c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d01f      	beq.n	8003e2e <TIM_Base_SetConfig+0xb2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a2a      	ldr	r2, [pc, #168]	; (8003e9c <TIM_Base_SetConfig+0x120>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d01b      	beq.n	8003e2e <TIM_Base_SetConfig+0xb2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a29      	ldr	r2, [pc, #164]	; (8003ea0 <TIM_Base_SetConfig+0x124>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d017      	beq.n	8003e2e <TIM_Base_SetConfig+0xb2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a28      	ldr	r2, [pc, #160]	; (8003ea4 <TIM_Base_SetConfig+0x128>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d013      	beq.n	8003e2e <TIM_Base_SetConfig+0xb2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a27      	ldr	r2, [pc, #156]	; (8003ea8 <TIM_Base_SetConfig+0x12c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00f      	beq.n	8003e2e <TIM_Base_SetConfig+0xb2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a26      	ldr	r2, [pc, #152]	; (8003eac <TIM_Base_SetConfig+0x130>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00b      	beq.n	8003e2e <TIM_Base_SetConfig+0xb2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a25      	ldr	r2, [pc, #148]	; (8003eb0 <TIM_Base_SetConfig+0x134>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d007      	beq.n	8003e2e <TIM_Base_SetConfig+0xb2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a24      	ldr	r2, [pc, #144]	; (8003eb4 <TIM_Base_SetConfig+0x138>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d003      	beq.n	8003e2e <TIM_Base_SetConfig+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a23      	ldr	r2, [pc, #140]	; (8003eb8 <TIM_Base_SetConfig+0x13c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d108      	bne.n	8003e40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a0a      	ldr	r2, [pc, #40]	; (8003e90 <TIM_Base_SetConfig+0x114>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d003      	beq.n	8003e74 <TIM_Base_SetConfig+0xf8>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a0c      	ldr	r2, [pc, #48]	; (8003ea0 <TIM_Base_SetConfig+0x124>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d103      	bne.n	8003e7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	615a      	str	r2, [r3, #20]
}
 8003e82:	bf00      	nop
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40010000 	.word	0x40010000
 8003e94:	40000400 	.word	0x40000400
 8003e98:	40000800 	.word	0x40000800
 8003e9c:	40000c00 	.word	0x40000c00
 8003ea0:	40010400 	.word	0x40010400
 8003ea4:	40014000 	.word	0x40014000
 8003ea8:	40014400 	.word	0x40014400
 8003eac:	40014800 	.word	0x40014800
 8003eb0:	40001800 	.word	0x40001800
 8003eb4:	40001c00 	.word	0x40001c00
 8003eb8:	40002000 	.word	0x40002000

08003ebc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4b3e      	ldr	r3, [pc, #248]	; (8003fe0 <TIM_SlaveTimer_SetConfig+0x124>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b70      	cmp	r3, #112	; 0x70
 8003f04:	d01a      	beq.n	8003f3c <TIM_SlaveTimer_SetConfig+0x80>
 8003f06:	2b70      	cmp	r3, #112	; 0x70
 8003f08:	d860      	bhi.n	8003fcc <TIM_SlaveTimer_SetConfig+0x110>
 8003f0a:	2b60      	cmp	r3, #96	; 0x60
 8003f0c:	d054      	beq.n	8003fb8 <TIM_SlaveTimer_SetConfig+0xfc>
 8003f0e:	2b60      	cmp	r3, #96	; 0x60
 8003f10:	d85c      	bhi.n	8003fcc <TIM_SlaveTimer_SetConfig+0x110>
 8003f12:	2b50      	cmp	r3, #80	; 0x50
 8003f14:	d046      	beq.n	8003fa4 <TIM_SlaveTimer_SetConfig+0xe8>
 8003f16:	2b50      	cmp	r3, #80	; 0x50
 8003f18:	d858      	bhi.n	8003fcc <TIM_SlaveTimer_SetConfig+0x110>
 8003f1a:	2b40      	cmp	r3, #64	; 0x40
 8003f1c:	d019      	beq.n	8003f52 <TIM_SlaveTimer_SetConfig+0x96>
 8003f1e:	2b40      	cmp	r3, #64	; 0x40
 8003f20:	d854      	bhi.n	8003fcc <TIM_SlaveTimer_SetConfig+0x110>
 8003f22:	2b30      	cmp	r3, #48	; 0x30
 8003f24:	d055      	beq.n	8003fd2 <TIM_SlaveTimer_SetConfig+0x116>
 8003f26:	2b30      	cmp	r3, #48	; 0x30
 8003f28:	d850      	bhi.n	8003fcc <TIM_SlaveTimer_SetConfig+0x110>
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d051      	beq.n	8003fd2 <TIM_SlaveTimer_SetConfig+0x116>
 8003f2e:	2b20      	cmp	r3, #32
 8003f30:	d84c      	bhi.n	8003fcc <TIM_SlaveTimer_SetConfig+0x110>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d04d      	beq.n	8003fd2 <TIM_SlaveTimer_SetConfig+0x116>
 8003f36:	2b10      	cmp	r3, #16
 8003f38:	d04b      	beq.n	8003fd2 <TIM_SlaveTimer_SetConfig+0x116>
 8003f3a:	e047      	b.n	8003fcc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	68d9      	ldr	r1, [r3, #12]
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f000 f9ee 	bl	800432c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003f50:	e040      	b.n	8003fd4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b05      	cmp	r3, #5
 8003f58:	d101      	bne.n	8003f5e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e03b      	b.n	8003fd6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6a1a      	ldr	r2, [r3, #32]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f84:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	621a      	str	r2, [r3, #32]
      break;
 8003fa2:	e017      	b.n	8003fd4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6818      	ldr	r0, [r3, #0]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	6899      	ldr	r1, [r3, #8]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f000 f88b 	bl	80040cc <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003fb6:	e00d      	b.n	8003fd4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6818      	ldr	r0, [r3, #0]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	6899      	ldr	r1, [r3, #8]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	f000 f8ed 	bl	80041a4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003fca:	e003      	b.n	8003fd4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd0:	e000      	b.n	8003fd4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003fd2:	bf00      	nop
  }

  return status;
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	fffefff8 	.word	0xfffefff8

08003fe4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f023 0201 	bic.w	r2, r3, #1
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a28      	ldr	r2, [pc, #160]	; (80040b0 <TIM_TI1_SetConfig+0xcc>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d01b      	beq.n	800404a <TIM_TI1_SetConfig+0x66>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004018:	d017      	beq.n	800404a <TIM_TI1_SetConfig+0x66>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4a25      	ldr	r2, [pc, #148]	; (80040b4 <TIM_TI1_SetConfig+0xd0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d013      	beq.n	800404a <TIM_TI1_SetConfig+0x66>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4a24      	ldr	r2, [pc, #144]	; (80040b8 <TIM_TI1_SetConfig+0xd4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00f      	beq.n	800404a <TIM_TI1_SetConfig+0x66>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4a23      	ldr	r2, [pc, #140]	; (80040bc <TIM_TI1_SetConfig+0xd8>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00b      	beq.n	800404a <TIM_TI1_SetConfig+0x66>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4a22      	ldr	r2, [pc, #136]	; (80040c0 <TIM_TI1_SetConfig+0xdc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d007      	beq.n	800404a <TIM_TI1_SetConfig+0x66>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4a21      	ldr	r2, [pc, #132]	; (80040c4 <TIM_TI1_SetConfig+0xe0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d003      	beq.n	800404a <TIM_TI1_SetConfig+0x66>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4a20      	ldr	r2, [pc, #128]	; (80040c8 <TIM_TI1_SetConfig+0xe4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d101      	bne.n	800404e <TIM_TI1_SetConfig+0x6a>
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <TIM_TI1_SetConfig+0x6c>
 800404e:	2300      	movs	r3, #0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f023 0303 	bic.w	r3, r3, #3
 800405a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	e003      	b.n	800406e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	b2db      	uxtb	r3, r3
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f023 030a 	bic.w	r3, r3, #10
 8004088:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f003 030a 	and.w	r3, r3, #10
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	621a      	str	r2, [r3, #32]
}
 80040a2:	bf00      	nop
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40010000 	.word	0x40010000
 80040b4:	40000400 	.word	0x40000400
 80040b8:	40000800 	.word	0x40000800
 80040bc:	40000c00 	.word	0x40000c00
 80040c0:	40010400 	.word	0x40010400
 80040c4:	40014000 	.word	0x40014000
 80040c8:	40001800 	.word	0x40001800

080040cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f023 0201 	bic.w	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f023 030a 	bic.w	r3, r3, #10
 8004108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	621a      	str	r2, [r3, #32]
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800412a:	b480      	push	{r7}
 800412c:	b087      	sub	sp, #28
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
 8004136:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f023 0210 	bic.w	r2, r3, #16
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004156:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	021b      	lsls	r3, r3, #8
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	031b      	lsls	r3, r3, #12
 800416e:	b29b      	uxth	r3, r3
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800417c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	621a      	str	r2, [r3, #32]
}
 8004198:	bf00      	nop
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f023 0210 	bic.w	r2, r3, #16
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	031b      	lsls	r3, r3, #12
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	621a      	str	r2, [r3, #32]
}
 80041f8:	bf00      	nop
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f023 0303 	bic.w	r3, r3, #3
 8004230:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004240:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	b2db      	uxtb	r3, r3
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004254:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	621a      	str	r2, [r3, #32]
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	031b      	lsls	r3, r3, #12
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80042ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	031b      	lsls	r3, r3, #12
 80042d4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	621a      	str	r2, [r3, #32]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b085      	sub	sp, #20
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	f043 0307 	orr.w	r3, r3, #7
 8004318:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	609a      	str	r2, [r3, #8]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	021a      	lsls	r2, r3, #8
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	431a      	orrs	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4313      	orrs	r3, r2
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	609a      	str	r2, [r3, #8]
}
 8004360:	bf00      	nop
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f003 031f 	and.w	r3, r3, #31
 800437e:	2201      	movs	r2, #1
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a1a      	ldr	r2, [r3, #32]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	43db      	mvns	r3, r3
 800438e:	401a      	ands	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a1a      	ldr	r2, [r3, #32]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f003 031f 	and.w	r3, r3, #31
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	fa01 f303 	lsl.w	r3, r1, r3
 80043a4:	431a      	orrs	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e06d      	b.n	80044ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a30      	ldr	r2, [pc, #192]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d004      	beq.n	8004404 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a2f      	ldr	r2, [pc, #188]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d108      	bne.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800440a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a20      	ldr	r2, [pc, #128]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d022      	beq.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004442:	d01d      	beq.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1d      	ldr	r2, [pc, #116]	; (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d018      	beq.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a1c      	ldr	r2, [pc, #112]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d013      	beq.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a1a      	ldr	r2, [pc, #104]	; (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00e      	beq.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a15      	ldr	r2, [pc, #84]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d009      	beq.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a16      	ldr	r2, [pc, #88]	; (80044cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d004      	beq.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a15      	ldr	r2, [pc, #84]	; (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d10c      	bne.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004486:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	4313      	orrs	r3, r2
 8004490:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40010400 	.word	0x40010400
 80044c0:	40000400 	.word	0x40000400
 80044c4:	40000800 	.word	0x40000800
 80044c8:	40000c00 	.word	0x40000c00
 80044cc:	40014000 	.word	0x40014000
 80044d0:	40001800 	.word	0x40001800

080044d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e040      	b.n	80045a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004526:	2b00      	cmp	r3, #0
 8004528:	d106      	bne.n	8004538 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7fc fe48 	bl	80011c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2224      	movs	r2, #36	; 0x24
 800453c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0201 	bic.w	r2, r2, #1
 800454c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f8c0 	bl	80046d4 <UART_SetConfig>
 8004554:	4603      	mov	r3, r0
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e022      	b.n	80045a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fb16 	bl	8004b98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800457a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800458a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 fb9d 	bl	8004cdc <UART_CheckIdleState>
 80045a2:	4603      	mov	r3, r0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	; 0x28
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	4613      	mov	r3, r2
 80045ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	f040 8081 	bne.w	80046c8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <HAL_UART_Transmit+0x26>
 80045cc:	88fb      	ldrh	r3, [r7, #6]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e079      	b.n	80046ca <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_UART_Transmit+0x38>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e072      	b.n	80046ca <HAL_UART_Transmit+0x11e>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2221      	movs	r2, #33	; 0x21
 80045f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045fa:	f7fc ffb9 	bl	8001570 <HAL_GetTick>
 80045fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	88fa      	ldrh	r2, [r7, #6]
 8004604:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	88fa      	ldrh	r2, [r7, #6]
 800460c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004618:	d108      	bne.n	800462c <HAL_UART_Transmit+0x80>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d104      	bne.n	800462c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	e003      	b.n	8004634 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004630:	2300      	movs	r3, #0
 8004632:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800463c:	e02c      	b.n	8004698 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2200      	movs	r2, #0
 8004646:	2180      	movs	r1, #128	; 0x80
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 fb90 	bl	8004d6e <UART_WaitOnFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e038      	b.n	80046ca <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10b      	bne.n	8004676 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800466c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	3302      	adds	r3, #2
 8004672:	61bb      	str	r3, [r7, #24]
 8004674:	e007      	b.n	8004686 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	781a      	ldrb	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	3301      	adds	r3, #1
 8004684:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1cc      	bne.n	800463e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2200      	movs	r2, #0
 80046ac:	2140      	movs	r1, #64	; 0x40
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 fb5d 	bl	8004d6e <UART_WaitOnFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e005      	b.n	80046ca <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	e000      	b.n	80046ca <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80046c8:	2302      	movs	r3, #2
  }
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b088      	sub	sp, #32
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046dc:	2300      	movs	r3, #0
 80046de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	4ba7      	ldr	r3, [pc, #668]	; (800499c <UART_SetConfig+0x2c8>)
 8004700:	4013      	ands	r3, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	6979      	ldr	r1, [r7, #20]
 8004708:	430b      	orrs	r3, r1
 800470a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	430a      	orrs	r2, r1
 8004744:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a95      	ldr	r2, [pc, #596]	; (80049a0 <UART_SetConfig+0x2cc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d120      	bne.n	8004792 <UART_SetConfig+0xbe>
 8004750:	4b94      	ldr	r3, [pc, #592]	; (80049a4 <UART_SetConfig+0x2d0>)
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	2b03      	cmp	r3, #3
 800475c:	d816      	bhi.n	800478c <UART_SetConfig+0xb8>
 800475e:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <UART_SetConfig+0x90>)
 8004760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004764:	08004775 	.word	0x08004775
 8004768:	08004781 	.word	0x08004781
 800476c:	0800477b 	.word	0x0800477b
 8004770:	08004787 	.word	0x08004787
 8004774:	2301      	movs	r3, #1
 8004776:	77fb      	strb	r3, [r7, #31]
 8004778:	e14f      	b.n	8004a1a <UART_SetConfig+0x346>
 800477a:	2302      	movs	r3, #2
 800477c:	77fb      	strb	r3, [r7, #31]
 800477e:	e14c      	b.n	8004a1a <UART_SetConfig+0x346>
 8004780:	2304      	movs	r3, #4
 8004782:	77fb      	strb	r3, [r7, #31]
 8004784:	e149      	b.n	8004a1a <UART_SetConfig+0x346>
 8004786:	2308      	movs	r3, #8
 8004788:	77fb      	strb	r3, [r7, #31]
 800478a:	e146      	b.n	8004a1a <UART_SetConfig+0x346>
 800478c:	2310      	movs	r3, #16
 800478e:	77fb      	strb	r3, [r7, #31]
 8004790:	e143      	b.n	8004a1a <UART_SetConfig+0x346>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a84      	ldr	r2, [pc, #528]	; (80049a8 <UART_SetConfig+0x2d4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d132      	bne.n	8004802 <UART_SetConfig+0x12e>
 800479c:	4b81      	ldr	r3, [pc, #516]	; (80049a4 <UART_SetConfig+0x2d0>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	2b0c      	cmp	r3, #12
 80047a8:	d828      	bhi.n	80047fc <UART_SetConfig+0x128>
 80047aa:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <UART_SetConfig+0xdc>)
 80047ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b0:	080047e5 	.word	0x080047e5
 80047b4:	080047fd 	.word	0x080047fd
 80047b8:	080047fd 	.word	0x080047fd
 80047bc:	080047fd 	.word	0x080047fd
 80047c0:	080047f1 	.word	0x080047f1
 80047c4:	080047fd 	.word	0x080047fd
 80047c8:	080047fd 	.word	0x080047fd
 80047cc:	080047fd 	.word	0x080047fd
 80047d0:	080047eb 	.word	0x080047eb
 80047d4:	080047fd 	.word	0x080047fd
 80047d8:	080047fd 	.word	0x080047fd
 80047dc:	080047fd 	.word	0x080047fd
 80047e0:	080047f7 	.word	0x080047f7
 80047e4:	2300      	movs	r3, #0
 80047e6:	77fb      	strb	r3, [r7, #31]
 80047e8:	e117      	b.n	8004a1a <UART_SetConfig+0x346>
 80047ea:	2302      	movs	r3, #2
 80047ec:	77fb      	strb	r3, [r7, #31]
 80047ee:	e114      	b.n	8004a1a <UART_SetConfig+0x346>
 80047f0:	2304      	movs	r3, #4
 80047f2:	77fb      	strb	r3, [r7, #31]
 80047f4:	e111      	b.n	8004a1a <UART_SetConfig+0x346>
 80047f6:	2308      	movs	r3, #8
 80047f8:	77fb      	strb	r3, [r7, #31]
 80047fa:	e10e      	b.n	8004a1a <UART_SetConfig+0x346>
 80047fc:	2310      	movs	r3, #16
 80047fe:	77fb      	strb	r3, [r7, #31]
 8004800:	e10b      	b.n	8004a1a <UART_SetConfig+0x346>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a69      	ldr	r2, [pc, #420]	; (80049ac <UART_SetConfig+0x2d8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d120      	bne.n	800484e <UART_SetConfig+0x17a>
 800480c:	4b65      	ldr	r3, [pc, #404]	; (80049a4 <UART_SetConfig+0x2d0>)
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004812:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004816:	2b30      	cmp	r3, #48	; 0x30
 8004818:	d013      	beq.n	8004842 <UART_SetConfig+0x16e>
 800481a:	2b30      	cmp	r3, #48	; 0x30
 800481c:	d814      	bhi.n	8004848 <UART_SetConfig+0x174>
 800481e:	2b20      	cmp	r3, #32
 8004820:	d009      	beq.n	8004836 <UART_SetConfig+0x162>
 8004822:	2b20      	cmp	r3, #32
 8004824:	d810      	bhi.n	8004848 <UART_SetConfig+0x174>
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <UART_SetConfig+0x15c>
 800482a:	2b10      	cmp	r3, #16
 800482c:	d006      	beq.n	800483c <UART_SetConfig+0x168>
 800482e:	e00b      	b.n	8004848 <UART_SetConfig+0x174>
 8004830:	2300      	movs	r3, #0
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	e0f1      	b.n	8004a1a <UART_SetConfig+0x346>
 8004836:	2302      	movs	r3, #2
 8004838:	77fb      	strb	r3, [r7, #31]
 800483a:	e0ee      	b.n	8004a1a <UART_SetConfig+0x346>
 800483c:	2304      	movs	r3, #4
 800483e:	77fb      	strb	r3, [r7, #31]
 8004840:	e0eb      	b.n	8004a1a <UART_SetConfig+0x346>
 8004842:	2308      	movs	r3, #8
 8004844:	77fb      	strb	r3, [r7, #31]
 8004846:	e0e8      	b.n	8004a1a <UART_SetConfig+0x346>
 8004848:	2310      	movs	r3, #16
 800484a:	77fb      	strb	r3, [r7, #31]
 800484c:	e0e5      	b.n	8004a1a <UART_SetConfig+0x346>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a57      	ldr	r2, [pc, #348]	; (80049b0 <UART_SetConfig+0x2dc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d120      	bne.n	800489a <UART_SetConfig+0x1c6>
 8004858:	4b52      	ldr	r3, [pc, #328]	; (80049a4 <UART_SetConfig+0x2d0>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004862:	2bc0      	cmp	r3, #192	; 0xc0
 8004864:	d013      	beq.n	800488e <UART_SetConfig+0x1ba>
 8004866:	2bc0      	cmp	r3, #192	; 0xc0
 8004868:	d814      	bhi.n	8004894 <UART_SetConfig+0x1c0>
 800486a:	2b80      	cmp	r3, #128	; 0x80
 800486c:	d009      	beq.n	8004882 <UART_SetConfig+0x1ae>
 800486e:	2b80      	cmp	r3, #128	; 0x80
 8004870:	d810      	bhi.n	8004894 <UART_SetConfig+0x1c0>
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <UART_SetConfig+0x1a8>
 8004876:	2b40      	cmp	r3, #64	; 0x40
 8004878:	d006      	beq.n	8004888 <UART_SetConfig+0x1b4>
 800487a:	e00b      	b.n	8004894 <UART_SetConfig+0x1c0>
 800487c:	2300      	movs	r3, #0
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e0cb      	b.n	8004a1a <UART_SetConfig+0x346>
 8004882:	2302      	movs	r3, #2
 8004884:	77fb      	strb	r3, [r7, #31]
 8004886:	e0c8      	b.n	8004a1a <UART_SetConfig+0x346>
 8004888:	2304      	movs	r3, #4
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e0c5      	b.n	8004a1a <UART_SetConfig+0x346>
 800488e:	2308      	movs	r3, #8
 8004890:	77fb      	strb	r3, [r7, #31]
 8004892:	e0c2      	b.n	8004a1a <UART_SetConfig+0x346>
 8004894:	2310      	movs	r3, #16
 8004896:	77fb      	strb	r3, [r7, #31]
 8004898:	e0bf      	b.n	8004a1a <UART_SetConfig+0x346>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a45      	ldr	r2, [pc, #276]	; (80049b4 <UART_SetConfig+0x2e0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d125      	bne.n	80048f0 <UART_SetConfig+0x21c>
 80048a4:	4b3f      	ldr	r3, [pc, #252]	; (80049a4 <UART_SetConfig+0x2d0>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048b2:	d017      	beq.n	80048e4 <UART_SetConfig+0x210>
 80048b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048b8:	d817      	bhi.n	80048ea <UART_SetConfig+0x216>
 80048ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048be:	d00b      	beq.n	80048d8 <UART_SetConfig+0x204>
 80048c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c4:	d811      	bhi.n	80048ea <UART_SetConfig+0x216>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <UART_SetConfig+0x1fe>
 80048ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ce:	d006      	beq.n	80048de <UART_SetConfig+0x20a>
 80048d0:	e00b      	b.n	80048ea <UART_SetConfig+0x216>
 80048d2:	2300      	movs	r3, #0
 80048d4:	77fb      	strb	r3, [r7, #31]
 80048d6:	e0a0      	b.n	8004a1a <UART_SetConfig+0x346>
 80048d8:	2302      	movs	r3, #2
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e09d      	b.n	8004a1a <UART_SetConfig+0x346>
 80048de:	2304      	movs	r3, #4
 80048e0:	77fb      	strb	r3, [r7, #31]
 80048e2:	e09a      	b.n	8004a1a <UART_SetConfig+0x346>
 80048e4:	2308      	movs	r3, #8
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	e097      	b.n	8004a1a <UART_SetConfig+0x346>
 80048ea:	2310      	movs	r3, #16
 80048ec:	77fb      	strb	r3, [r7, #31]
 80048ee:	e094      	b.n	8004a1a <UART_SetConfig+0x346>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a30      	ldr	r2, [pc, #192]	; (80049b8 <UART_SetConfig+0x2e4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d125      	bne.n	8004946 <UART_SetConfig+0x272>
 80048fa:	4b2a      	ldr	r3, [pc, #168]	; (80049a4 <UART_SetConfig+0x2d0>)
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004900:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004904:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004908:	d017      	beq.n	800493a <UART_SetConfig+0x266>
 800490a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800490e:	d817      	bhi.n	8004940 <UART_SetConfig+0x26c>
 8004910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004914:	d00b      	beq.n	800492e <UART_SetConfig+0x25a>
 8004916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800491a:	d811      	bhi.n	8004940 <UART_SetConfig+0x26c>
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <UART_SetConfig+0x254>
 8004920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004924:	d006      	beq.n	8004934 <UART_SetConfig+0x260>
 8004926:	e00b      	b.n	8004940 <UART_SetConfig+0x26c>
 8004928:	2301      	movs	r3, #1
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e075      	b.n	8004a1a <UART_SetConfig+0x346>
 800492e:	2302      	movs	r3, #2
 8004930:	77fb      	strb	r3, [r7, #31]
 8004932:	e072      	b.n	8004a1a <UART_SetConfig+0x346>
 8004934:	2304      	movs	r3, #4
 8004936:	77fb      	strb	r3, [r7, #31]
 8004938:	e06f      	b.n	8004a1a <UART_SetConfig+0x346>
 800493a:	2308      	movs	r3, #8
 800493c:	77fb      	strb	r3, [r7, #31]
 800493e:	e06c      	b.n	8004a1a <UART_SetConfig+0x346>
 8004940:	2310      	movs	r3, #16
 8004942:	77fb      	strb	r3, [r7, #31]
 8004944:	e069      	b.n	8004a1a <UART_SetConfig+0x346>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a1c      	ldr	r2, [pc, #112]	; (80049bc <UART_SetConfig+0x2e8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d137      	bne.n	80049c0 <UART_SetConfig+0x2ec>
 8004950:	4b14      	ldr	r3, [pc, #80]	; (80049a4 <UART_SetConfig+0x2d0>)
 8004952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004956:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800495a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800495e:	d017      	beq.n	8004990 <UART_SetConfig+0x2bc>
 8004960:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004964:	d817      	bhi.n	8004996 <UART_SetConfig+0x2c2>
 8004966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800496a:	d00b      	beq.n	8004984 <UART_SetConfig+0x2b0>
 800496c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004970:	d811      	bhi.n	8004996 <UART_SetConfig+0x2c2>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <UART_SetConfig+0x2aa>
 8004976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497a:	d006      	beq.n	800498a <UART_SetConfig+0x2b6>
 800497c:	e00b      	b.n	8004996 <UART_SetConfig+0x2c2>
 800497e:	2300      	movs	r3, #0
 8004980:	77fb      	strb	r3, [r7, #31]
 8004982:	e04a      	b.n	8004a1a <UART_SetConfig+0x346>
 8004984:	2302      	movs	r3, #2
 8004986:	77fb      	strb	r3, [r7, #31]
 8004988:	e047      	b.n	8004a1a <UART_SetConfig+0x346>
 800498a:	2304      	movs	r3, #4
 800498c:	77fb      	strb	r3, [r7, #31]
 800498e:	e044      	b.n	8004a1a <UART_SetConfig+0x346>
 8004990:	2308      	movs	r3, #8
 8004992:	77fb      	strb	r3, [r7, #31]
 8004994:	e041      	b.n	8004a1a <UART_SetConfig+0x346>
 8004996:	2310      	movs	r3, #16
 8004998:	77fb      	strb	r3, [r7, #31]
 800499a:	e03e      	b.n	8004a1a <UART_SetConfig+0x346>
 800499c:	efff69f3 	.word	0xefff69f3
 80049a0:	40011000 	.word	0x40011000
 80049a4:	40023800 	.word	0x40023800
 80049a8:	40004400 	.word	0x40004400
 80049ac:	40004800 	.word	0x40004800
 80049b0:	40004c00 	.word	0x40004c00
 80049b4:	40005000 	.word	0x40005000
 80049b8:	40011400 	.word	0x40011400
 80049bc:	40007800 	.word	0x40007800
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a71      	ldr	r2, [pc, #452]	; (8004b8c <UART_SetConfig+0x4b8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d125      	bne.n	8004a16 <UART_SetConfig+0x342>
 80049ca:	4b71      	ldr	r3, [pc, #452]	; (8004b90 <UART_SetConfig+0x4bc>)
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80049d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049d8:	d017      	beq.n	8004a0a <UART_SetConfig+0x336>
 80049da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049de:	d817      	bhi.n	8004a10 <UART_SetConfig+0x33c>
 80049e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e4:	d00b      	beq.n	80049fe <UART_SetConfig+0x32a>
 80049e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ea:	d811      	bhi.n	8004a10 <UART_SetConfig+0x33c>
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <UART_SetConfig+0x324>
 80049f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049f4:	d006      	beq.n	8004a04 <UART_SetConfig+0x330>
 80049f6:	e00b      	b.n	8004a10 <UART_SetConfig+0x33c>
 80049f8:	2300      	movs	r3, #0
 80049fa:	77fb      	strb	r3, [r7, #31]
 80049fc:	e00d      	b.n	8004a1a <UART_SetConfig+0x346>
 80049fe:	2302      	movs	r3, #2
 8004a00:	77fb      	strb	r3, [r7, #31]
 8004a02:	e00a      	b.n	8004a1a <UART_SetConfig+0x346>
 8004a04:	2304      	movs	r3, #4
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	e007      	b.n	8004a1a <UART_SetConfig+0x346>
 8004a0a:	2308      	movs	r3, #8
 8004a0c:	77fb      	strb	r3, [r7, #31]
 8004a0e:	e004      	b.n	8004a1a <UART_SetConfig+0x346>
 8004a10:	2310      	movs	r3, #16
 8004a12:	77fb      	strb	r3, [r7, #31]
 8004a14:	e001      	b.n	8004a1a <UART_SetConfig+0x346>
 8004a16:	2310      	movs	r3, #16
 8004a18:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a22:	d15a      	bne.n	8004ada <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004a24:	7ffb      	ldrb	r3, [r7, #31]
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	d827      	bhi.n	8004a7a <UART_SetConfig+0x3a6>
 8004a2a:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <UART_SetConfig+0x35c>)
 8004a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a30:	08004a55 	.word	0x08004a55
 8004a34:	08004a5d 	.word	0x08004a5d
 8004a38:	08004a65 	.word	0x08004a65
 8004a3c:	08004a7b 	.word	0x08004a7b
 8004a40:	08004a6b 	.word	0x08004a6b
 8004a44:	08004a7b 	.word	0x08004a7b
 8004a48:	08004a7b 	.word	0x08004a7b
 8004a4c:	08004a7b 	.word	0x08004a7b
 8004a50:	08004a73 	.word	0x08004a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a54:	f7fd fdc2 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8004a58:	61b8      	str	r0, [r7, #24]
        break;
 8004a5a:	e013      	b.n	8004a84 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a5c:	f7fd fdd2 	bl	8002604 <HAL_RCC_GetPCLK2Freq>
 8004a60:	61b8      	str	r0, [r7, #24]
        break;
 8004a62:	e00f      	b.n	8004a84 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a64:	4b4b      	ldr	r3, [pc, #300]	; (8004b94 <UART_SetConfig+0x4c0>)
 8004a66:	61bb      	str	r3, [r7, #24]
        break;
 8004a68:	e00c      	b.n	8004a84 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a6a:	f7fd fccb 	bl	8002404 <HAL_RCC_GetSysClockFreq>
 8004a6e:	61b8      	str	r0, [r7, #24]
        break;
 8004a70:	e008      	b.n	8004a84 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a76:	61bb      	str	r3, [r7, #24]
        break;
 8004a78:	e004      	b.n	8004a84 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	77bb      	strb	r3, [r7, #30]
        break;
 8004a82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d074      	beq.n	8004b74 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	005a      	lsls	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	085b      	lsrs	r3, r3, #1
 8004a94:	441a      	add	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2b0f      	cmp	r3, #15
 8004aa4:	d916      	bls.n	8004ad4 <UART_SetConfig+0x400>
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aac:	d212      	bcs.n	8004ad4 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f023 030f 	bic.w	r3, r3, #15
 8004ab6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	085b      	lsrs	r3, r3, #1
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	89fb      	ldrh	r3, [r7, #14]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	89fa      	ldrh	r2, [r7, #14]
 8004ad0:	60da      	str	r2, [r3, #12]
 8004ad2:	e04f      	b.n	8004b74 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	77bb      	strb	r3, [r7, #30]
 8004ad8:	e04c      	b.n	8004b74 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ada:	7ffb      	ldrb	r3, [r7, #31]
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d828      	bhi.n	8004b32 <UART_SetConfig+0x45e>
 8004ae0:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <UART_SetConfig+0x414>)
 8004ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae6:	bf00      	nop
 8004ae8:	08004b0d 	.word	0x08004b0d
 8004aec:	08004b15 	.word	0x08004b15
 8004af0:	08004b1d 	.word	0x08004b1d
 8004af4:	08004b33 	.word	0x08004b33
 8004af8:	08004b23 	.word	0x08004b23
 8004afc:	08004b33 	.word	0x08004b33
 8004b00:	08004b33 	.word	0x08004b33
 8004b04:	08004b33 	.word	0x08004b33
 8004b08:	08004b2b 	.word	0x08004b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b0c:	f7fd fd66 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8004b10:	61b8      	str	r0, [r7, #24]
        break;
 8004b12:	e013      	b.n	8004b3c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b14:	f7fd fd76 	bl	8002604 <HAL_RCC_GetPCLK2Freq>
 8004b18:	61b8      	str	r0, [r7, #24]
        break;
 8004b1a:	e00f      	b.n	8004b3c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b1c:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <UART_SetConfig+0x4c0>)
 8004b1e:	61bb      	str	r3, [r7, #24]
        break;
 8004b20:	e00c      	b.n	8004b3c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b22:	f7fd fc6f 	bl	8002404 <HAL_RCC_GetSysClockFreq>
 8004b26:	61b8      	str	r0, [r7, #24]
        break;
 8004b28:	e008      	b.n	8004b3c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2e:	61bb      	str	r3, [r7, #24]
        break;
 8004b30:	e004      	b.n	8004b3c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	77bb      	strb	r3, [r7, #30]
        break;
 8004b3a:	bf00      	nop
    }

    if (pclk != 0U)
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d018      	beq.n	8004b74 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	085a      	lsrs	r2, r3, #1
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	441a      	add	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	2b0f      	cmp	r3, #15
 8004b5a:	d909      	bls.n	8004b70 <UART_SetConfig+0x49c>
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b62:	d205      	bcs.n	8004b70 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	60da      	str	r2, [r3, #12]
 8004b6e:	e001      	b.n	8004b74 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b80:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3720      	adds	r7, #32
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40007c00 	.word	0x40007c00
 8004b90:	40023800 	.word	0x40023800
 8004b94:	00f42400 	.word	0x00f42400

08004b98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00a      	beq.n	8004bc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00a      	beq.n	8004c06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	f003 0310 	and.w	r3, r3, #16
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01a      	beq.n	8004cae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c96:	d10a      	bne.n	8004cae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	605a      	str	r2, [r3, #4]
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cec:	f7fc fc40 	bl	8001570 <HAL_GetTick>
 8004cf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d10e      	bne.n	8004d1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f82d 	bl	8004d6e <UART_WaitOnFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e023      	b.n	8004d66 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b04      	cmp	r3, #4
 8004d2a:	d10e      	bne.n	8004d4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f817 	bl	8004d6e <UART_WaitOnFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e00d      	b.n	8004d66 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b09c      	sub	sp, #112	; 0x70
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	603b      	str	r3, [r7, #0]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d7e:	e0a5      	b.n	8004ecc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d86:	f000 80a1 	beq.w	8004ecc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d8a:	f7fc fbf1 	bl	8001570 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d302      	bcc.n	8004da0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d13e      	bne.n	8004e1e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004db4:	667b      	str	r3, [r7, #100]	; 0x64
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dc0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004dc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e6      	bne.n	8004da0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3308      	adds	r3, #8
 8004dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	663b      	str	r3, [r7, #96]	; 0x60
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3308      	adds	r3, #8
 8004df0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004df2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004df4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004df8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e5      	bne.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e067      	b.n	8004eee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d04f      	beq.n	8004ecc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e3a:	d147      	bne.n	8004ecc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4e:	e853 3f00 	ldrex	r3, [r3]
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	461a      	mov	r2, r3
 8004e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34
 8004e66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e6c:	e841 2300 	strex	r3, r2, [r1]
 8004e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e6      	bne.n	8004e46 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3308      	adds	r3, #8
 8004e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	e853 3f00 	ldrex	r3, [r3]
 8004e86:	613b      	str	r3, [r7, #16]
   return(result);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f023 0301 	bic.w	r3, r3, #1
 8004e8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3308      	adds	r3, #8
 8004e96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e98:	623a      	str	r2, [r7, #32]
 8004e9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9c:	69f9      	ldr	r1, [r7, #28]
 8004e9e:	6a3a      	ldr	r2, [r7, #32]
 8004ea0:	e841 2300 	strex	r3, r2, [r1]
 8004ea4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e5      	bne.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e010      	b.n	8004eee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69da      	ldr	r2, [r3, #28]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	bf0c      	ite	eq
 8004edc:	2301      	moveq	r3, #1
 8004ede:	2300      	movne	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	f43f af4a 	beq.w	8004d80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3770      	adds	r7, #112	; 0x70
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <__errno>:
 8004ef8:	4b01      	ldr	r3, [pc, #4]	; (8004f00 <__errno+0x8>)
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	2000000c 	.word	0x2000000c

08004f04 <__libc_init_array>:
 8004f04:	b570      	push	{r4, r5, r6, lr}
 8004f06:	4d0d      	ldr	r5, [pc, #52]	; (8004f3c <__libc_init_array+0x38>)
 8004f08:	4c0d      	ldr	r4, [pc, #52]	; (8004f40 <__libc_init_array+0x3c>)
 8004f0a:	1b64      	subs	r4, r4, r5
 8004f0c:	10a4      	asrs	r4, r4, #2
 8004f0e:	2600      	movs	r6, #0
 8004f10:	42a6      	cmp	r6, r4
 8004f12:	d109      	bne.n	8004f28 <__libc_init_array+0x24>
 8004f14:	4d0b      	ldr	r5, [pc, #44]	; (8004f44 <__libc_init_array+0x40>)
 8004f16:	4c0c      	ldr	r4, [pc, #48]	; (8004f48 <__libc_init_array+0x44>)
 8004f18:	f002 fe26 	bl	8007b68 <_init>
 8004f1c:	1b64      	subs	r4, r4, r5
 8004f1e:	10a4      	asrs	r4, r4, #2
 8004f20:	2600      	movs	r6, #0
 8004f22:	42a6      	cmp	r6, r4
 8004f24:	d105      	bne.n	8004f32 <__libc_init_array+0x2e>
 8004f26:	bd70      	pop	{r4, r5, r6, pc}
 8004f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f2c:	4798      	blx	r3
 8004f2e:	3601      	adds	r6, #1
 8004f30:	e7ee      	b.n	8004f10 <__libc_init_array+0xc>
 8004f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f36:	4798      	blx	r3
 8004f38:	3601      	adds	r6, #1
 8004f3a:	e7f2      	b.n	8004f22 <__libc_init_array+0x1e>
 8004f3c:	08008004 	.word	0x08008004
 8004f40:	08008004 	.word	0x08008004
 8004f44:	08008004 	.word	0x08008004
 8004f48:	08008008 	.word	0x08008008

08004f4c <memset>:
 8004f4c:	4402      	add	r2, r0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d100      	bne.n	8004f56 <memset+0xa>
 8004f54:	4770      	bx	lr
 8004f56:	f803 1b01 	strb.w	r1, [r3], #1
 8004f5a:	e7f9      	b.n	8004f50 <memset+0x4>

08004f5c <__cvt>:
 8004f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f5e:	ed2d 8b02 	vpush	{d8}
 8004f62:	eeb0 8b40 	vmov.f64	d8, d0
 8004f66:	b085      	sub	sp, #20
 8004f68:	4617      	mov	r7, r2
 8004f6a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004f6c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004f6e:	ee18 2a90 	vmov	r2, s17
 8004f72:	f025 0520 	bic.w	r5, r5, #32
 8004f76:	2a00      	cmp	r2, #0
 8004f78:	bfb6      	itet	lt
 8004f7a:	222d      	movlt	r2, #45	; 0x2d
 8004f7c:	2200      	movge	r2, #0
 8004f7e:	eeb1 8b40 	vneglt.f64	d8, d0
 8004f82:	2d46      	cmp	r5, #70	; 0x46
 8004f84:	460c      	mov	r4, r1
 8004f86:	701a      	strb	r2, [r3, #0]
 8004f88:	d004      	beq.n	8004f94 <__cvt+0x38>
 8004f8a:	2d45      	cmp	r5, #69	; 0x45
 8004f8c:	d100      	bne.n	8004f90 <__cvt+0x34>
 8004f8e:	3401      	adds	r4, #1
 8004f90:	2102      	movs	r1, #2
 8004f92:	e000      	b.n	8004f96 <__cvt+0x3a>
 8004f94:	2103      	movs	r1, #3
 8004f96:	ab03      	add	r3, sp, #12
 8004f98:	9301      	str	r3, [sp, #4]
 8004f9a:	ab02      	add	r3, sp, #8
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	4622      	mov	r2, r4
 8004fa0:	4633      	mov	r3, r6
 8004fa2:	eeb0 0b48 	vmov.f64	d0, d8
 8004fa6:	f000 fccb 	bl	8005940 <_dtoa_r>
 8004faa:	2d47      	cmp	r5, #71	; 0x47
 8004fac:	d109      	bne.n	8004fc2 <__cvt+0x66>
 8004fae:	07fb      	lsls	r3, r7, #31
 8004fb0:	d407      	bmi.n	8004fc2 <__cvt+0x66>
 8004fb2:	9b03      	ldr	r3, [sp, #12]
 8004fb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fb6:	1a1b      	subs	r3, r3, r0
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	b005      	add	sp, #20
 8004fbc:	ecbd 8b02 	vpop	{d8}
 8004fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fc2:	2d46      	cmp	r5, #70	; 0x46
 8004fc4:	eb00 0204 	add.w	r2, r0, r4
 8004fc8:	d10c      	bne.n	8004fe4 <__cvt+0x88>
 8004fca:	7803      	ldrb	r3, [r0, #0]
 8004fcc:	2b30      	cmp	r3, #48	; 0x30
 8004fce:	d107      	bne.n	8004fe0 <__cvt+0x84>
 8004fd0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd8:	bf1c      	itt	ne
 8004fda:	f1c4 0401 	rsbne	r4, r4, #1
 8004fde:	6034      	strne	r4, [r6, #0]
 8004fe0:	6833      	ldr	r3, [r6, #0]
 8004fe2:	441a      	add	r2, r3
 8004fe4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fec:	bf08      	it	eq
 8004fee:	9203      	streq	r2, [sp, #12]
 8004ff0:	2130      	movs	r1, #48	; 0x30
 8004ff2:	9b03      	ldr	r3, [sp, #12]
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d2dc      	bcs.n	8004fb2 <__cvt+0x56>
 8004ff8:	1c5c      	adds	r4, r3, #1
 8004ffa:	9403      	str	r4, [sp, #12]
 8004ffc:	7019      	strb	r1, [r3, #0]
 8004ffe:	e7f8      	b.n	8004ff2 <__cvt+0x96>

08005000 <__exponent>:
 8005000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005002:	4603      	mov	r3, r0
 8005004:	2900      	cmp	r1, #0
 8005006:	bfb8      	it	lt
 8005008:	4249      	neglt	r1, r1
 800500a:	f803 2b02 	strb.w	r2, [r3], #2
 800500e:	bfb4      	ite	lt
 8005010:	222d      	movlt	r2, #45	; 0x2d
 8005012:	222b      	movge	r2, #43	; 0x2b
 8005014:	2909      	cmp	r1, #9
 8005016:	7042      	strb	r2, [r0, #1]
 8005018:	dd2a      	ble.n	8005070 <__exponent+0x70>
 800501a:	f10d 0407 	add.w	r4, sp, #7
 800501e:	46a4      	mov	ip, r4
 8005020:	270a      	movs	r7, #10
 8005022:	46a6      	mov	lr, r4
 8005024:	460a      	mov	r2, r1
 8005026:	fb91 f6f7 	sdiv	r6, r1, r7
 800502a:	fb07 1516 	mls	r5, r7, r6, r1
 800502e:	3530      	adds	r5, #48	; 0x30
 8005030:	2a63      	cmp	r2, #99	; 0x63
 8005032:	f104 34ff 	add.w	r4, r4, #4294967295
 8005036:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800503a:	4631      	mov	r1, r6
 800503c:	dcf1      	bgt.n	8005022 <__exponent+0x22>
 800503e:	3130      	adds	r1, #48	; 0x30
 8005040:	f1ae 0502 	sub.w	r5, lr, #2
 8005044:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005048:	1c44      	adds	r4, r0, #1
 800504a:	4629      	mov	r1, r5
 800504c:	4561      	cmp	r1, ip
 800504e:	d30a      	bcc.n	8005066 <__exponent+0x66>
 8005050:	f10d 0209 	add.w	r2, sp, #9
 8005054:	eba2 020e 	sub.w	r2, r2, lr
 8005058:	4565      	cmp	r5, ip
 800505a:	bf88      	it	hi
 800505c:	2200      	movhi	r2, #0
 800505e:	4413      	add	r3, r2
 8005060:	1a18      	subs	r0, r3, r0
 8005062:	b003      	add	sp, #12
 8005064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800506a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800506e:	e7ed      	b.n	800504c <__exponent+0x4c>
 8005070:	2330      	movs	r3, #48	; 0x30
 8005072:	3130      	adds	r1, #48	; 0x30
 8005074:	7083      	strb	r3, [r0, #2]
 8005076:	70c1      	strb	r1, [r0, #3]
 8005078:	1d03      	adds	r3, r0, #4
 800507a:	e7f1      	b.n	8005060 <__exponent+0x60>
 800507c:	0000      	movs	r0, r0
	...

08005080 <_printf_float>:
 8005080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005084:	b08b      	sub	sp, #44	; 0x2c
 8005086:	460c      	mov	r4, r1
 8005088:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800508c:	4616      	mov	r6, r2
 800508e:	461f      	mov	r7, r3
 8005090:	4605      	mov	r5, r0
 8005092:	f001 f9d7 	bl	8006444 <_localeconv_r>
 8005096:	f8d0 b000 	ldr.w	fp, [r0]
 800509a:	4658      	mov	r0, fp
 800509c:	f7fb f8d0 	bl	8000240 <strlen>
 80050a0:	2300      	movs	r3, #0
 80050a2:	9308      	str	r3, [sp, #32]
 80050a4:	f8d8 3000 	ldr.w	r3, [r8]
 80050a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80050ac:	6822      	ldr	r2, [r4, #0]
 80050ae:	3307      	adds	r3, #7
 80050b0:	f023 0307 	bic.w	r3, r3, #7
 80050b4:	f103 0108 	add.w	r1, r3, #8
 80050b8:	f8c8 1000 	str.w	r1, [r8]
 80050bc:	4682      	mov	sl, r0
 80050be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80050c6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8005328 <_printf_float+0x2a8>
 80050ca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80050ce:	eeb0 6bc0 	vabs.f64	d6, d0
 80050d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80050d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050da:	dd24      	ble.n	8005126 <_printf_float+0xa6>
 80050dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80050e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e4:	d502      	bpl.n	80050ec <_printf_float+0x6c>
 80050e6:	232d      	movs	r3, #45	; 0x2d
 80050e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050ec:	4b90      	ldr	r3, [pc, #576]	; (8005330 <_printf_float+0x2b0>)
 80050ee:	4891      	ldr	r0, [pc, #580]	; (8005334 <_printf_float+0x2b4>)
 80050f0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80050f4:	bf94      	ite	ls
 80050f6:	4698      	movls	r8, r3
 80050f8:	4680      	movhi	r8, r0
 80050fa:	2303      	movs	r3, #3
 80050fc:	6123      	str	r3, [r4, #16]
 80050fe:	f022 0204 	bic.w	r2, r2, #4
 8005102:	2300      	movs	r3, #0
 8005104:	6022      	str	r2, [r4, #0]
 8005106:	9304      	str	r3, [sp, #16]
 8005108:	9700      	str	r7, [sp, #0]
 800510a:	4633      	mov	r3, r6
 800510c:	aa09      	add	r2, sp, #36	; 0x24
 800510e:	4621      	mov	r1, r4
 8005110:	4628      	mov	r0, r5
 8005112:	f000 f9d3 	bl	80054bc <_printf_common>
 8005116:	3001      	adds	r0, #1
 8005118:	f040 808a 	bne.w	8005230 <_printf_float+0x1b0>
 800511c:	f04f 30ff 	mov.w	r0, #4294967295
 8005120:	b00b      	add	sp, #44	; 0x2c
 8005122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005126:	eeb4 0b40 	vcmp.f64	d0, d0
 800512a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800512e:	d709      	bvc.n	8005144 <_printf_float+0xc4>
 8005130:	ee10 3a90 	vmov	r3, s1
 8005134:	2b00      	cmp	r3, #0
 8005136:	bfbc      	itt	lt
 8005138:	232d      	movlt	r3, #45	; 0x2d
 800513a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800513e:	487e      	ldr	r0, [pc, #504]	; (8005338 <_printf_float+0x2b8>)
 8005140:	4b7e      	ldr	r3, [pc, #504]	; (800533c <_printf_float+0x2bc>)
 8005142:	e7d5      	b.n	80050f0 <_printf_float+0x70>
 8005144:	6863      	ldr	r3, [r4, #4]
 8005146:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800514a:	9104      	str	r1, [sp, #16]
 800514c:	1c59      	adds	r1, r3, #1
 800514e:	d13c      	bne.n	80051ca <_printf_float+0x14a>
 8005150:	2306      	movs	r3, #6
 8005152:	6063      	str	r3, [r4, #4]
 8005154:	2300      	movs	r3, #0
 8005156:	9303      	str	r3, [sp, #12]
 8005158:	ab08      	add	r3, sp, #32
 800515a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800515e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005162:	ab07      	add	r3, sp, #28
 8005164:	6861      	ldr	r1, [r4, #4]
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	6022      	str	r2, [r4, #0]
 800516a:	f10d 031b 	add.w	r3, sp, #27
 800516e:	4628      	mov	r0, r5
 8005170:	f7ff fef4 	bl	8004f5c <__cvt>
 8005174:	9b04      	ldr	r3, [sp, #16]
 8005176:	9907      	ldr	r1, [sp, #28]
 8005178:	2b47      	cmp	r3, #71	; 0x47
 800517a:	4680      	mov	r8, r0
 800517c:	d108      	bne.n	8005190 <_printf_float+0x110>
 800517e:	1cc8      	adds	r0, r1, #3
 8005180:	db02      	blt.n	8005188 <_printf_float+0x108>
 8005182:	6863      	ldr	r3, [r4, #4]
 8005184:	4299      	cmp	r1, r3
 8005186:	dd41      	ble.n	800520c <_printf_float+0x18c>
 8005188:	f1a9 0902 	sub.w	r9, r9, #2
 800518c:	fa5f f989 	uxtb.w	r9, r9
 8005190:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005194:	d820      	bhi.n	80051d8 <_printf_float+0x158>
 8005196:	3901      	subs	r1, #1
 8005198:	464a      	mov	r2, r9
 800519a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800519e:	9107      	str	r1, [sp, #28]
 80051a0:	f7ff ff2e 	bl	8005000 <__exponent>
 80051a4:	9a08      	ldr	r2, [sp, #32]
 80051a6:	9004      	str	r0, [sp, #16]
 80051a8:	1813      	adds	r3, r2, r0
 80051aa:	2a01      	cmp	r2, #1
 80051ac:	6123      	str	r3, [r4, #16]
 80051ae:	dc02      	bgt.n	80051b6 <_printf_float+0x136>
 80051b0:	6822      	ldr	r2, [r4, #0]
 80051b2:	07d2      	lsls	r2, r2, #31
 80051b4:	d501      	bpl.n	80051ba <_printf_float+0x13a>
 80051b6:	3301      	adds	r3, #1
 80051b8:	6123      	str	r3, [r4, #16]
 80051ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0a2      	beq.n	8005108 <_printf_float+0x88>
 80051c2:	232d      	movs	r3, #45	; 0x2d
 80051c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051c8:	e79e      	b.n	8005108 <_printf_float+0x88>
 80051ca:	9904      	ldr	r1, [sp, #16]
 80051cc:	2947      	cmp	r1, #71	; 0x47
 80051ce:	d1c1      	bne.n	8005154 <_printf_float+0xd4>
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1bf      	bne.n	8005154 <_printf_float+0xd4>
 80051d4:	2301      	movs	r3, #1
 80051d6:	e7bc      	b.n	8005152 <_printf_float+0xd2>
 80051d8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80051dc:	d118      	bne.n	8005210 <_printf_float+0x190>
 80051de:	2900      	cmp	r1, #0
 80051e0:	6863      	ldr	r3, [r4, #4]
 80051e2:	dd0b      	ble.n	80051fc <_printf_float+0x17c>
 80051e4:	6121      	str	r1, [r4, #16]
 80051e6:	b913      	cbnz	r3, 80051ee <_printf_float+0x16e>
 80051e8:	6822      	ldr	r2, [r4, #0]
 80051ea:	07d0      	lsls	r0, r2, #31
 80051ec:	d502      	bpl.n	80051f4 <_printf_float+0x174>
 80051ee:	3301      	adds	r3, #1
 80051f0:	440b      	add	r3, r1
 80051f2:	6123      	str	r3, [r4, #16]
 80051f4:	2300      	movs	r3, #0
 80051f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80051f8:	9304      	str	r3, [sp, #16]
 80051fa:	e7de      	b.n	80051ba <_printf_float+0x13a>
 80051fc:	b913      	cbnz	r3, 8005204 <_printf_float+0x184>
 80051fe:	6822      	ldr	r2, [r4, #0]
 8005200:	07d2      	lsls	r2, r2, #31
 8005202:	d501      	bpl.n	8005208 <_printf_float+0x188>
 8005204:	3302      	adds	r3, #2
 8005206:	e7f4      	b.n	80051f2 <_printf_float+0x172>
 8005208:	2301      	movs	r3, #1
 800520a:	e7f2      	b.n	80051f2 <_printf_float+0x172>
 800520c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005210:	9b08      	ldr	r3, [sp, #32]
 8005212:	4299      	cmp	r1, r3
 8005214:	db05      	blt.n	8005222 <_printf_float+0x1a2>
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	6121      	str	r1, [r4, #16]
 800521a:	07d8      	lsls	r0, r3, #31
 800521c:	d5ea      	bpl.n	80051f4 <_printf_float+0x174>
 800521e:	1c4b      	adds	r3, r1, #1
 8005220:	e7e7      	b.n	80051f2 <_printf_float+0x172>
 8005222:	2900      	cmp	r1, #0
 8005224:	bfd4      	ite	le
 8005226:	f1c1 0202 	rsble	r2, r1, #2
 800522a:	2201      	movgt	r2, #1
 800522c:	4413      	add	r3, r2
 800522e:	e7e0      	b.n	80051f2 <_printf_float+0x172>
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	055a      	lsls	r2, r3, #21
 8005234:	d407      	bmi.n	8005246 <_printf_float+0x1c6>
 8005236:	6923      	ldr	r3, [r4, #16]
 8005238:	4642      	mov	r2, r8
 800523a:	4631      	mov	r1, r6
 800523c:	4628      	mov	r0, r5
 800523e:	47b8      	blx	r7
 8005240:	3001      	adds	r0, #1
 8005242:	d12a      	bne.n	800529a <_printf_float+0x21a>
 8005244:	e76a      	b.n	800511c <_printf_float+0x9c>
 8005246:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800524a:	f240 80e2 	bls.w	8005412 <_printf_float+0x392>
 800524e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005252:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800525a:	d133      	bne.n	80052c4 <_printf_float+0x244>
 800525c:	4a38      	ldr	r2, [pc, #224]	; (8005340 <_printf_float+0x2c0>)
 800525e:	2301      	movs	r3, #1
 8005260:	4631      	mov	r1, r6
 8005262:	4628      	mov	r0, r5
 8005264:	47b8      	blx	r7
 8005266:	3001      	adds	r0, #1
 8005268:	f43f af58 	beq.w	800511c <_printf_float+0x9c>
 800526c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005270:	429a      	cmp	r2, r3
 8005272:	db02      	blt.n	800527a <_printf_float+0x1fa>
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	07d8      	lsls	r0, r3, #31
 8005278:	d50f      	bpl.n	800529a <_printf_float+0x21a>
 800527a:	4653      	mov	r3, sl
 800527c:	465a      	mov	r2, fp
 800527e:	4631      	mov	r1, r6
 8005280:	4628      	mov	r0, r5
 8005282:	47b8      	blx	r7
 8005284:	3001      	adds	r0, #1
 8005286:	f43f af49 	beq.w	800511c <_printf_float+0x9c>
 800528a:	f04f 0800 	mov.w	r8, #0
 800528e:	f104 091a 	add.w	r9, r4, #26
 8005292:	9b08      	ldr	r3, [sp, #32]
 8005294:	3b01      	subs	r3, #1
 8005296:	4543      	cmp	r3, r8
 8005298:	dc09      	bgt.n	80052ae <_printf_float+0x22e>
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	079b      	lsls	r3, r3, #30
 800529e:	f100 8108 	bmi.w	80054b2 <_printf_float+0x432>
 80052a2:	68e0      	ldr	r0, [r4, #12]
 80052a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a6:	4298      	cmp	r0, r3
 80052a8:	bfb8      	it	lt
 80052aa:	4618      	movlt	r0, r3
 80052ac:	e738      	b.n	8005120 <_printf_float+0xa0>
 80052ae:	2301      	movs	r3, #1
 80052b0:	464a      	mov	r2, r9
 80052b2:	4631      	mov	r1, r6
 80052b4:	4628      	mov	r0, r5
 80052b6:	47b8      	blx	r7
 80052b8:	3001      	adds	r0, #1
 80052ba:	f43f af2f 	beq.w	800511c <_printf_float+0x9c>
 80052be:	f108 0801 	add.w	r8, r8, #1
 80052c2:	e7e6      	b.n	8005292 <_printf_float+0x212>
 80052c4:	9b07      	ldr	r3, [sp, #28]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	dc3c      	bgt.n	8005344 <_printf_float+0x2c4>
 80052ca:	4a1d      	ldr	r2, [pc, #116]	; (8005340 <_printf_float+0x2c0>)
 80052cc:	2301      	movs	r3, #1
 80052ce:	4631      	mov	r1, r6
 80052d0:	4628      	mov	r0, r5
 80052d2:	47b8      	blx	r7
 80052d4:	3001      	adds	r0, #1
 80052d6:	f43f af21 	beq.w	800511c <_printf_float+0x9c>
 80052da:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80052de:	4313      	orrs	r3, r2
 80052e0:	d102      	bne.n	80052e8 <_printf_float+0x268>
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	07d9      	lsls	r1, r3, #31
 80052e6:	d5d8      	bpl.n	800529a <_printf_float+0x21a>
 80052e8:	4653      	mov	r3, sl
 80052ea:	465a      	mov	r2, fp
 80052ec:	4631      	mov	r1, r6
 80052ee:	4628      	mov	r0, r5
 80052f0:	47b8      	blx	r7
 80052f2:	3001      	adds	r0, #1
 80052f4:	f43f af12 	beq.w	800511c <_printf_float+0x9c>
 80052f8:	f04f 0900 	mov.w	r9, #0
 80052fc:	f104 0a1a 	add.w	sl, r4, #26
 8005300:	9b07      	ldr	r3, [sp, #28]
 8005302:	425b      	negs	r3, r3
 8005304:	454b      	cmp	r3, r9
 8005306:	dc01      	bgt.n	800530c <_printf_float+0x28c>
 8005308:	9b08      	ldr	r3, [sp, #32]
 800530a:	e795      	b.n	8005238 <_printf_float+0x1b8>
 800530c:	2301      	movs	r3, #1
 800530e:	4652      	mov	r2, sl
 8005310:	4631      	mov	r1, r6
 8005312:	4628      	mov	r0, r5
 8005314:	47b8      	blx	r7
 8005316:	3001      	adds	r0, #1
 8005318:	f43f af00 	beq.w	800511c <_printf_float+0x9c>
 800531c:	f109 0901 	add.w	r9, r9, #1
 8005320:	e7ee      	b.n	8005300 <_printf_float+0x280>
 8005322:	bf00      	nop
 8005324:	f3af 8000 	nop.w
 8005328:	ffffffff 	.word	0xffffffff
 800532c:	7fefffff 	.word	0x7fefffff
 8005330:	08007c1c 	.word	0x08007c1c
 8005334:	08007c20 	.word	0x08007c20
 8005338:	08007c28 	.word	0x08007c28
 800533c:	08007c24 	.word	0x08007c24
 8005340:	08007c2c 	.word	0x08007c2c
 8005344:	9a08      	ldr	r2, [sp, #32]
 8005346:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005348:	429a      	cmp	r2, r3
 800534a:	bfa8      	it	ge
 800534c:	461a      	movge	r2, r3
 800534e:	2a00      	cmp	r2, #0
 8005350:	4691      	mov	r9, r2
 8005352:	dc38      	bgt.n	80053c6 <_printf_float+0x346>
 8005354:	2300      	movs	r3, #0
 8005356:	9305      	str	r3, [sp, #20]
 8005358:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800535c:	f104 021a 	add.w	r2, r4, #26
 8005360:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005362:	9905      	ldr	r1, [sp, #20]
 8005364:	9304      	str	r3, [sp, #16]
 8005366:	eba3 0309 	sub.w	r3, r3, r9
 800536a:	428b      	cmp	r3, r1
 800536c:	dc33      	bgt.n	80053d6 <_printf_float+0x356>
 800536e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005372:	429a      	cmp	r2, r3
 8005374:	db3c      	blt.n	80053f0 <_printf_float+0x370>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	07da      	lsls	r2, r3, #31
 800537a:	d439      	bmi.n	80053f0 <_printf_float+0x370>
 800537c:	9a08      	ldr	r2, [sp, #32]
 800537e:	9b04      	ldr	r3, [sp, #16]
 8005380:	9907      	ldr	r1, [sp, #28]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	eba2 0901 	sub.w	r9, r2, r1
 8005388:	4599      	cmp	r9, r3
 800538a:	bfa8      	it	ge
 800538c:	4699      	movge	r9, r3
 800538e:	f1b9 0f00 	cmp.w	r9, #0
 8005392:	dc35      	bgt.n	8005400 <_printf_float+0x380>
 8005394:	f04f 0800 	mov.w	r8, #0
 8005398:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800539c:	f104 0a1a 	add.w	sl, r4, #26
 80053a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80053a4:	1a9b      	subs	r3, r3, r2
 80053a6:	eba3 0309 	sub.w	r3, r3, r9
 80053aa:	4543      	cmp	r3, r8
 80053ac:	f77f af75 	ble.w	800529a <_printf_float+0x21a>
 80053b0:	2301      	movs	r3, #1
 80053b2:	4652      	mov	r2, sl
 80053b4:	4631      	mov	r1, r6
 80053b6:	4628      	mov	r0, r5
 80053b8:	47b8      	blx	r7
 80053ba:	3001      	adds	r0, #1
 80053bc:	f43f aeae 	beq.w	800511c <_printf_float+0x9c>
 80053c0:	f108 0801 	add.w	r8, r8, #1
 80053c4:	e7ec      	b.n	80053a0 <_printf_float+0x320>
 80053c6:	4613      	mov	r3, r2
 80053c8:	4631      	mov	r1, r6
 80053ca:	4642      	mov	r2, r8
 80053cc:	4628      	mov	r0, r5
 80053ce:	47b8      	blx	r7
 80053d0:	3001      	adds	r0, #1
 80053d2:	d1bf      	bne.n	8005354 <_printf_float+0x2d4>
 80053d4:	e6a2      	b.n	800511c <_printf_float+0x9c>
 80053d6:	2301      	movs	r3, #1
 80053d8:	4631      	mov	r1, r6
 80053da:	4628      	mov	r0, r5
 80053dc:	9204      	str	r2, [sp, #16]
 80053de:	47b8      	blx	r7
 80053e0:	3001      	adds	r0, #1
 80053e2:	f43f ae9b 	beq.w	800511c <_printf_float+0x9c>
 80053e6:	9b05      	ldr	r3, [sp, #20]
 80053e8:	9a04      	ldr	r2, [sp, #16]
 80053ea:	3301      	adds	r3, #1
 80053ec:	9305      	str	r3, [sp, #20]
 80053ee:	e7b7      	b.n	8005360 <_printf_float+0x2e0>
 80053f0:	4653      	mov	r3, sl
 80053f2:	465a      	mov	r2, fp
 80053f4:	4631      	mov	r1, r6
 80053f6:	4628      	mov	r0, r5
 80053f8:	47b8      	blx	r7
 80053fa:	3001      	adds	r0, #1
 80053fc:	d1be      	bne.n	800537c <_printf_float+0x2fc>
 80053fe:	e68d      	b.n	800511c <_printf_float+0x9c>
 8005400:	9a04      	ldr	r2, [sp, #16]
 8005402:	464b      	mov	r3, r9
 8005404:	4442      	add	r2, r8
 8005406:	4631      	mov	r1, r6
 8005408:	4628      	mov	r0, r5
 800540a:	47b8      	blx	r7
 800540c:	3001      	adds	r0, #1
 800540e:	d1c1      	bne.n	8005394 <_printf_float+0x314>
 8005410:	e684      	b.n	800511c <_printf_float+0x9c>
 8005412:	9a08      	ldr	r2, [sp, #32]
 8005414:	2a01      	cmp	r2, #1
 8005416:	dc01      	bgt.n	800541c <_printf_float+0x39c>
 8005418:	07db      	lsls	r3, r3, #31
 800541a:	d537      	bpl.n	800548c <_printf_float+0x40c>
 800541c:	2301      	movs	r3, #1
 800541e:	4642      	mov	r2, r8
 8005420:	4631      	mov	r1, r6
 8005422:	4628      	mov	r0, r5
 8005424:	47b8      	blx	r7
 8005426:	3001      	adds	r0, #1
 8005428:	f43f ae78 	beq.w	800511c <_printf_float+0x9c>
 800542c:	4653      	mov	r3, sl
 800542e:	465a      	mov	r2, fp
 8005430:	4631      	mov	r1, r6
 8005432:	4628      	mov	r0, r5
 8005434:	47b8      	blx	r7
 8005436:	3001      	adds	r0, #1
 8005438:	f43f ae70 	beq.w	800511c <_printf_float+0x9c>
 800543c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005440:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005448:	d01b      	beq.n	8005482 <_printf_float+0x402>
 800544a:	9b08      	ldr	r3, [sp, #32]
 800544c:	f108 0201 	add.w	r2, r8, #1
 8005450:	3b01      	subs	r3, #1
 8005452:	4631      	mov	r1, r6
 8005454:	4628      	mov	r0, r5
 8005456:	47b8      	blx	r7
 8005458:	3001      	adds	r0, #1
 800545a:	d10e      	bne.n	800547a <_printf_float+0x3fa>
 800545c:	e65e      	b.n	800511c <_printf_float+0x9c>
 800545e:	2301      	movs	r3, #1
 8005460:	464a      	mov	r2, r9
 8005462:	4631      	mov	r1, r6
 8005464:	4628      	mov	r0, r5
 8005466:	47b8      	blx	r7
 8005468:	3001      	adds	r0, #1
 800546a:	f43f ae57 	beq.w	800511c <_printf_float+0x9c>
 800546e:	f108 0801 	add.w	r8, r8, #1
 8005472:	9b08      	ldr	r3, [sp, #32]
 8005474:	3b01      	subs	r3, #1
 8005476:	4543      	cmp	r3, r8
 8005478:	dcf1      	bgt.n	800545e <_printf_float+0x3de>
 800547a:	9b04      	ldr	r3, [sp, #16]
 800547c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005480:	e6db      	b.n	800523a <_printf_float+0x1ba>
 8005482:	f04f 0800 	mov.w	r8, #0
 8005486:	f104 091a 	add.w	r9, r4, #26
 800548a:	e7f2      	b.n	8005472 <_printf_float+0x3f2>
 800548c:	2301      	movs	r3, #1
 800548e:	4642      	mov	r2, r8
 8005490:	e7df      	b.n	8005452 <_printf_float+0x3d2>
 8005492:	2301      	movs	r3, #1
 8005494:	464a      	mov	r2, r9
 8005496:	4631      	mov	r1, r6
 8005498:	4628      	mov	r0, r5
 800549a:	47b8      	blx	r7
 800549c:	3001      	adds	r0, #1
 800549e:	f43f ae3d 	beq.w	800511c <_printf_float+0x9c>
 80054a2:	f108 0801 	add.w	r8, r8, #1
 80054a6:	68e3      	ldr	r3, [r4, #12]
 80054a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054aa:	1a5b      	subs	r3, r3, r1
 80054ac:	4543      	cmp	r3, r8
 80054ae:	dcf0      	bgt.n	8005492 <_printf_float+0x412>
 80054b0:	e6f7      	b.n	80052a2 <_printf_float+0x222>
 80054b2:	f04f 0800 	mov.w	r8, #0
 80054b6:	f104 0919 	add.w	r9, r4, #25
 80054ba:	e7f4      	b.n	80054a6 <_printf_float+0x426>

080054bc <_printf_common>:
 80054bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c0:	4616      	mov	r6, r2
 80054c2:	4699      	mov	r9, r3
 80054c4:	688a      	ldr	r2, [r1, #8]
 80054c6:	690b      	ldr	r3, [r1, #16]
 80054c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054cc:	4293      	cmp	r3, r2
 80054ce:	bfb8      	it	lt
 80054d0:	4613      	movlt	r3, r2
 80054d2:	6033      	str	r3, [r6, #0]
 80054d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054d8:	4607      	mov	r7, r0
 80054da:	460c      	mov	r4, r1
 80054dc:	b10a      	cbz	r2, 80054e2 <_printf_common+0x26>
 80054de:	3301      	adds	r3, #1
 80054e0:	6033      	str	r3, [r6, #0]
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	0699      	lsls	r1, r3, #26
 80054e6:	bf42      	ittt	mi
 80054e8:	6833      	ldrmi	r3, [r6, #0]
 80054ea:	3302      	addmi	r3, #2
 80054ec:	6033      	strmi	r3, [r6, #0]
 80054ee:	6825      	ldr	r5, [r4, #0]
 80054f0:	f015 0506 	ands.w	r5, r5, #6
 80054f4:	d106      	bne.n	8005504 <_printf_common+0x48>
 80054f6:	f104 0a19 	add.w	sl, r4, #25
 80054fa:	68e3      	ldr	r3, [r4, #12]
 80054fc:	6832      	ldr	r2, [r6, #0]
 80054fe:	1a9b      	subs	r3, r3, r2
 8005500:	42ab      	cmp	r3, r5
 8005502:	dc26      	bgt.n	8005552 <_printf_common+0x96>
 8005504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005508:	1e13      	subs	r3, r2, #0
 800550a:	6822      	ldr	r2, [r4, #0]
 800550c:	bf18      	it	ne
 800550e:	2301      	movne	r3, #1
 8005510:	0692      	lsls	r2, r2, #26
 8005512:	d42b      	bmi.n	800556c <_printf_common+0xb0>
 8005514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005518:	4649      	mov	r1, r9
 800551a:	4638      	mov	r0, r7
 800551c:	47c0      	blx	r8
 800551e:	3001      	adds	r0, #1
 8005520:	d01e      	beq.n	8005560 <_printf_common+0xa4>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	68e5      	ldr	r5, [r4, #12]
 8005526:	6832      	ldr	r2, [r6, #0]
 8005528:	f003 0306 	and.w	r3, r3, #6
 800552c:	2b04      	cmp	r3, #4
 800552e:	bf08      	it	eq
 8005530:	1aad      	subeq	r5, r5, r2
 8005532:	68a3      	ldr	r3, [r4, #8]
 8005534:	6922      	ldr	r2, [r4, #16]
 8005536:	bf0c      	ite	eq
 8005538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800553c:	2500      	movne	r5, #0
 800553e:	4293      	cmp	r3, r2
 8005540:	bfc4      	itt	gt
 8005542:	1a9b      	subgt	r3, r3, r2
 8005544:	18ed      	addgt	r5, r5, r3
 8005546:	2600      	movs	r6, #0
 8005548:	341a      	adds	r4, #26
 800554a:	42b5      	cmp	r5, r6
 800554c:	d11a      	bne.n	8005584 <_printf_common+0xc8>
 800554e:	2000      	movs	r0, #0
 8005550:	e008      	b.n	8005564 <_printf_common+0xa8>
 8005552:	2301      	movs	r3, #1
 8005554:	4652      	mov	r2, sl
 8005556:	4649      	mov	r1, r9
 8005558:	4638      	mov	r0, r7
 800555a:	47c0      	blx	r8
 800555c:	3001      	adds	r0, #1
 800555e:	d103      	bne.n	8005568 <_printf_common+0xac>
 8005560:	f04f 30ff 	mov.w	r0, #4294967295
 8005564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005568:	3501      	adds	r5, #1
 800556a:	e7c6      	b.n	80054fa <_printf_common+0x3e>
 800556c:	18e1      	adds	r1, r4, r3
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	2030      	movs	r0, #48	; 0x30
 8005572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005576:	4422      	add	r2, r4
 8005578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800557c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005580:	3302      	adds	r3, #2
 8005582:	e7c7      	b.n	8005514 <_printf_common+0x58>
 8005584:	2301      	movs	r3, #1
 8005586:	4622      	mov	r2, r4
 8005588:	4649      	mov	r1, r9
 800558a:	4638      	mov	r0, r7
 800558c:	47c0      	blx	r8
 800558e:	3001      	adds	r0, #1
 8005590:	d0e6      	beq.n	8005560 <_printf_common+0xa4>
 8005592:	3601      	adds	r6, #1
 8005594:	e7d9      	b.n	800554a <_printf_common+0x8e>
	...

08005598 <_printf_i>:
 8005598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800559c:	460c      	mov	r4, r1
 800559e:	4691      	mov	r9, r2
 80055a0:	7e27      	ldrb	r7, [r4, #24]
 80055a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80055a4:	2f78      	cmp	r7, #120	; 0x78
 80055a6:	4680      	mov	r8, r0
 80055a8:	469a      	mov	sl, r3
 80055aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055ae:	d807      	bhi.n	80055c0 <_printf_i+0x28>
 80055b0:	2f62      	cmp	r7, #98	; 0x62
 80055b2:	d80a      	bhi.n	80055ca <_printf_i+0x32>
 80055b4:	2f00      	cmp	r7, #0
 80055b6:	f000 80d8 	beq.w	800576a <_printf_i+0x1d2>
 80055ba:	2f58      	cmp	r7, #88	; 0x58
 80055bc:	f000 80a3 	beq.w	8005706 <_printf_i+0x16e>
 80055c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055c8:	e03a      	b.n	8005640 <_printf_i+0xa8>
 80055ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055ce:	2b15      	cmp	r3, #21
 80055d0:	d8f6      	bhi.n	80055c0 <_printf_i+0x28>
 80055d2:	a001      	add	r0, pc, #4	; (adr r0, 80055d8 <_printf_i+0x40>)
 80055d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80055d8:	08005631 	.word	0x08005631
 80055dc:	08005645 	.word	0x08005645
 80055e0:	080055c1 	.word	0x080055c1
 80055e4:	080055c1 	.word	0x080055c1
 80055e8:	080055c1 	.word	0x080055c1
 80055ec:	080055c1 	.word	0x080055c1
 80055f0:	08005645 	.word	0x08005645
 80055f4:	080055c1 	.word	0x080055c1
 80055f8:	080055c1 	.word	0x080055c1
 80055fc:	080055c1 	.word	0x080055c1
 8005600:	080055c1 	.word	0x080055c1
 8005604:	08005751 	.word	0x08005751
 8005608:	08005675 	.word	0x08005675
 800560c:	08005733 	.word	0x08005733
 8005610:	080055c1 	.word	0x080055c1
 8005614:	080055c1 	.word	0x080055c1
 8005618:	08005773 	.word	0x08005773
 800561c:	080055c1 	.word	0x080055c1
 8005620:	08005675 	.word	0x08005675
 8005624:	080055c1 	.word	0x080055c1
 8005628:	080055c1 	.word	0x080055c1
 800562c:	0800573b 	.word	0x0800573b
 8005630:	680b      	ldr	r3, [r1, #0]
 8005632:	1d1a      	adds	r2, r3, #4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	600a      	str	r2, [r1, #0]
 8005638:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800563c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005640:	2301      	movs	r3, #1
 8005642:	e0a3      	b.n	800578c <_printf_i+0x1f4>
 8005644:	6825      	ldr	r5, [r4, #0]
 8005646:	6808      	ldr	r0, [r1, #0]
 8005648:	062e      	lsls	r6, r5, #24
 800564a:	f100 0304 	add.w	r3, r0, #4
 800564e:	d50a      	bpl.n	8005666 <_printf_i+0xce>
 8005650:	6805      	ldr	r5, [r0, #0]
 8005652:	600b      	str	r3, [r1, #0]
 8005654:	2d00      	cmp	r5, #0
 8005656:	da03      	bge.n	8005660 <_printf_i+0xc8>
 8005658:	232d      	movs	r3, #45	; 0x2d
 800565a:	426d      	negs	r5, r5
 800565c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005660:	485e      	ldr	r0, [pc, #376]	; (80057dc <_printf_i+0x244>)
 8005662:	230a      	movs	r3, #10
 8005664:	e019      	b.n	800569a <_printf_i+0x102>
 8005666:	f015 0f40 	tst.w	r5, #64	; 0x40
 800566a:	6805      	ldr	r5, [r0, #0]
 800566c:	600b      	str	r3, [r1, #0]
 800566e:	bf18      	it	ne
 8005670:	b22d      	sxthne	r5, r5
 8005672:	e7ef      	b.n	8005654 <_printf_i+0xbc>
 8005674:	680b      	ldr	r3, [r1, #0]
 8005676:	6825      	ldr	r5, [r4, #0]
 8005678:	1d18      	adds	r0, r3, #4
 800567a:	6008      	str	r0, [r1, #0]
 800567c:	0628      	lsls	r0, r5, #24
 800567e:	d501      	bpl.n	8005684 <_printf_i+0xec>
 8005680:	681d      	ldr	r5, [r3, #0]
 8005682:	e002      	b.n	800568a <_printf_i+0xf2>
 8005684:	0669      	lsls	r1, r5, #25
 8005686:	d5fb      	bpl.n	8005680 <_printf_i+0xe8>
 8005688:	881d      	ldrh	r5, [r3, #0]
 800568a:	4854      	ldr	r0, [pc, #336]	; (80057dc <_printf_i+0x244>)
 800568c:	2f6f      	cmp	r7, #111	; 0x6f
 800568e:	bf0c      	ite	eq
 8005690:	2308      	moveq	r3, #8
 8005692:	230a      	movne	r3, #10
 8005694:	2100      	movs	r1, #0
 8005696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800569a:	6866      	ldr	r6, [r4, #4]
 800569c:	60a6      	str	r6, [r4, #8]
 800569e:	2e00      	cmp	r6, #0
 80056a0:	bfa2      	ittt	ge
 80056a2:	6821      	ldrge	r1, [r4, #0]
 80056a4:	f021 0104 	bicge.w	r1, r1, #4
 80056a8:	6021      	strge	r1, [r4, #0]
 80056aa:	b90d      	cbnz	r5, 80056b0 <_printf_i+0x118>
 80056ac:	2e00      	cmp	r6, #0
 80056ae:	d04d      	beq.n	800574c <_printf_i+0x1b4>
 80056b0:	4616      	mov	r6, r2
 80056b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80056b6:	fb03 5711 	mls	r7, r3, r1, r5
 80056ba:	5dc7      	ldrb	r7, [r0, r7]
 80056bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056c0:	462f      	mov	r7, r5
 80056c2:	42bb      	cmp	r3, r7
 80056c4:	460d      	mov	r5, r1
 80056c6:	d9f4      	bls.n	80056b2 <_printf_i+0x11a>
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d10b      	bne.n	80056e4 <_printf_i+0x14c>
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	07df      	lsls	r7, r3, #31
 80056d0:	d508      	bpl.n	80056e4 <_printf_i+0x14c>
 80056d2:	6923      	ldr	r3, [r4, #16]
 80056d4:	6861      	ldr	r1, [r4, #4]
 80056d6:	4299      	cmp	r1, r3
 80056d8:	bfde      	ittt	le
 80056da:	2330      	movle	r3, #48	; 0x30
 80056dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056e4:	1b92      	subs	r2, r2, r6
 80056e6:	6122      	str	r2, [r4, #16]
 80056e8:	f8cd a000 	str.w	sl, [sp]
 80056ec:	464b      	mov	r3, r9
 80056ee:	aa03      	add	r2, sp, #12
 80056f0:	4621      	mov	r1, r4
 80056f2:	4640      	mov	r0, r8
 80056f4:	f7ff fee2 	bl	80054bc <_printf_common>
 80056f8:	3001      	adds	r0, #1
 80056fa:	d14c      	bne.n	8005796 <_printf_i+0x1fe>
 80056fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005700:	b004      	add	sp, #16
 8005702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005706:	4835      	ldr	r0, [pc, #212]	; (80057dc <_printf_i+0x244>)
 8005708:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	680e      	ldr	r6, [r1, #0]
 8005710:	061f      	lsls	r7, r3, #24
 8005712:	f856 5b04 	ldr.w	r5, [r6], #4
 8005716:	600e      	str	r6, [r1, #0]
 8005718:	d514      	bpl.n	8005744 <_printf_i+0x1ac>
 800571a:	07d9      	lsls	r1, r3, #31
 800571c:	bf44      	itt	mi
 800571e:	f043 0320 	orrmi.w	r3, r3, #32
 8005722:	6023      	strmi	r3, [r4, #0]
 8005724:	b91d      	cbnz	r5, 800572e <_printf_i+0x196>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	f023 0320 	bic.w	r3, r3, #32
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	2310      	movs	r3, #16
 8005730:	e7b0      	b.n	8005694 <_printf_i+0xfc>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	f043 0320 	orr.w	r3, r3, #32
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	2378      	movs	r3, #120	; 0x78
 800573c:	4828      	ldr	r0, [pc, #160]	; (80057e0 <_printf_i+0x248>)
 800573e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005742:	e7e3      	b.n	800570c <_printf_i+0x174>
 8005744:	065e      	lsls	r6, r3, #25
 8005746:	bf48      	it	mi
 8005748:	b2ad      	uxthmi	r5, r5
 800574a:	e7e6      	b.n	800571a <_printf_i+0x182>
 800574c:	4616      	mov	r6, r2
 800574e:	e7bb      	b.n	80056c8 <_printf_i+0x130>
 8005750:	680b      	ldr	r3, [r1, #0]
 8005752:	6826      	ldr	r6, [r4, #0]
 8005754:	6960      	ldr	r0, [r4, #20]
 8005756:	1d1d      	adds	r5, r3, #4
 8005758:	600d      	str	r5, [r1, #0]
 800575a:	0635      	lsls	r5, r6, #24
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	d501      	bpl.n	8005764 <_printf_i+0x1cc>
 8005760:	6018      	str	r0, [r3, #0]
 8005762:	e002      	b.n	800576a <_printf_i+0x1d2>
 8005764:	0671      	lsls	r1, r6, #25
 8005766:	d5fb      	bpl.n	8005760 <_printf_i+0x1c8>
 8005768:	8018      	strh	r0, [r3, #0]
 800576a:	2300      	movs	r3, #0
 800576c:	6123      	str	r3, [r4, #16]
 800576e:	4616      	mov	r6, r2
 8005770:	e7ba      	b.n	80056e8 <_printf_i+0x150>
 8005772:	680b      	ldr	r3, [r1, #0]
 8005774:	1d1a      	adds	r2, r3, #4
 8005776:	600a      	str	r2, [r1, #0]
 8005778:	681e      	ldr	r6, [r3, #0]
 800577a:	6862      	ldr	r2, [r4, #4]
 800577c:	2100      	movs	r1, #0
 800577e:	4630      	mov	r0, r6
 8005780:	f7fa fd66 	bl	8000250 <memchr>
 8005784:	b108      	cbz	r0, 800578a <_printf_i+0x1f2>
 8005786:	1b80      	subs	r0, r0, r6
 8005788:	6060      	str	r0, [r4, #4]
 800578a:	6863      	ldr	r3, [r4, #4]
 800578c:	6123      	str	r3, [r4, #16]
 800578e:	2300      	movs	r3, #0
 8005790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005794:	e7a8      	b.n	80056e8 <_printf_i+0x150>
 8005796:	6923      	ldr	r3, [r4, #16]
 8005798:	4632      	mov	r2, r6
 800579a:	4649      	mov	r1, r9
 800579c:	4640      	mov	r0, r8
 800579e:	47d0      	blx	sl
 80057a0:	3001      	adds	r0, #1
 80057a2:	d0ab      	beq.n	80056fc <_printf_i+0x164>
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	079b      	lsls	r3, r3, #30
 80057a8:	d413      	bmi.n	80057d2 <_printf_i+0x23a>
 80057aa:	68e0      	ldr	r0, [r4, #12]
 80057ac:	9b03      	ldr	r3, [sp, #12]
 80057ae:	4298      	cmp	r0, r3
 80057b0:	bfb8      	it	lt
 80057b2:	4618      	movlt	r0, r3
 80057b4:	e7a4      	b.n	8005700 <_printf_i+0x168>
 80057b6:	2301      	movs	r3, #1
 80057b8:	4632      	mov	r2, r6
 80057ba:	4649      	mov	r1, r9
 80057bc:	4640      	mov	r0, r8
 80057be:	47d0      	blx	sl
 80057c0:	3001      	adds	r0, #1
 80057c2:	d09b      	beq.n	80056fc <_printf_i+0x164>
 80057c4:	3501      	adds	r5, #1
 80057c6:	68e3      	ldr	r3, [r4, #12]
 80057c8:	9903      	ldr	r1, [sp, #12]
 80057ca:	1a5b      	subs	r3, r3, r1
 80057cc:	42ab      	cmp	r3, r5
 80057ce:	dcf2      	bgt.n	80057b6 <_printf_i+0x21e>
 80057d0:	e7eb      	b.n	80057aa <_printf_i+0x212>
 80057d2:	2500      	movs	r5, #0
 80057d4:	f104 0619 	add.w	r6, r4, #25
 80057d8:	e7f5      	b.n	80057c6 <_printf_i+0x22e>
 80057da:	bf00      	nop
 80057dc:	08007c2e 	.word	0x08007c2e
 80057e0:	08007c3f 	.word	0x08007c3f

080057e4 <siprintf>:
 80057e4:	b40e      	push	{r1, r2, r3}
 80057e6:	b500      	push	{lr}
 80057e8:	b09c      	sub	sp, #112	; 0x70
 80057ea:	ab1d      	add	r3, sp, #116	; 0x74
 80057ec:	9002      	str	r0, [sp, #8]
 80057ee:	9006      	str	r0, [sp, #24]
 80057f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057f4:	4809      	ldr	r0, [pc, #36]	; (800581c <siprintf+0x38>)
 80057f6:	9107      	str	r1, [sp, #28]
 80057f8:	9104      	str	r1, [sp, #16]
 80057fa:	4909      	ldr	r1, [pc, #36]	; (8005820 <siprintf+0x3c>)
 80057fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005800:	9105      	str	r1, [sp, #20]
 8005802:	6800      	ldr	r0, [r0, #0]
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	a902      	add	r1, sp, #8
 8005808:	f001 faca 	bl	8006da0 <_svfiprintf_r>
 800580c:	9b02      	ldr	r3, [sp, #8]
 800580e:	2200      	movs	r2, #0
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	b01c      	add	sp, #112	; 0x70
 8005814:	f85d eb04 	ldr.w	lr, [sp], #4
 8005818:	b003      	add	sp, #12
 800581a:	4770      	bx	lr
 800581c:	2000000c 	.word	0x2000000c
 8005820:	ffff0208 	.word	0xffff0208

08005824 <quorem>:
 8005824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005828:	6903      	ldr	r3, [r0, #16]
 800582a:	690c      	ldr	r4, [r1, #16]
 800582c:	42a3      	cmp	r3, r4
 800582e:	4607      	mov	r7, r0
 8005830:	f2c0 8081 	blt.w	8005936 <quorem+0x112>
 8005834:	3c01      	subs	r4, #1
 8005836:	f101 0814 	add.w	r8, r1, #20
 800583a:	f100 0514 	add.w	r5, r0, #20
 800583e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005842:	9301      	str	r3, [sp, #4]
 8005844:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005848:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800584c:	3301      	adds	r3, #1
 800584e:	429a      	cmp	r2, r3
 8005850:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005854:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005858:	fbb2 f6f3 	udiv	r6, r2, r3
 800585c:	d331      	bcc.n	80058c2 <quorem+0x9e>
 800585e:	f04f 0e00 	mov.w	lr, #0
 8005862:	4640      	mov	r0, r8
 8005864:	46ac      	mov	ip, r5
 8005866:	46f2      	mov	sl, lr
 8005868:	f850 2b04 	ldr.w	r2, [r0], #4
 800586c:	b293      	uxth	r3, r2
 800586e:	fb06 e303 	mla	r3, r6, r3, lr
 8005872:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005876:	b29b      	uxth	r3, r3
 8005878:	ebaa 0303 	sub.w	r3, sl, r3
 800587c:	0c12      	lsrs	r2, r2, #16
 800587e:	f8dc a000 	ldr.w	sl, [ip]
 8005882:	fb06 e202 	mla	r2, r6, r2, lr
 8005886:	fa13 f38a 	uxtah	r3, r3, sl
 800588a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800588e:	fa1f fa82 	uxth.w	sl, r2
 8005892:	f8dc 2000 	ldr.w	r2, [ip]
 8005896:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800589a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800589e:	b29b      	uxth	r3, r3
 80058a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058a4:	4581      	cmp	r9, r0
 80058a6:	f84c 3b04 	str.w	r3, [ip], #4
 80058aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80058ae:	d2db      	bcs.n	8005868 <quorem+0x44>
 80058b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80058b4:	b92b      	cbnz	r3, 80058c2 <quorem+0x9e>
 80058b6:	9b01      	ldr	r3, [sp, #4]
 80058b8:	3b04      	subs	r3, #4
 80058ba:	429d      	cmp	r5, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	d32e      	bcc.n	800591e <quorem+0xfa>
 80058c0:	613c      	str	r4, [r7, #16]
 80058c2:	4638      	mov	r0, r7
 80058c4:	f001 f856 	bl	8006974 <__mcmp>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	db24      	blt.n	8005916 <quorem+0xf2>
 80058cc:	3601      	adds	r6, #1
 80058ce:	4628      	mov	r0, r5
 80058d0:	f04f 0c00 	mov.w	ip, #0
 80058d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80058d8:	f8d0 e000 	ldr.w	lr, [r0]
 80058dc:	b293      	uxth	r3, r2
 80058de:	ebac 0303 	sub.w	r3, ip, r3
 80058e2:	0c12      	lsrs	r2, r2, #16
 80058e4:	fa13 f38e 	uxtah	r3, r3, lr
 80058e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058f6:	45c1      	cmp	r9, r8
 80058f8:	f840 3b04 	str.w	r3, [r0], #4
 80058fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005900:	d2e8      	bcs.n	80058d4 <quorem+0xb0>
 8005902:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005906:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800590a:	b922      	cbnz	r2, 8005916 <quorem+0xf2>
 800590c:	3b04      	subs	r3, #4
 800590e:	429d      	cmp	r5, r3
 8005910:	461a      	mov	r2, r3
 8005912:	d30a      	bcc.n	800592a <quorem+0x106>
 8005914:	613c      	str	r4, [r7, #16]
 8005916:	4630      	mov	r0, r6
 8005918:	b003      	add	sp, #12
 800591a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800591e:	6812      	ldr	r2, [r2, #0]
 8005920:	3b04      	subs	r3, #4
 8005922:	2a00      	cmp	r2, #0
 8005924:	d1cc      	bne.n	80058c0 <quorem+0x9c>
 8005926:	3c01      	subs	r4, #1
 8005928:	e7c7      	b.n	80058ba <quorem+0x96>
 800592a:	6812      	ldr	r2, [r2, #0]
 800592c:	3b04      	subs	r3, #4
 800592e:	2a00      	cmp	r2, #0
 8005930:	d1f0      	bne.n	8005914 <quorem+0xf0>
 8005932:	3c01      	subs	r4, #1
 8005934:	e7eb      	b.n	800590e <quorem+0xea>
 8005936:	2000      	movs	r0, #0
 8005938:	e7ee      	b.n	8005918 <quorem+0xf4>
 800593a:	0000      	movs	r0, r0
 800593c:	0000      	movs	r0, r0
	...

08005940 <_dtoa_r>:
 8005940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005944:	ec59 8b10 	vmov	r8, r9, d0
 8005948:	b095      	sub	sp, #84	; 0x54
 800594a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800594c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800594e:	9107      	str	r1, [sp, #28]
 8005950:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005954:	4606      	mov	r6, r0
 8005956:	9209      	str	r2, [sp, #36]	; 0x24
 8005958:	9310      	str	r3, [sp, #64]	; 0x40
 800595a:	b975      	cbnz	r5, 800597a <_dtoa_r+0x3a>
 800595c:	2010      	movs	r0, #16
 800595e:	f000 fd75 	bl	800644c <malloc>
 8005962:	4602      	mov	r2, r0
 8005964:	6270      	str	r0, [r6, #36]	; 0x24
 8005966:	b920      	cbnz	r0, 8005972 <_dtoa_r+0x32>
 8005968:	4bab      	ldr	r3, [pc, #684]	; (8005c18 <_dtoa_r+0x2d8>)
 800596a:	21ea      	movs	r1, #234	; 0xea
 800596c:	48ab      	ldr	r0, [pc, #684]	; (8005c1c <_dtoa_r+0x2dc>)
 800596e:	f001 fb27 	bl	8006fc0 <__assert_func>
 8005972:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005976:	6005      	str	r5, [r0, #0]
 8005978:	60c5      	str	r5, [r0, #12]
 800597a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800597c:	6819      	ldr	r1, [r3, #0]
 800597e:	b151      	cbz	r1, 8005996 <_dtoa_r+0x56>
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	604a      	str	r2, [r1, #4]
 8005984:	2301      	movs	r3, #1
 8005986:	4093      	lsls	r3, r2
 8005988:	608b      	str	r3, [r1, #8]
 800598a:	4630      	mov	r0, r6
 800598c:	f000 fdb4 	bl	80064f8 <_Bfree>
 8005990:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	f1b9 0300 	subs.w	r3, r9, #0
 800599a:	bfbb      	ittet	lt
 800599c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80059a0:	9303      	strlt	r3, [sp, #12]
 80059a2:	2300      	movge	r3, #0
 80059a4:	2201      	movlt	r2, #1
 80059a6:	bfac      	ite	ge
 80059a8:	6023      	strge	r3, [r4, #0]
 80059aa:	6022      	strlt	r2, [r4, #0]
 80059ac:	4b9c      	ldr	r3, [pc, #624]	; (8005c20 <_dtoa_r+0x2e0>)
 80059ae:	9c03      	ldr	r4, [sp, #12]
 80059b0:	43a3      	bics	r3, r4
 80059b2:	d11a      	bne.n	80059ea <_dtoa_r+0xaa>
 80059b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80059b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80059c0:	ea53 0308 	orrs.w	r3, r3, r8
 80059c4:	f000 8512 	beq.w	80063ec <_dtoa_r+0xaac>
 80059c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80059ca:	b953      	cbnz	r3, 80059e2 <_dtoa_r+0xa2>
 80059cc:	4b95      	ldr	r3, [pc, #596]	; (8005c24 <_dtoa_r+0x2e4>)
 80059ce:	e01f      	b.n	8005a10 <_dtoa_r+0xd0>
 80059d0:	4b95      	ldr	r3, [pc, #596]	; (8005c28 <_dtoa_r+0x2e8>)
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	3308      	adds	r3, #8
 80059d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	9800      	ldr	r0, [sp, #0]
 80059dc:	b015      	add	sp, #84	; 0x54
 80059de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e2:	4b90      	ldr	r3, [pc, #576]	; (8005c24 <_dtoa_r+0x2e4>)
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	3303      	adds	r3, #3
 80059e8:	e7f5      	b.n	80059d6 <_dtoa_r+0x96>
 80059ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80059f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80059fa:	d10b      	bne.n	8005a14 <_dtoa_r+0xd4>
 80059fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80059fe:	2301      	movs	r3, #1
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 84ee 	beq.w	80063e6 <_dtoa_r+0xaa6>
 8005a0a:	4888      	ldr	r0, [pc, #544]	; (8005c2c <_dtoa_r+0x2ec>)
 8005a0c:	6018      	str	r0, [r3, #0]
 8005a0e:	1e43      	subs	r3, r0, #1
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	e7e2      	b.n	80059da <_dtoa_r+0x9a>
 8005a14:	a913      	add	r1, sp, #76	; 0x4c
 8005a16:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005a1a:	aa12      	add	r2, sp, #72	; 0x48
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f001 f84d 	bl	8006abc <__d2b>
 8005a22:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8005a26:	4605      	mov	r5, r0
 8005a28:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005a2a:	2900      	cmp	r1, #0
 8005a2c:	d047      	beq.n	8005abe <_dtoa_r+0x17e>
 8005a2e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005a30:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005a34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005a38:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8005a3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005a40:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005a44:	2400      	movs	r4, #0
 8005a46:	ec43 2b16 	vmov	d6, r2, r3
 8005a4a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8005a4e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8005c00 <_dtoa_r+0x2c0>
 8005a52:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a56:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8005c08 <_dtoa_r+0x2c8>
 8005a5a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005a5e:	eeb0 7b46 	vmov.f64	d7, d6
 8005a62:	ee06 1a90 	vmov	s13, r1
 8005a66:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8005a6a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8005c10 <_dtoa_r+0x2d0>
 8005a6e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8005a72:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005a76:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a7e:	ee16 ba90 	vmov	fp, s13
 8005a82:	9411      	str	r4, [sp, #68]	; 0x44
 8005a84:	d508      	bpl.n	8005a98 <_dtoa_r+0x158>
 8005a86:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005a8a:	eeb4 6b47 	vcmp.f64	d6, d7
 8005a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a92:	bf18      	it	ne
 8005a94:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005a98:	f1bb 0f16 	cmp.w	fp, #22
 8005a9c:	d832      	bhi.n	8005b04 <_dtoa_r+0x1c4>
 8005a9e:	4b64      	ldr	r3, [pc, #400]	; (8005c30 <_dtoa_r+0x2f0>)
 8005aa0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005aa4:	ed93 7b00 	vldr	d7, [r3]
 8005aa8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8005aac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab4:	d501      	bpl.n	8005aba <_dtoa_r+0x17a>
 8005ab6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005aba:	2300      	movs	r3, #0
 8005abc:	e023      	b.n	8005b06 <_dtoa_r+0x1c6>
 8005abe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005ac0:	4401      	add	r1, r0
 8005ac2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8005ac6:	2b20      	cmp	r3, #32
 8005ac8:	bfc3      	ittte	gt
 8005aca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ace:	fa04 f303 	lslgt.w	r3, r4, r3
 8005ad2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8005ad6:	f1c3 0320 	rsble	r3, r3, #32
 8005ada:	bfc6      	itte	gt
 8005adc:	fa28 f804 	lsrgt.w	r8, r8, r4
 8005ae0:	ea43 0308 	orrgt.w	r3, r3, r8
 8005ae4:	fa08 f303 	lslle.w	r3, r8, r3
 8005ae8:	ee07 3a90 	vmov	s15, r3
 8005aec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005af0:	3901      	subs	r1, #1
 8005af2:	ed8d 7b00 	vstr	d7, [sp]
 8005af6:	9c01      	ldr	r4, [sp, #4]
 8005af8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005afc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8005b00:	2401      	movs	r4, #1
 8005b02:	e7a0      	b.n	8005a46 <_dtoa_r+0x106>
 8005b04:	2301      	movs	r3, #1
 8005b06:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b08:	1a43      	subs	r3, r0, r1
 8005b0a:	1e5a      	subs	r2, r3, #1
 8005b0c:	bf45      	ittet	mi
 8005b0e:	f1c3 0301 	rsbmi	r3, r3, #1
 8005b12:	9305      	strmi	r3, [sp, #20]
 8005b14:	2300      	movpl	r3, #0
 8005b16:	2300      	movmi	r3, #0
 8005b18:	9206      	str	r2, [sp, #24]
 8005b1a:	bf54      	ite	pl
 8005b1c:	9305      	strpl	r3, [sp, #20]
 8005b1e:	9306      	strmi	r3, [sp, #24]
 8005b20:	f1bb 0f00 	cmp.w	fp, #0
 8005b24:	db18      	blt.n	8005b58 <_dtoa_r+0x218>
 8005b26:	9b06      	ldr	r3, [sp, #24]
 8005b28:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005b2c:	445b      	add	r3, fp
 8005b2e:	9306      	str	r3, [sp, #24]
 8005b30:	2300      	movs	r3, #0
 8005b32:	9a07      	ldr	r2, [sp, #28]
 8005b34:	2a09      	cmp	r2, #9
 8005b36:	d849      	bhi.n	8005bcc <_dtoa_r+0x28c>
 8005b38:	2a05      	cmp	r2, #5
 8005b3a:	bfc4      	itt	gt
 8005b3c:	3a04      	subgt	r2, #4
 8005b3e:	9207      	strgt	r2, [sp, #28]
 8005b40:	9a07      	ldr	r2, [sp, #28]
 8005b42:	f1a2 0202 	sub.w	r2, r2, #2
 8005b46:	bfcc      	ite	gt
 8005b48:	2400      	movgt	r4, #0
 8005b4a:	2401      	movle	r4, #1
 8005b4c:	2a03      	cmp	r2, #3
 8005b4e:	d848      	bhi.n	8005be2 <_dtoa_r+0x2a2>
 8005b50:	e8df f002 	tbb	[pc, r2]
 8005b54:	3a2c2e0b 	.word	0x3a2c2e0b
 8005b58:	9b05      	ldr	r3, [sp, #20]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	eba3 030b 	sub.w	r3, r3, fp
 8005b60:	9305      	str	r3, [sp, #20]
 8005b62:	920e      	str	r2, [sp, #56]	; 0x38
 8005b64:	f1cb 0300 	rsb	r3, fp, #0
 8005b68:	e7e3      	b.n	8005b32 <_dtoa_r+0x1f2>
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	9208      	str	r2, [sp, #32]
 8005b6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b70:	2a00      	cmp	r2, #0
 8005b72:	dc39      	bgt.n	8005be8 <_dtoa_r+0x2a8>
 8005b74:	f04f 0a01 	mov.w	sl, #1
 8005b78:	46d1      	mov	r9, sl
 8005b7a:	4652      	mov	r2, sl
 8005b7c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005b80:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8005b82:	2100      	movs	r1, #0
 8005b84:	6079      	str	r1, [r7, #4]
 8005b86:	2004      	movs	r0, #4
 8005b88:	f100 0c14 	add.w	ip, r0, #20
 8005b8c:	4594      	cmp	ip, r2
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	d92f      	bls.n	8005bf2 <_dtoa_r+0x2b2>
 8005b92:	4630      	mov	r0, r6
 8005b94:	930c      	str	r3, [sp, #48]	; 0x30
 8005b96:	f000 fc6f 	bl	8006478 <_Balloc>
 8005b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b9c:	9000      	str	r0, [sp, #0]
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d149      	bne.n	8005c38 <_dtoa_r+0x2f8>
 8005ba4:	4b23      	ldr	r3, [pc, #140]	; (8005c34 <_dtoa_r+0x2f4>)
 8005ba6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005baa:	e6df      	b.n	800596c <_dtoa_r+0x2c>
 8005bac:	2201      	movs	r2, #1
 8005bae:	e7dd      	b.n	8005b6c <_dtoa_r+0x22c>
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	9208      	str	r2, [sp, #32]
 8005bb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bb6:	eb0b 0a02 	add.w	sl, fp, r2
 8005bba:	f10a 0901 	add.w	r9, sl, #1
 8005bbe:	464a      	mov	r2, r9
 8005bc0:	2a01      	cmp	r2, #1
 8005bc2:	bfb8      	it	lt
 8005bc4:	2201      	movlt	r2, #1
 8005bc6:	e7db      	b.n	8005b80 <_dtoa_r+0x240>
 8005bc8:	2201      	movs	r2, #1
 8005bca:	e7f2      	b.n	8005bb2 <_dtoa_r+0x272>
 8005bcc:	2401      	movs	r4, #1
 8005bce:	2200      	movs	r2, #0
 8005bd0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8005bd4:	f04f 3aff 	mov.w	sl, #4294967295
 8005bd8:	2100      	movs	r1, #0
 8005bda:	46d1      	mov	r9, sl
 8005bdc:	2212      	movs	r2, #18
 8005bde:	9109      	str	r1, [sp, #36]	; 0x24
 8005be0:	e7ce      	b.n	8005b80 <_dtoa_r+0x240>
 8005be2:	2201      	movs	r2, #1
 8005be4:	9208      	str	r2, [sp, #32]
 8005be6:	e7f5      	b.n	8005bd4 <_dtoa_r+0x294>
 8005be8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8005bec:	46d1      	mov	r9, sl
 8005bee:	4652      	mov	r2, sl
 8005bf0:	e7c6      	b.n	8005b80 <_dtoa_r+0x240>
 8005bf2:	3101      	adds	r1, #1
 8005bf4:	6079      	str	r1, [r7, #4]
 8005bf6:	0040      	lsls	r0, r0, #1
 8005bf8:	e7c6      	b.n	8005b88 <_dtoa_r+0x248>
 8005bfa:	bf00      	nop
 8005bfc:	f3af 8000 	nop.w
 8005c00:	636f4361 	.word	0x636f4361
 8005c04:	3fd287a7 	.word	0x3fd287a7
 8005c08:	8b60c8b3 	.word	0x8b60c8b3
 8005c0c:	3fc68a28 	.word	0x3fc68a28
 8005c10:	509f79fb 	.word	0x509f79fb
 8005c14:	3fd34413 	.word	0x3fd34413
 8005c18:	08007c5d 	.word	0x08007c5d
 8005c1c:	08007c74 	.word	0x08007c74
 8005c20:	7ff00000 	.word	0x7ff00000
 8005c24:	08007c59 	.word	0x08007c59
 8005c28:	08007c50 	.word	0x08007c50
 8005c2c:	08007c2d 	.word	0x08007c2d
 8005c30:	08007d70 	.word	0x08007d70
 8005c34:	08007cd3 	.word	0x08007cd3
 8005c38:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8005c3a:	9900      	ldr	r1, [sp, #0]
 8005c3c:	6011      	str	r1, [r2, #0]
 8005c3e:	f1b9 0f0e 	cmp.w	r9, #14
 8005c42:	d872      	bhi.n	8005d2a <_dtoa_r+0x3ea>
 8005c44:	2c00      	cmp	r4, #0
 8005c46:	d070      	beq.n	8005d2a <_dtoa_r+0x3ea>
 8005c48:	f1bb 0f00 	cmp.w	fp, #0
 8005c4c:	f340 80a6 	ble.w	8005d9c <_dtoa_r+0x45c>
 8005c50:	49ca      	ldr	r1, [pc, #808]	; (8005f7c <_dtoa_r+0x63c>)
 8005c52:	f00b 020f 	and.w	r2, fp, #15
 8005c56:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8005c5a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005c5e:	ed92 7b00 	vldr	d7, [r2]
 8005c62:	ea4f 112b 	mov.w	r1, fp, asr #4
 8005c66:	f000 808d 	beq.w	8005d84 <_dtoa_r+0x444>
 8005c6a:	4ac5      	ldr	r2, [pc, #788]	; (8005f80 <_dtoa_r+0x640>)
 8005c6c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8005c70:	ed92 6b08 	vldr	d6, [r2, #32]
 8005c74:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8005c78:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005c7c:	f001 010f 	and.w	r1, r1, #15
 8005c80:	2203      	movs	r2, #3
 8005c82:	48bf      	ldr	r0, [pc, #764]	; (8005f80 <_dtoa_r+0x640>)
 8005c84:	2900      	cmp	r1, #0
 8005c86:	d17f      	bne.n	8005d88 <_dtoa_r+0x448>
 8005c88:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005c8c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005c90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005c96:	2900      	cmp	r1, #0
 8005c98:	f000 80b2 	beq.w	8005e00 <_dtoa_r+0x4c0>
 8005c9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005ca0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ca4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cac:	f140 80a8 	bpl.w	8005e00 <_dtoa_r+0x4c0>
 8005cb0:	f1b9 0f00 	cmp.w	r9, #0
 8005cb4:	f000 80a4 	beq.w	8005e00 <_dtoa_r+0x4c0>
 8005cb8:	f1ba 0f00 	cmp.w	sl, #0
 8005cbc:	dd31      	ble.n	8005d22 <_dtoa_r+0x3e2>
 8005cbe:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005cc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005cc6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005cca:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005cce:	3201      	adds	r2, #1
 8005cd0:	4650      	mov	r0, sl
 8005cd2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005cd6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005cda:	ee07 2a90 	vmov	s15, r2
 8005cde:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005ce2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005ce6:	ed8d 5b02 	vstr	d5, [sp, #8]
 8005cea:	9c03      	ldr	r4, [sp, #12]
 8005cec:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005cf0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	f040 8086 	bne.w	8005e06 <_dtoa_r+0x4c6>
 8005cfa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005cfe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005d02:	ec42 1b17 	vmov	d7, r1, r2
 8005d06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d0e:	f300 8272 	bgt.w	80061f6 <_dtoa_r+0x8b6>
 8005d12:	eeb1 7b47 	vneg.f64	d7, d7
 8005d16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d1e:	f100 8267 	bmi.w	80061f0 <_dtoa_r+0x8b0>
 8005d22:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8005d26:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005d2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005d2c:	2a00      	cmp	r2, #0
 8005d2e:	f2c0 8129 	blt.w	8005f84 <_dtoa_r+0x644>
 8005d32:	f1bb 0f0e 	cmp.w	fp, #14
 8005d36:	f300 8125 	bgt.w	8005f84 <_dtoa_r+0x644>
 8005d3a:	4b90      	ldr	r3, [pc, #576]	; (8005f7c <_dtoa_r+0x63c>)
 8005d3c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005d40:	ed93 6b00 	vldr	d6, [r3]
 8005d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f280 80c3 	bge.w	8005ed2 <_dtoa_r+0x592>
 8005d4c:	f1b9 0f00 	cmp.w	r9, #0
 8005d50:	f300 80bf 	bgt.w	8005ed2 <_dtoa_r+0x592>
 8005d54:	f040 824c 	bne.w	80061f0 <_dtoa_r+0x8b0>
 8005d58:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005d5c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005d60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6c:	464c      	mov	r4, r9
 8005d6e:	464f      	mov	r7, r9
 8005d70:	f280 8222 	bge.w	80061b8 <_dtoa_r+0x878>
 8005d74:	f8dd 8000 	ldr.w	r8, [sp]
 8005d78:	2331      	movs	r3, #49	; 0x31
 8005d7a:	f808 3b01 	strb.w	r3, [r8], #1
 8005d7e:	f10b 0b01 	add.w	fp, fp, #1
 8005d82:	e21e      	b.n	80061c2 <_dtoa_r+0x882>
 8005d84:	2202      	movs	r2, #2
 8005d86:	e77c      	b.n	8005c82 <_dtoa_r+0x342>
 8005d88:	07cc      	lsls	r4, r1, #31
 8005d8a:	d504      	bpl.n	8005d96 <_dtoa_r+0x456>
 8005d8c:	ed90 6b00 	vldr	d6, [r0]
 8005d90:	3201      	adds	r2, #1
 8005d92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005d96:	1049      	asrs	r1, r1, #1
 8005d98:	3008      	adds	r0, #8
 8005d9a:	e773      	b.n	8005c84 <_dtoa_r+0x344>
 8005d9c:	d02e      	beq.n	8005dfc <_dtoa_r+0x4bc>
 8005d9e:	f1cb 0100 	rsb	r1, fp, #0
 8005da2:	4a76      	ldr	r2, [pc, #472]	; (8005f7c <_dtoa_r+0x63c>)
 8005da4:	f001 000f 	and.w	r0, r1, #15
 8005da8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005dac:	ed92 7b00 	vldr	d7, [r2]
 8005db0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8005db4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005db8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005dbc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8005dc0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8005dc4:	486e      	ldr	r0, [pc, #440]	; (8005f80 <_dtoa_r+0x640>)
 8005dc6:	1109      	asrs	r1, r1, #4
 8005dc8:	2400      	movs	r4, #0
 8005dca:	2202      	movs	r2, #2
 8005dcc:	b939      	cbnz	r1, 8005dde <_dtoa_r+0x49e>
 8005dce:	2c00      	cmp	r4, #0
 8005dd0:	f43f af60 	beq.w	8005c94 <_dtoa_r+0x354>
 8005dd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005dd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ddc:	e75a      	b.n	8005c94 <_dtoa_r+0x354>
 8005dde:	07cf      	lsls	r7, r1, #31
 8005de0:	d509      	bpl.n	8005df6 <_dtoa_r+0x4b6>
 8005de2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8005de6:	ed90 7b00 	vldr	d7, [r0]
 8005dea:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005dee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005df2:	3201      	adds	r2, #1
 8005df4:	2401      	movs	r4, #1
 8005df6:	1049      	asrs	r1, r1, #1
 8005df8:	3008      	adds	r0, #8
 8005dfa:	e7e7      	b.n	8005dcc <_dtoa_r+0x48c>
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	e749      	b.n	8005c94 <_dtoa_r+0x354>
 8005e00:	465f      	mov	r7, fp
 8005e02:	4648      	mov	r0, r9
 8005e04:	e765      	b.n	8005cd2 <_dtoa_r+0x392>
 8005e06:	ec42 1b17 	vmov	d7, r1, r2
 8005e0a:	4a5c      	ldr	r2, [pc, #368]	; (8005f7c <_dtoa_r+0x63c>)
 8005e0c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005e10:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005e14:	9a00      	ldr	r2, [sp, #0]
 8005e16:	1814      	adds	r4, r2, r0
 8005e18:	9a08      	ldr	r2, [sp, #32]
 8005e1a:	b352      	cbz	r2, 8005e72 <_dtoa_r+0x532>
 8005e1c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005e20:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005e24:	f8dd 8000 	ldr.w	r8, [sp]
 8005e28:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005e2c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005e30:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005e34:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005e38:	ee14 2a90 	vmov	r2, s9
 8005e3c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005e40:	3230      	adds	r2, #48	; 0x30
 8005e42:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005e46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e4e:	f808 2b01 	strb.w	r2, [r8], #1
 8005e52:	d439      	bmi.n	8005ec8 <_dtoa_r+0x588>
 8005e54:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005e58:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e60:	d472      	bmi.n	8005f48 <_dtoa_r+0x608>
 8005e62:	45a0      	cmp	r8, r4
 8005e64:	f43f af5d 	beq.w	8005d22 <_dtoa_r+0x3e2>
 8005e68:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005e6c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005e70:	e7e0      	b.n	8005e34 <_dtoa_r+0x4f4>
 8005e72:	f8dd 8000 	ldr.w	r8, [sp]
 8005e76:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005e80:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005e84:	ee14 2a90 	vmov	r2, s9
 8005e88:	3230      	adds	r2, #48	; 0x30
 8005e8a:	f808 2b01 	strb.w	r2, [r8], #1
 8005e8e:	45a0      	cmp	r8, r4
 8005e90:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005e94:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005e98:	d118      	bne.n	8005ecc <_dtoa_r+0x58c>
 8005e9a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005e9e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005ea2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eaa:	dc4d      	bgt.n	8005f48 <_dtoa_r+0x608>
 8005eac:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005eb0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb8:	f57f af33 	bpl.w	8005d22 <_dtoa_r+0x3e2>
 8005ebc:	4688      	mov	r8, r1
 8005ebe:	3901      	subs	r1, #1
 8005ec0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005ec4:	2b30      	cmp	r3, #48	; 0x30
 8005ec6:	d0f9      	beq.n	8005ebc <_dtoa_r+0x57c>
 8005ec8:	46bb      	mov	fp, r7
 8005eca:	e02a      	b.n	8005f22 <_dtoa_r+0x5e2>
 8005ecc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005ed0:	e7d6      	b.n	8005e80 <_dtoa_r+0x540>
 8005ed2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ed6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005eda:	f8dd 8000 	ldr.w	r8, [sp]
 8005ede:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005ee2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005ee6:	ee15 3a10 	vmov	r3, s10
 8005eea:	3330      	adds	r3, #48	; 0x30
 8005eec:	f808 3b01 	strb.w	r3, [r8], #1
 8005ef0:	9b00      	ldr	r3, [sp, #0]
 8005ef2:	eba8 0303 	sub.w	r3, r8, r3
 8005ef6:	4599      	cmp	r9, r3
 8005ef8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005efc:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005f00:	d133      	bne.n	8005f6a <_dtoa_r+0x62a>
 8005f02:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005f06:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f0e:	dc1a      	bgt.n	8005f46 <_dtoa_r+0x606>
 8005f10:	eeb4 7b46 	vcmp.f64	d7, d6
 8005f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f18:	d103      	bne.n	8005f22 <_dtoa_r+0x5e2>
 8005f1a:	ee15 3a10 	vmov	r3, s10
 8005f1e:	07d9      	lsls	r1, r3, #31
 8005f20:	d411      	bmi.n	8005f46 <_dtoa_r+0x606>
 8005f22:	4629      	mov	r1, r5
 8005f24:	4630      	mov	r0, r6
 8005f26:	f000 fae7 	bl	80064f8 <_Bfree>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f2e:	f888 3000 	strb.w	r3, [r8]
 8005f32:	f10b 0301 	add.w	r3, fp, #1
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f43f ad4d 	beq.w	80059da <_dtoa_r+0x9a>
 8005f40:	f8c3 8000 	str.w	r8, [r3]
 8005f44:	e549      	b.n	80059da <_dtoa_r+0x9a>
 8005f46:	465f      	mov	r7, fp
 8005f48:	4643      	mov	r3, r8
 8005f4a:	4698      	mov	r8, r3
 8005f4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f50:	2a39      	cmp	r2, #57	; 0x39
 8005f52:	d106      	bne.n	8005f62 <_dtoa_r+0x622>
 8005f54:	9a00      	ldr	r2, [sp, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d1f7      	bne.n	8005f4a <_dtoa_r+0x60a>
 8005f5a:	9900      	ldr	r1, [sp, #0]
 8005f5c:	2230      	movs	r2, #48	; 0x30
 8005f5e:	3701      	adds	r7, #1
 8005f60:	700a      	strb	r2, [r1, #0]
 8005f62:	781a      	ldrb	r2, [r3, #0]
 8005f64:	3201      	adds	r2, #1
 8005f66:	701a      	strb	r2, [r3, #0]
 8005f68:	e7ae      	b.n	8005ec8 <_dtoa_r+0x588>
 8005f6a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005f6e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f76:	d1b2      	bne.n	8005ede <_dtoa_r+0x59e>
 8005f78:	e7d3      	b.n	8005f22 <_dtoa_r+0x5e2>
 8005f7a:	bf00      	nop
 8005f7c:	08007d70 	.word	0x08007d70
 8005f80:	08007d48 	.word	0x08007d48
 8005f84:	9908      	ldr	r1, [sp, #32]
 8005f86:	2900      	cmp	r1, #0
 8005f88:	f000 80d1 	beq.w	800612e <_dtoa_r+0x7ee>
 8005f8c:	9907      	ldr	r1, [sp, #28]
 8005f8e:	2901      	cmp	r1, #1
 8005f90:	f300 80b4 	bgt.w	80060fc <_dtoa_r+0x7bc>
 8005f94:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005f96:	2900      	cmp	r1, #0
 8005f98:	f000 80ac 	beq.w	80060f4 <_dtoa_r+0x7b4>
 8005f9c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005fa0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8005fa4:	461c      	mov	r4, r3
 8005fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8005fa8:	9b05      	ldr	r3, [sp, #20]
 8005faa:	4413      	add	r3, r2
 8005fac:	9305      	str	r3, [sp, #20]
 8005fae:	9b06      	ldr	r3, [sp, #24]
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	4413      	add	r3, r2
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	9306      	str	r3, [sp, #24]
 8005fb8:	f000 fb5a 	bl	8006670 <__i2b>
 8005fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fbe:	4607      	mov	r7, r0
 8005fc0:	f1b8 0f00 	cmp.w	r8, #0
 8005fc4:	dd0d      	ble.n	8005fe2 <_dtoa_r+0x6a2>
 8005fc6:	9a06      	ldr	r2, [sp, #24]
 8005fc8:	2a00      	cmp	r2, #0
 8005fca:	dd0a      	ble.n	8005fe2 <_dtoa_r+0x6a2>
 8005fcc:	4542      	cmp	r2, r8
 8005fce:	9905      	ldr	r1, [sp, #20]
 8005fd0:	bfa8      	it	ge
 8005fd2:	4642      	movge	r2, r8
 8005fd4:	1a89      	subs	r1, r1, r2
 8005fd6:	9105      	str	r1, [sp, #20]
 8005fd8:	9906      	ldr	r1, [sp, #24]
 8005fda:	eba8 0802 	sub.w	r8, r8, r2
 8005fde:	1a8a      	subs	r2, r1, r2
 8005fe0:	9206      	str	r2, [sp, #24]
 8005fe2:	b303      	cbz	r3, 8006026 <_dtoa_r+0x6e6>
 8005fe4:	9a08      	ldr	r2, [sp, #32]
 8005fe6:	2a00      	cmp	r2, #0
 8005fe8:	f000 80a6 	beq.w	8006138 <_dtoa_r+0x7f8>
 8005fec:	2c00      	cmp	r4, #0
 8005fee:	dd13      	ble.n	8006018 <_dtoa_r+0x6d8>
 8005ff0:	4639      	mov	r1, r7
 8005ff2:	4622      	mov	r2, r4
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	930c      	str	r3, [sp, #48]	; 0x30
 8005ff8:	f000 fbf6 	bl	80067e8 <__pow5mult>
 8005ffc:	462a      	mov	r2, r5
 8005ffe:	4601      	mov	r1, r0
 8006000:	4607      	mov	r7, r0
 8006002:	4630      	mov	r0, r6
 8006004:	f000 fb4a 	bl	800669c <__multiply>
 8006008:	4629      	mov	r1, r5
 800600a:	900a      	str	r0, [sp, #40]	; 0x28
 800600c:	4630      	mov	r0, r6
 800600e:	f000 fa73 	bl	80064f8 <_Bfree>
 8006012:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006016:	4615      	mov	r5, r2
 8006018:	1b1a      	subs	r2, r3, r4
 800601a:	d004      	beq.n	8006026 <_dtoa_r+0x6e6>
 800601c:	4629      	mov	r1, r5
 800601e:	4630      	mov	r0, r6
 8006020:	f000 fbe2 	bl	80067e8 <__pow5mult>
 8006024:	4605      	mov	r5, r0
 8006026:	2101      	movs	r1, #1
 8006028:	4630      	mov	r0, r6
 800602a:	f000 fb21 	bl	8006670 <__i2b>
 800602e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006030:	2b00      	cmp	r3, #0
 8006032:	4604      	mov	r4, r0
 8006034:	f340 8082 	ble.w	800613c <_dtoa_r+0x7fc>
 8006038:	461a      	mov	r2, r3
 800603a:	4601      	mov	r1, r0
 800603c:	4630      	mov	r0, r6
 800603e:	f000 fbd3 	bl	80067e8 <__pow5mult>
 8006042:	9b07      	ldr	r3, [sp, #28]
 8006044:	2b01      	cmp	r3, #1
 8006046:	4604      	mov	r4, r0
 8006048:	dd7b      	ble.n	8006142 <_dtoa_r+0x802>
 800604a:	2300      	movs	r3, #0
 800604c:	930a      	str	r3, [sp, #40]	; 0x28
 800604e:	6922      	ldr	r2, [r4, #16]
 8006050:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006054:	6910      	ldr	r0, [r2, #16]
 8006056:	f000 fabb 	bl	80065d0 <__hi0bits>
 800605a:	f1c0 0020 	rsb	r0, r0, #32
 800605e:	9b06      	ldr	r3, [sp, #24]
 8006060:	4418      	add	r0, r3
 8006062:	f010 001f 	ands.w	r0, r0, #31
 8006066:	f000 808d 	beq.w	8006184 <_dtoa_r+0x844>
 800606a:	f1c0 0220 	rsb	r2, r0, #32
 800606e:	2a04      	cmp	r2, #4
 8006070:	f340 8086 	ble.w	8006180 <_dtoa_r+0x840>
 8006074:	f1c0 001c 	rsb	r0, r0, #28
 8006078:	9b05      	ldr	r3, [sp, #20]
 800607a:	4403      	add	r3, r0
 800607c:	9305      	str	r3, [sp, #20]
 800607e:	9b06      	ldr	r3, [sp, #24]
 8006080:	4403      	add	r3, r0
 8006082:	4480      	add	r8, r0
 8006084:	9306      	str	r3, [sp, #24]
 8006086:	9b05      	ldr	r3, [sp, #20]
 8006088:	2b00      	cmp	r3, #0
 800608a:	dd05      	ble.n	8006098 <_dtoa_r+0x758>
 800608c:	4629      	mov	r1, r5
 800608e:	461a      	mov	r2, r3
 8006090:	4630      	mov	r0, r6
 8006092:	f000 fc03 	bl	800689c <__lshift>
 8006096:	4605      	mov	r5, r0
 8006098:	9b06      	ldr	r3, [sp, #24]
 800609a:	2b00      	cmp	r3, #0
 800609c:	dd05      	ble.n	80060aa <_dtoa_r+0x76a>
 800609e:	4621      	mov	r1, r4
 80060a0:	461a      	mov	r2, r3
 80060a2:	4630      	mov	r0, r6
 80060a4:	f000 fbfa 	bl	800689c <__lshift>
 80060a8:	4604      	mov	r4, r0
 80060aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d06b      	beq.n	8006188 <_dtoa_r+0x848>
 80060b0:	4621      	mov	r1, r4
 80060b2:	4628      	mov	r0, r5
 80060b4:	f000 fc5e 	bl	8006974 <__mcmp>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	da65      	bge.n	8006188 <_dtoa_r+0x848>
 80060bc:	2300      	movs	r3, #0
 80060be:	4629      	mov	r1, r5
 80060c0:	220a      	movs	r2, #10
 80060c2:	4630      	mov	r0, r6
 80060c4:	f000 fa3a 	bl	800653c <__multadd>
 80060c8:	9b08      	ldr	r3, [sp, #32]
 80060ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060ce:	4605      	mov	r5, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 8192 	beq.w	80063fa <_dtoa_r+0xaba>
 80060d6:	4639      	mov	r1, r7
 80060d8:	2300      	movs	r3, #0
 80060da:	220a      	movs	r2, #10
 80060dc:	4630      	mov	r0, r6
 80060de:	f000 fa2d 	bl	800653c <__multadd>
 80060e2:	f1ba 0f00 	cmp.w	sl, #0
 80060e6:	4607      	mov	r7, r0
 80060e8:	f300 808e 	bgt.w	8006208 <_dtoa_r+0x8c8>
 80060ec:	9b07      	ldr	r3, [sp, #28]
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	dc51      	bgt.n	8006196 <_dtoa_r+0x856>
 80060f2:	e089      	b.n	8006208 <_dtoa_r+0x8c8>
 80060f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80060fa:	e751      	b.n	8005fa0 <_dtoa_r+0x660>
 80060fc:	f109 34ff 	add.w	r4, r9, #4294967295
 8006100:	42a3      	cmp	r3, r4
 8006102:	bfbf      	itttt	lt
 8006104:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006106:	1ae3      	sublt	r3, r4, r3
 8006108:	18d2      	addlt	r2, r2, r3
 800610a:	4613      	movlt	r3, r2
 800610c:	bfb7      	itett	lt
 800610e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006110:	1b1c      	subge	r4, r3, r4
 8006112:	4623      	movlt	r3, r4
 8006114:	2400      	movlt	r4, #0
 8006116:	f1b9 0f00 	cmp.w	r9, #0
 800611a:	bfb5      	itete	lt
 800611c:	9a05      	ldrlt	r2, [sp, #20]
 800611e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8006122:	eba2 0809 	sublt.w	r8, r2, r9
 8006126:	464a      	movge	r2, r9
 8006128:	bfb8      	it	lt
 800612a:	2200      	movlt	r2, #0
 800612c:	e73b      	b.n	8005fa6 <_dtoa_r+0x666>
 800612e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8006132:	9f08      	ldr	r7, [sp, #32]
 8006134:	461c      	mov	r4, r3
 8006136:	e743      	b.n	8005fc0 <_dtoa_r+0x680>
 8006138:	461a      	mov	r2, r3
 800613a:	e76f      	b.n	800601c <_dtoa_r+0x6dc>
 800613c:	9b07      	ldr	r3, [sp, #28]
 800613e:	2b01      	cmp	r3, #1
 8006140:	dc18      	bgt.n	8006174 <_dtoa_r+0x834>
 8006142:	9b02      	ldr	r3, [sp, #8]
 8006144:	b9b3      	cbnz	r3, 8006174 <_dtoa_r+0x834>
 8006146:	9b03      	ldr	r3, [sp, #12]
 8006148:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800614c:	b9a2      	cbnz	r2, 8006178 <_dtoa_r+0x838>
 800614e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006152:	0d12      	lsrs	r2, r2, #20
 8006154:	0512      	lsls	r2, r2, #20
 8006156:	b18a      	cbz	r2, 800617c <_dtoa_r+0x83c>
 8006158:	9b05      	ldr	r3, [sp, #20]
 800615a:	3301      	adds	r3, #1
 800615c:	9305      	str	r3, [sp, #20]
 800615e:	9b06      	ldr	r3, [sp, #24]
 8006160:	3301      	adds	r3, #1
 8006162:	9306      	str	r3, [sp, #24]
 8006164:	2301      	movs	r3, #1
 8006166:	930a      	str	r3, [sp, #40]	; 0x28
 8006168:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800616a:	2b00      	cmp	r3, #0
 800616c:	f47f af6f 	bne.w	800604e <_dtoa_r+0x70e>
 8006170:	2001      	movs	r0, #1
 8006172:	e774      	b.n	800605e <_dtoa_r+0x71e>
 8006174:	2300      	movs	r3, #0
 8006176:	e7f6      	b.n	8006166 <_dtoa_r+0x826>
 8006178:	9b02      	ldr	r3, [sp, #8]
 800617a:	e7f4      	b.n	8006166 <_dtoa_r+0x826>
 800617c:	920a      	str	r2, [sp, #40]	; 0x28
 800617e:	e7f3      	b.n	8006168 <_dtoa_r+0x828>
 8006180:	d081      	beq.n	8006086 <_dtoa_r+0x746>
 8006182:	4610      	mov	r0, r2
 8006184:	301c      	adds	r0, #28
 8006186:	e777      	b.n	8006078 <_dtoa_r+0x738>
 8006188:	f1b9 0f00 	cmp.w	r9, #0
 800618c:	dc37      	bgt.n	80061fe <_dtoa_r+0x8be>
 800618e:	9b07      	ldr	r3, [sp, #28]
 8006190:	2b02      	cmp	r3, #2
 8006192:	dd34      	ble.n	80061fe <_dtoa_r+0x8be>
 8006194:	46ca      	mov	sl, r9
 8006196:	f1ba 0f00 	cmp.w	sl, #0
 800619a:	d10d      	bne.n	80061b8 <_dtoa_r+0x878>
 800619c:	4621      	mov	r1, r4
 800619e:	4653      	mov	r3, sl
 80061a0:	2205      	movs	r2, #5
 80061a2:	4630      	mov	r0, r6
 80061a4:	f000 f9ca 	bl	800653c <__multadd>
 80061a8:	4601      	mov	r1, r0
 80061aa:	4604      	mov	r4, r0
 80061ac:	4628      	mov	r0, r5
 80061ae:	f000 fbe1 	bl	8006974 <__mcmp>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	f73f adde 	bgt.w	8005d74 <_dtoa_r+0x434>
 80061b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ba:	f8dd 8000 	ldr.w	r8, [sp]
 80061be:	ea6f 0b03 	mvn.w	fp, r3
 80061c2:	f04f 0900 	mov.w	r9, #0
 80061c6:	4621      	mov	r1, r4
 80061c8:	4630      	mov	r0, r6
 80061ca:	f000 f995 	bl	80064f8 <_Bfree>
 80061ce:	2f00      	cmp	r7, #0
 80061d0:	f43f aea7 	beq.w	8005f22 <_dtoa_r+0x5e2>
 80061d4:	f1b9 0f00 	cmp.w	r9, #0
 80061d8:	d005      	beq.n	80061e6 <_dtoa_r+0x8a6>
 80061da:	45b9      	cmp	r9, r7
 80061dc:	d003      	beq.n	80061e6 <_dtoa_r+0x8a6>
 80061de:	4649      	mov	r1, r9
 80061e0:	4630      	mov	r0, r6
 80061e2:	f000 f989 	bl	80064f8 <_Bfree>
 80061e6:	4639      	mov	r1, r7
 80061e8:	4630      	mov	r0, r6
 80061ea:	f000 f985 	bl	80064f8 <_Bfree>
 80061ee:	e698      	b.n	8005f22 <_dtoa_r+0x5e2>
 80061f0:	2400      	movs	r4, #0
 80061f2:	4627      	mov	r7, r4
 80061f4:	e7e0      	b.n	80061b8 <_dtoa_r+0x878>
 80061f6:	46bb      	mov	fp, r7
 80061f8:	4604      	mov	r4, r0
 80061fa:	4607      	mov	r7, r0
 80061fc:	e5ba      	b.n	8005d74 <_dtoa_r+0x434>
 80061fe:	9b08      	ldr	r3, [sp, #32]
 8006200:	46ca      	mov	sl, r9
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 8100 	beq.w	8006408 <_dtoa_r+0xac8>
 8006208:	f1b8 0f00 	cmp.w	r8, #0
 800620c:	dd05      	ble.n	800621a <_dtoa_r+0x8da>
 800620e:	4639      	mov	r1, r7
 8006210:	4642      	mov	r2, r8
 8006212:	4630      	mov	r0, r6
 8006214:	f000 fb42 	bl	800689c <__lshift>
 8006218:	4607      	mov	r7, r0
 800621a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800621c:	2b00      	cmp	r3, #0
 800621e:	d05d      	beq.n	80062dc <_dtoa_r+0x99c>
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	4630      	mov	r0, r6
 8006224:	f000 f928 	bl	8006478 <_Balloc>
 8006228:	4680      	mov	r8, r0
 800622a:	b928      	cbnz	r0, 8006238 <_dtoa_r+0x8f8>
 800622c:	4b82      	ldr	r3, [pc, #520]	; (8006438 <_dtoa_r+0xaf8>)
 800622e:	4602      	mov	r2, r0
 8006230:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006234:	f7ff bb9a 	b.w	800596c <_dtoa_r+0x2c>
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	3202      	adds	r2, #2
 800623c:	0092      	lsls	r2, r2, #2
 800623e:	f107 010c 	add.w	r1, r7, #12
 8006242:	300c      	adds	r0, #12
 8006244:	f000 f90a 	bl	800645c <memcpy>
 8006248:	2201      	movs	r2, #1
 800624a:	4641      	mov	r1, r8
 800624c:	4630      	mov	r0, r6
 800624e:	f000 fb25 	bl	800689c <__lshift>
 8006252:	9b00      	ldr	r3, [sp, #0]
 8006254:	3301      	adds	r3, #1
 8006256:	9305      	str	r3, [sp, #20]
 8006258:	9b00      	ldr	r3, [sp, #0]
 800625a:	4453      	add	r3, sl
 800625c:	9309      	str	r3, [sp, #36]	; 0x24
 800625e:	9b02      	ldr	r3, [sp, #8]
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	46b9      	mov	r9, r7
 8006266:	9308      	str	r3, [sp, #32]
 8006268:	4607      	mov	r7, r0
 800626a:	9b05      	ldr	r3, [sp, #20]
 800626c:	4621      	mov	r1, r4
 800626e:	3b01      	subs	r3, #1
 8006270:	4628      	mov	r0, r5
 8006272:	9302      	str	r3, [sp, #8]
 8006274:	f7ff fad6 	bl	8005824 <quorem>
 8006278:	4603      	mov	r3, r0
 800627a:	3330      	adds	r3, #48	; 0x30
 800627c:	9006      	str	r0, [sp, #24]
 800627e:	4649      	mov	r1, r9
 8006280:	4628      	mov	r0, r5
 8006282:	930a      	str	r3, [sp, #40]	; 0x28
 8006284:	f000 fb76 	bl	8006974 <__mcmp>
 8006288:	463a      	mov	r2, r7
 800628a:	4682      	mov	sl, r0
 800628c:	4621      	mov	r1, r4
 800628e:	4630      	mov	r0, r6
 8006290:	f000 fb8c 	bl	80069ac <__mdiff>
 8006294:	68c2      	ldr	r2, [r0, #12]
 8006296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006298:	4680      	mov	r8, r0
 800629a:	bb0a      	cbnz	r2, 80062e0 <_dtoa_r+0x9a0>
 800629c:	4601      	mov	r1, r0
 800629e:	4628      	mov	r0, r5
 80062a0:	f000 fb68 	bl	8006974 <__mcmp>
 80062a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062a6:	4602      	mov	r2, r0
 80062a8:	4641      	mov	r1, r8
 80062aa:	4630      	mov	r0, r6
 80062ac:	920e      	str	r2, [sp, #56]	; 0x38
 80062ae:	930a      	str	r3, [sp, #40]	; 0x28
 80062b0:	f000 f922 	bl	80064f8 <_Bfree>
 80062b4:	9b07      	ldr	r3, [sp, #28]
 80062b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062b8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80062bc:	ea43 0102 	orr.w	r1, r3, r2
 80062c0:	9b08      	ldr	r3, [sp, #32]
 80062c2:	430b      	orrs	r3, r1
 80062c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062c6:	d10d      	bne.n	80062e4 <_dtoa_r+0x9a4>
 80062c8:	2b39      	cmp	r3, #57	; 0x39
 80062ca:	d029      	beq.n	8006320 <_dtoa_r+0x9e0>
 80062cc:	f1ba 0f00 	cmp.w	sl, #0
 80062d0:	dd01      	ble.n	80062d6 <_dtoa_r+0x996>
 80062d2:	9b06      	ldr	r3, [sp, #24]
 80062d4:	3331      	adds	r3, #49	; 0x31
 80062d6:	9a02      	ldr	r2, [sp, #8]
 80062d8:	7013      	strb	r3, [r2, #0]
 80062da:	e774      	b.n	80061c6 <_dtoa_r+0x886>
 80062dc:	4638      	mov	r0, r7
 80062de:	e7b8      	b.n	8006252 <_dtoa_r+0x912>
 80062e0:	2201      	movs	r2, #1
 80062e2:	e7e1      	b.n	80062a8 <_dtoa_r+0x968>
 80062e4:	f1ba 0f00 	cmp.w	sl, #0
 80062e8:	db06      	blt.n	80062f8 <_dtoa_r+0x9b8>
 80062ea:	9907      	ldr	r1, [sp, #28]
 80062ec:	ea41 0a0a 	orr.w	sl, r1, sl
 80062f0:	9908      	ldr	r1, [sp, #32]
 80062f2:	ea5a 0101 	orrs.w	r1, sl, r1
 80062f6:	d120      	bne.n	800633a <_dtoa_r+0x9fa>
 80062f8:	2a00      	cmp	r2, #0
 80062fa:	ddec      	ble.n	80062d6 <_dtoa_r+0x996>
 80062fc:	4629      	mov	r1, r5
 80062fe:	2201      	movs	r2, #1
 8006300:	4630      	mov	r0, r6
 8006302:	9305      	str	r3, [sp, #20]
 8006304:	f000 faca 	bl	800689c <__lshift>
 8006308:	4621      	mov	r1, r4
 800630a:	4605      	mov	r5, r0
 800630c:	f000 fb32 	bl	8006974 <__mcmp>
 8006310:	2800      	cmp	r0, #0
 8006312:	9b05      	ldr	r3, [sp, #20]
 8006314:	dc02      	bgt.n	800631c <_dtoa_r+0x9dc>
 8006316:	d1de      	bne.n	80062d6 <_dtoa_r+0x996>
 8006318:	07da      	lsls	r2, r3, #31
 800631a:	d5dc      	bpl.n	80062d6 <_dtoa_r+0x996>
 800631c:	2b39      	cmp	r3, #57	; 0x39
 800631e:	d1d8      	bne.n	80062d2 <_dtoa_r+0x992>
 8006320:	9a02      	ldr	r2, [sp, #8]
 8006322:	2339      	movs	r3, #57	; 0x39
 8006324:	7013      	strb	r3, [r2, #0]
 8006326:	4643      	mov	r3, r8
 8006328:	4698      	mov	r8, r3
 800632a:	3b01      	subs	r3, #1
 800632c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8006330:	2a39      	cmp	r2, #57	; 0x39
 8006332:	d051      	beq.n	80063d8 <_dtoa_r+0xa98>
 8006334:	3201      	adds	r2, #1
 8006336:	701a      	strb	r2, [r3, #0]
 8006338:	e745      	b.n	80061c6 <_dtoa_r+0x886>
 800633a:	2a00      	cmp	r2, #0
 800633c:	dd03      	ble.n	8006346 <_dtoa_r+0xa06>
 800633e:	2b39      	cmp	r3, #57	; 0x39
 8006340:	d0ee      	beq.n	8006320 <_dtoa_r+0x9e0>
 8006342:	3301      	adds	r3, #1
 8006344:	e7c7      	b.n	80062d6 <_dtoa_r+0x996>
 8006346:	9a05      	ldr	r2, [sp, #20]
 8006348:	9909      	ldr	r1, [sp, #36]	; 0x24
 800634a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800634e:	428a      	cmp	r2, r1
 8006350:	d02b      	beq.n	80063aa <_dtoa_r+0xa6a>
 8006352:	4629      	mov	r1, r5
 8006354:	2300      	movs	r3, #0
 8006356:	220a      	movs	r2, #10
 8006358:	4630      	mov	r0, r6
 800635a:	f000 f8ef 	bl	800653c <__multadd>
 800635e:	45b9      	cmp	r9, r7
 8006360:	4605      	mov	r5, r0
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	f04f 020a 	mov.w	r2, #10
 800636a:	4649      	mov	r1, r9
 800636c:	4630      	mov	r0, r6
 800636e:	d107      	bne.n	8006380 <_dtoa_r+0xa40>
 8006370:	f000 f8e4 	bl	800653c <__multadd>
 8006374:	4681      	mov	r9, r0
 8006376:	4607      	mov	r7, r0
 8006378:	9b05      	ldr	r3, [sp, #20]
 800637a:	3301      	adds	r3, #1
 800637c:	9305      	str	r3, [sp, #20]
 800637e:	e774      	b.n	800626a <_dtoa_r+0x92a>
 8006380:	f000 f8dc 	bl	800653c <__multadd>
 8006384:	4639      	mov	r1, r7
 8006386:	4681      	mov	r9, r0
 8006388:	2300      	movs	r3, #0
 800638a:	220a      	movs	r2, #10
 800638c:	4630      	mov	r0, r6
 800638e:	f000 f8d5 	bl	800653c <__multadd>
 8006392:	4607      	mov	r7, r0
 8006394:	e7f0      	b.n	8006378 <_dtoa_r+0xa38>
 8006396:	f1ba 0f00 	cmp.w	sl, #0
 800639a:	9a00      	ldr	r2, [sp, #0]
 800639c:	bfcc      	ite	gt
 800639e:	46d0      	movgt	r8, sl
 80063a0:	f04f 0801 	movle.w	r8, #1
 80063a4:	4490      	add	r8, r2
 80063a6:	f04f 0900 	mov.w	r9, #0
 80063aa:	4629      	mov	r1, r5
 80063ac:	2201      	movs	r2, #1
 80063ae:	4630      	mov	r0, r6
 80063b0:	9302      	str	r3, [sp, #8]
 80063b2:	f000 fa73 	bl	800689c <__lshift>
 80063b6:	4621      	mov	r1, r4
 80063b8:	4605      	mov	r5, r0
 80063ba:	f000 fadb 	bl	8006974 <__mcmp>
 80063be:	2800      	cmp	r0, #0
 80063c0:	dcb1      	bgt.n	8006326 <_dtoa_r+0x9e6>
 80063c2:	d102      	bne.n	80063ca <_dtoa_r+0xa8a>
 80063c4:	9b02      	ldr	r3, [sp, #8]
 80063c6:	07db      	lsls	r3, r3, #31
 80063c8:	d4ad      	bmi.n	8006326 <_dtoa_r+0x9e6>
 80063ca:	4643      	mov	r3, r8
 80063cc:	4698      	mov	r8, r3
 80063ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063d2:	2a30      	cmp	r2, #48	; 0x30
 80063d4:	d0fa      	beq.n	80063cc <_dtoa_r+0xa8c>
 80063d6:	e6f6      	b.n	80061c6 <_dtoa_r+0x886>
 80063d8:	9a00      	ldr	r2, [sp, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d1a4      	bne.n	8006328 <_dtoa_r+0x9e8>
 80063de:	f10b 0b01 	add.w	fp, fp, #1
 80063e2:	2331      	movs	r3, #49	; 0x31
 80063e4:	e778      	b.n	80062d8 <_dtoa_r+0x998>
 80063e6:	4b15      	ldr	r3, [pc, #84]	; (800643c <_dtoa_r+0xafc>)
 80063e8:	f7ff bb12 	b.w	8005a10 <_dtoa_r+0xd0>
 80063ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f47f aaee 	bne.w	80059d0 <_dtoa_r+0x90>
 80063f4:	4b12      	ldr	r3, [pc, #72]	; (8006440 <_dtoa_r+0xb00>)
 80063f6:	f7ff bb0b 	b.w	8005a10 <_dtoa_r+0xd0>
 80063fa:	f1ba 0f00 	cmp.w	sl, #0
 80063fe:	dc03      	bgt.n	8006408 <_dtoa_r+0xac8>
 8006400:	9b07      	ldr	r3, [sp, #28]
 8006402:	2b02      	cmp	r3, #2
 8006404:	f73f aec7 	bgt.w	8006196 <_dtoa_r+0x856>
 8006408:	f8dd 8000 	ldr.w	r8, [sp]
 800640c:	4621      	mov	r1, r4
 800640e:	4628      	mov	r0, r5
 8006410:	f7ff fa08 	bl	8005824 <quorem>
 8006414:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006418:	f808 3b01 	strb.w	r3, [r8], #1
 800641c:	9a00      	ldr	r2, [sp, #0]
 800641e:	eba8 0202 	sub.w	r2, r8, r2
 8006422:	4592      	cmp	sl, r2
 8006424:	ddb7      	ble.n	8006396 <_dtoa_r+0xa56>
 8006426:	4629      	mov	r1, r5
 8006428:	2300      	movs	r3, #0
 800642a:	220a      	movs	r2, #10
 800642c:	4630      	mov	r0, r6
 800642e:	f000 f885 	bl	800653c <__multadd>
 8006432:	4605      	mov	r5, r0
 8006434:	e7ea      	b.n	800640c <_dtoa_r+0xacc>
 8006436:	bf00      	nop
 8006438:	08007cd3 	.word	0x08007cd3
 800643c:	08007c2c 	.word	0x08007c2c
 8006440:	08007c50 	.word	0x08007c50

08006444 <_localeconv_r>:
 8006444:	4800      	ldr	r0, [pc, #0]	; (8006448 <_localeconv_r+0x4>)
 8006446:	4770      	bx	lr
 8006448:	20000160 	.word	0x20000160

0800644c <malloc>:
 800644c:	4b02      	ldr	r3, [pc, #8]	; (8006458 <malloc+0xc>)
 800644e:	4601      	mov	r1, r0
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	f000 bbef 	b.w	8006c34 <_malloc_r>
 8006456:	bf00      	nop
 8006458:	2000000c 	.word	0x2000000c

0800645c <memcpy>:
 800645c:	440a      	add	r2, r1
 800645e:	4291      	cmp	r1, r2
 8006460:	f100 33ff 	add.w	r3, r0, #4294967295
 8006464:	d100      	bne.n	8006468 <memcpy+0xc>
 8006466:	4770      	bx	lr
 8006468:	b510      	push	{r4, lr}
 800646a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800646e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006472:	4291      	cmp	r1, r2
 8006474:	d1f9      	bne.n	800646a <memcpy+0xe>
 8006476:	bd10      	pop	{r4, pc}

08006478 <_Balloc>:
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800647c:	4604      	mov	r4, r0
 800647e:	460d      	mov	r5, r1
 8006480:	b976      	cbnz	r6, 80064a0 <_Balloc+0x28>
 8006482:	2010      	movs	r0, #16
 8006484:	f7ff ffe2 	bl	800644c <malloc>
 8006488:	4602      	mov	r2, r0
 800648a:	6260      	str	r0, [r4, #36]	; 0x24
 800648c:	b920      	cbnz	r0, 8006498 <_Balloc+0x20>
 800648e:	4b18      	ldr	r3, [pc, #96]	; (80064f0 <_Balloc+0x78>)
 8006490:	4818      	ldr	r0, [pc, #96]	; (80064f4 <_Balloc+0x7c>)
 8006492:	2166      	movs	r1, #102	; 0x66
 8006494:	f000 fd94 	bl	8006fc0 <__assert_func>
 8006498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800649c:	6006      	str	r6, [r0, #0]
 800649e:	60c6      	str	r6, [r0, #12]
 80064a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80064a2:	68f3      	ldr	r3, [r6, #12]
 80064a4:	b183      	cbz	r3, 80064c8 <_Balloc+0x50>
 80064a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064ae:	b9b8      	cbnz	r0, 80064e0 <_Balloc+0x68>
 80064b0:	2101      	movs	r1, #1
 80064b2:	fa01 f605 	lsl.w	r6, r1, r5
 80064b6:	1d72      	adds	r2, r6, #5
 80064b8:	0092      	lsls	r2, r2, #2
 80064ba:	4620      	mov	r0, r4
 80064bc:	f000 fb5a 	bl	8006b74 <_calloc_r>
 80064c0:	b160      	cbz	r0, 80064dc <_Balloc+0x64>
 80064c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064c6:	e00e      	b.n	80064e6 <_Balloc+0x6e>
 80064c8:	2221      	movs	r2, #33	; 0x21
 80064ca:	2104      	movs	r1, #4
 80064cc:	4620      	mov	r0, r4
 80064ce:	f000 fb51 	bl	8006b74 <_calloc_r>
 80064d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064d4:	60f0      	str	r0, [r6, #12]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1e4      	bne.n	80064a6 <_Balloc+0x2e>
 80064dc:	2000      	movs	r0, #0
 80064de:	bd70      	pop	{r4, r5, r6, pc}
 80064e0:	6802      	ldr	r2, [r0, #0]
 80064e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064e6:	2300      	movs	r3, #0
 80064e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064ec:	e7f7      	b.n	80064de <_Balloc+0x66>
 80064ee:	bf00      	nop
 80064f0:	08007c5d 	.word	0x08007c5d
 80064f4:	08007ce4 	.word	0x08007ce4

080064f8 <_Bfree>:
 80064f8:	b570      	push	{r4, r5, r6, lr}
 80064fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064fc:	4605      	mov	r5, r0
 80064fe:	460c      	mov	r4, r1
 8006500:	b976      	cbnz	r6, 8006520 <_Bfree+0x28>
 8006502:	2010      	movs	r0, #16
 8006504:	f7ff ffa2 	bl	800644c <malloc>
 8006508:	4602      	mov	r2, r0
 800650a:	6268      	str	r0, [r5, #36]	; 0x24
 800650c:	b920      	cbnz	r0, 8006518 <_Bfree+0x20>
 800650e:	4b09      	ldr	r3, [pc, #36]	; (8006534 <_Bfree+0x3c>)
 8006510:	4809      	ldr	r0, [pc, #36]	; (8006538 <_Bfree+0x40>)
 8006512:	218a      	movs	r1, #138	; 0x8a
 8006514:	f000 fd54 	bl	8006fc0 <__assert_func>
 8006518:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800651c:	6006      	str	r6, [r0, #0]
 800651e:	60c6      	str	r6, [r0, #12]
 8006520:	b13c      	cbz	r4, 8006532 <_Bfree+0x3a>
 8006522:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006524:	6862      	ldr	r2, [r4, #4]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800652c:	6021      	str	r1, [r4, #0]
 800652e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006532:	bd70      	pop	{r4, r5, r6, pc}
 8006534:	08007c5d 	.word	0x08007c5d
 8006538:	08007ce4 	.word	0x08007ce4

0800653c <__multadd>:
 800653c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006540:	690e      	ldr	r6, [r1, #16]
 8006542:	4607      	mov	r7, r0
 8006544:	4698      	mov	r8, r3
 8006546:	460c      	mov	r4, r1
 8006548:	f101 0014 	add.w	r0, r1, #20
 800654c:	2300      	movs	r3, #0
 800654e:	6805      	ldr	r5, [r0, #0]
 8006550:	b2a9      	uxth	r1, r5
 8006552:	fb02 8101 	mla	r1, r2, r1, r8
 8006556:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800655a:	0c2d      	lsrs	r5, r5, #16
 800655c:	fb02 c505 	mla	r5, r2, r5, ip
 8006560:	b289      	uxth	r1, r1
 8006562:	3301      	adds	r3, #1
 8006564:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006568:	429e      	cmp	r6, r3
 800656a:	f840 1b04 	str.w	r1, [r0], #4
 800656e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006572:	dcec      	bgt.n	800654e <__multadd+0x12>
 8006574:	f1b8 0f00 	cmp.w	r8, #0
 8006578:	d022      	beq.n	80065c0 <__multadd+0x84>
 800657a:	68a3      	ldr	r3, [r4, #8]
 800657c:	42b3      	cmp	r3, r6
 800657e:	dc19      	bgt.n	80065b4 <__multadd+0x78>
 8006580:	6861      	ldr	r1, [r4, #4]
 8006582:	4638      	mov	r0, r7
 8006584:	3101      	adds	r1, #1
 8006586:	f7ff ff77 	bl	8006478 <_Balloc>
 800658a:	4605      	mov	r5, r0
 800658c:	b928      	cbnz	r0, 800659a <__multadd+0x5e>
 800658e:	4602      	mov	r2, r0
 8006590:	4b0d      	ldr	r3, [pc, #52]	; (80065c8 <__multadd+0x8c>)
 8006592:	480e      	ldr	r0, [pc, #56]	; (80065cc <__multadd+0x90>)
 8006594:	21b5      	movs	r1, #181	; 0xb5
 8006596:	f000 fd13 	bl	8006fc0 <__assert_func>
 800659a:	6922      	ldr	r2, [r4, #16]
 800659c:	3202      	adds	r2, #2
 800659e:	f104 010c 	add.w	r1, r4, #12
 80065a2:	0092      	lsls	r2, r2, #2
 80065a4:	300c      	adds	r0, #12
 80065a6:	f7ff ff59 	bl	800645c <memcpy>
 80065aa:	4621      	mov	r1, r4
 80065ac:	4638      	mov	r0, r7
 80065ae:	f7ff ffa3 	bl	80064f8 <_Bfree>
 80065b2:	462c      	mov	r4, r5
 80065b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80065b8:	3601      	adds	r6, #1
 80065ba:	f8c3 8014 	str.w	r8, [r3, #20]
 80065be:	6126      	str	r6, [r4, #16]
 80065c0:	4620      	mov	r0, r4
 80065c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065c6:	bf00      	nop
 80065c8:	08007cd3 	.word	0x08007cd3
 80065cc:	08007ce4 	.word	0x08007ce4

080065d0 <__hi0bits>:
 80065d0:	0c03      	lsrs	r3, r0, #16
 80065d2:	041b      	lsls	r3, r3, #16
 80065d4:	b9d3      	cbnz	r3, 800660c <__hi0bits+0x3c>
 80065d6:	0400      	lsls	r0, r0, #16
 80065d8:	2310      	movs	r3, #16
 80065da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80065de:	bf04      	itt	eq
 80065e0:	0200      	lsleq	r0, r0, #8
 80065e2:	3308      	addeq	r3, #8
 80065e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80065e8:	bf04      	itt	eq
 80065ea:	0100      	lsleq	r0, r0, #4
 80065ec:	3304      	addeq	r3, #4
 80065ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80065f2:	bf04      	itt	eq
 80065f4:	0080      	lsleq	r0, r0, #2
 80065f6:	3302      	addeq	r3, #2
 80065f8:	2800      	cmp	r0, #0
 80065fa:	db05      	blt.n	8006608 <__hi0bits+0x38>
 80065fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006600:	f103 0301 	add.w	r3, r3, #1
 8006604:	bf08      	it	eq
 8006606:	2320      	moveq	r3, #32
 8006608:	4618      	mov	r0, r3
 800660a:	4770      	bx	lr
 800660c:	2300      	movs	r3, #0
 800660e:	e7e4      	b.n	80065da <__hi0bits+0xa>

08006610 <__lo0bits>:
 8006610:	6803      	ldr	r3, [r0, #0]
 8006612:	f013 0207 	ands.w	r2, r3, #7
 8006616:	4601      	mov	r1, r0
 8006618:	d00b      	beq.n	8006632 <__lo0bits+0x22>
 800661a:	07da      	lsls	r2, r3, #31
 800661c:	d424      	bmi.n	8006668 <__lo0bits+0x58>
 800661e:	0798      	lsls	r0, r3, #30
 8006620:	bf49      	itett	mi
 8006622:	085b      	lsrmi	r3, r3, #1
 8006624:	089b      	lsrpl	r3, r3, #2
 8006626:	2001      	movmi	r0, #1
 8006628:	600b      	strmi	r3, [r1, #0]
 800662a:	bf5c      	itt	pl
 800662c:	600b      	strpl	r3, [r1, #0]
 800662e:	2002      	movpl	r0, #2
 8006630:	4770      	bx	lr
 8006632:	b298      	uxth	r0, r3
 8006634:	b9b0      	cbnz	r0, 8006664 <__lo0bits+0x54>
 8006636:	0c1b      	lsrs	r3, r3, #16
 8006638:	2010      	movs	r0, #16
 800663a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800663e:	bf04      	itt	eq
 8006640:	0a1b      	lsreq	r3, r3, #8
 8006642:	3008      	addeq	r0, #8
 8006644:	071a      	lsls	r2, r3, #28
 8006646:	bf04      	itt	eq
 8006648:	091b      	lsreq	r3, r3, #4
 800664a:	3004      	addeq	r0, #4
 800664c:	079a      	lsls	r2, r3, #30
 800664e:	bf04      	itt	eq
 8006650:	089b      	lsreq	r3, r3, #2
 8006652:	3002      	addeq	r0, #2
 8006654:	07da      	lsls	r2, r3, #31
 8006656:	d403      	bmi.n	8006660 <__lo0bits+0x50>
 8006658:	085b      	lsrs	r3, r3, #1
 800665a:	f100 0001 	add.w	r0, r0, #1
 800665e:	d005      	beq.n	800666c <__lo0bits+0x5c>
 8006660:	600b      	str	r3, [r1, #0]
 8006662:	4770      	bx	lr
 8006664:	4610      	mov	r0, r2
 8006666:	e7e8      	b.n	800663a <__lo0bits+0x2a>
 8006668:	2000      	movs	r0, #0
 800666a:	4770      	bx	lr
 800666c:	2020      	movs	r0, #32
 800666e:	4770      	bx	lr

08006670 <__i2b>:
 8006670:	b510      	push	{r4, lr}
 8006672:	460c      	mov	r4, r1
 8006674:	2101      	movs	r1, #1
 8006676:	f7ff feff 	bl	8006478 <_Balloc>
 800667a:	4602      	mov	r2, r0
 800667c:	b928      	cbnz	r0, 800668a <__i2b+0x1a>
 800667e:	4b05      	ldr	r3, [pc, #20]	; (8006694 <__i2b+0x24>)
 8006680:	4805      	ldr	r0, [pc, #20]	; (8006698 <__i2b+0x28>)
 8006682:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006686:	f000 fc9b 	bl	8006fc0 <__assert_func>
 800668a:	2301      	movs	r3, #1
 800668c:	6144      	str	r4, [r0, #20]
 800668e:	6103      	str	r3, [r0, #16]
 8006690:	bd10      	pop	{r4, pc}
 8006692:	bf00      	nop
 8006694:	08007cd3 	.word	0x08007cd3
 8006698:	08007ce4 	.word	0x08007ce4

0800669c <__multiply>:
 800669c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a0:	4614      	mov	r4, r2
 80066a2:	690a      	ldr	r2, [r1, #16]
 80066a4:	6923      	ldr	r3, [r4, #16]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	bfb8      	it	lt
 80066aa:	460b      	movlt	r3, r1
 80066ac:	460d      	mov	r5, r1
 80066ae:	bfbc      	itt	lt
 80066b0:	4625      	movlt	r5, r4
 80066b2:	461c      	movlt	r4, r3
 80066b4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80066b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80066bc:	68ab      	ldr	r3, [r5, #8]
 80066be:	6869      	ldr	r1, [r5, #4]
 80066c0:	eb0a 0709 	add.w	r7, sl, r9
 80066c4:	42bb      	cmp	r3, r7
 80066c6:	b085      	sub	sp, #20
 80066c8:	bfb8      	it	lt
 80066ca:	3101      	addlt	r1, #1
 80066cc:	f7ff fed4 	bl	8006478 <_Balloc>
 80066d0:	b930      	cbnz	r0, 80066e0 <__multiply+0x44>
 80066d2:	4602      	mov	r2, r0
 80066d4:	4b42      	ldr	r3, [pc, #264]	; (80067e0 <__multiply+0x144>)
 80066d6:	4843      	ldr	r0, [pc, #268]	; (80067e4 <__multiply+0x148>)
 80066d8:	f240 115d 	movw	r1, #349	; 0x15d
 80066dc:	f000 fc70 	bl	8006fc0 <__assert_func>
 80066e0:	f100 0614 	add.w	r6, r0, #20
 80066e4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80066e8:	4633      	mov	r3, r6
 80066ea:	2200      	movs	r2, #0
 80066ec:	4543      	cmp	r3, r8
 80066ee:	d31e      	bcc.n	800672e <__multiply+0x92>
 80066f0:	f105 0c14 	add.w	ip, r5, #20
 80066f4:	f104 0314 	add.w	r3, r4, #20
 80066f8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80066fc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006700:	9202      	str	r2, [sp, #8]
 8006702:	ebac 0205 	sub.w	r2, ip, r5
 8006706:	3a15      	subs	r2, #21
 8006708:	f022 0203 	bic.w	r2, r2, #3
 800670c:	3204      	adds	r2, #4
 800670e:	f105 0115 	add.w	r1, r5, #21
 8006712:	458c      	cmp	ip, r1
 8006714:	bf38      	it	cc
 8006716:	2204      	movcc	r2, #4
 8006718:	9201      	str	r2, [sp, #4]
 800671a:	9a02      	ldr	r2, [sp, #8]
 800671c:	9303      	str	r3, [sp, #12]
 800671e:	429a      	cmp	r2, r3
 8006720:	d808      	bhi.n	8006734 <__multiply+0x98>
 8006722:	2f00      	cmp	r7, #0
 8006724:	dc55      	bgt.n	80067d2 <__multiply+0x136>
 8006726:	6107      	str	r7, [r0, #16]
 8006728:	b005      	add	sp, #20
 800672a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800672e:	f843 2b04 	str.w	r2, [r3], #4
 8006732:	e7db      	b.n	80066ec <__multiply+0x50>
 8006734:	f8b3 a000 	ldrh.w	sl, [r3]
 8006738:	f1ba 0f00 	cmp.w	sl, #0
 800673c:	d020      	beq.n	8006780 <__multiply+0xe4>
 800673e:	f105 0e14 	add.w	lr, r5, #20
 8006742:	46b1      	mov	r9, r6
 8006744:	2200      	movs	r2, #0
 8006746:	f85e 4b04 	ldr.w	r4, [lr], #4
 800674a:	f8d9 b000 	ldr.w	fp, [r9]
 800674e:	b2a1      	uxth	r1, r4
 8006750:	fa1f fb8b 	uxth.w	fp, fp
 8006754:	fb0a b101 	mla	r1, sl, r1, fp
 8006758:	4411      	add	r1, r2
 800675a:	f8d9 2000 	ldr.w	r2, [r9]
 800675e:	0c24      	lsrs	r4, r4, #16
 8006760:	0c12      	lsrs	r2, r2, #16
 8006762:	fb0a 2404 	mla	r4, sl, r4, r2
 8006766:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800676a:	b289      	uxth	r1, r1
 800676c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006770:	45f4      	cmp	ip, lr
 8006772:	f849 1b04 	str.w	r1, [r9], #4
 8006776:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800677a:	d8e4      	bhi.n	8006746 <__multiply+0xaa>
 800677c:	9901      	ldr	r1, [sp, #4]
 800677e:	5072      	str	r2, [r6, r1]
 8006780:	9a03      	ldr	r2, [sp, #12]
 8006782:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006786:	3304      	adds	r3, #4
 8006788:	f1b9 0f00 	cmp.w	r9, #0
 800678c:	d01f      	beq.n	80067ce <__multiply+0x132>
 800678e:	6834      	ldr	r4, [r6, #0]
 8006790:	f105 0114 	add.w	r1, r5, #20
 8006794:	46b6      	mov	lr, r6
 8006796:	f04f 0a00 	mov.w	sl, #0
 800679a:	880a      	ldrh	r2, [r1, #0]
 800679c:	f8be b002 	ldrh.w	fp, [lr, #2]
 80067a0:	fb09 b202 	mla	r2, r9, r2, fp
 80067a4:	4492      	add	sl, r2
 80067a6:	b2a4      	uxth	r4, r4
 80067a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80067ac:	f84e 4b04 	str.w	r4, [lr], #4
 80067b0:	f851 4b04 	ldr.w	r4, [r1], #4
 80067b4:	f8be 2000 	ldrh.w	r2, [lr]
 80067b8:	0c24      	lsrs	r4, r4, #16
 80067ba:	fb09 2404 	mla	r4, r9, r4, r2
 80067be:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80067c2:	458c      	cmp	ip, r1
 80067c4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80067c8:	d8e7      	bhi.n	800679a <__multiply+0xfe>
 80067ca:	9a01      	ldr	r2, [sp, #4]
 80067cc:	50b4      	str	r4, [r6, r2]
 80067ce:	3604      	adds	r6, #4
 80067d0:	e7a3      	b.n	800671a <__multiply+0x7e>
 80067d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1a5      	bne.n	8006726 <__multiply+0x8a>
 80067da:	3f01      	subs	r7, #1
 80067dc:	e7a1      	b.n	8006722 <__multiply+0x86>
 80067de:	bf00      	nop
 80067e0:	08007cd3 	.word	0x08007cd3
 80067e4:	08007ce4 	.word	0x08007ce4

080067e8 <__pow5mult>:
 80067e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067ec:	4615      	mov	r5, r2
 80067ee:	f012 0203 	ands.w	r2, r2, #3
 80067f2:	4606      	mov	r6, r0
 80067f4:	460f      	mov	r7, r1
 80067f6:	d007      	beq.n	8006808 <__pow5mult+0x20>
 80067f8:	4c25      	ldr	r4, [pc, #148]	; (8006890 <__pow5mult+0xa8>)
 80067fa:	3a01      	subs	r2, #1
 80067fc:	2300      	movs	r3, #0
 80067fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006802:	f7ff fe9b 	bl	800653c <__multadd>
 8006806:	4607      	mov	r7, r0
 8006808:	10ad      	asrs	r5, r5, #2
 800680a:	d03d      	beq.n	8006888 <__pow5mult+0xa0>
 800680c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800680e:	b97c      	cbnz	r4, 8006830 <__pow5mult+0x48>
 8006810:	2010      	movs	r0, #16
 8006812:	f7ff fe1b 	bl	800644c <malloc>
 8006816:	4602      	mov	r2, r0
 8006818:	6270      	str	r0, [r6, #36]	; 0x24
 800681a:	b928      	cbnz	r0, 8006828 <__pow5mult+0x40>
 800681c:	4b1d      	ldr	r3, [pc, #116]	; (8006894 <__pow5mult+0xac>)
 800681e:	481e      	ldr	r0, [pc, #120]	; (8006898 <__pow5mult+0xb0>)
 8006820:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006824:	f000 fbcc 	bl	8006fc0 <__assert_func>
 8006828:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800682c:	6004      	str	r4, [r0, #0]
 800682e:	60c4      	str	r4, [r0, #12]
 8006830:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006834:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006838:	b94c      	cbnz	r4, 800684e <__pow5mult+0x66>
 800683a:	f240 2171 	movw	r1, #625	; 0x271
 800683e:	4630      	mov	r0, r6
 8006840:	f7ff ff16 	bl	8006670 <__i2b>
 8006844:	2300      	movs	r3, #0
 8006846:	f8c8 0008 	str.w	r0, [r8, #8]
 800684a:	4604      	mov	r4, r0
 800684c:	6003      	str	r3, [r0, #0]
 800684e:	f04f 0900 	mov.w	r9, #0
 8006852:	07eb      	lsls	r3, r5, #31
 8006854:	d50a      	bpl.n	800686c <__pow5mult+0x84>
 8006856:	4639      	mov	r1, r7
 8006858:	4622      	mov	r2, r4
 800685a:	4630      	mov	r0, r6
 800685c:	f7ff ff1e 	bl	800669c <__multiply>
 8006860:	4639      	mov	r1, r7
 8006862:	4680      	mov	r8, r0
 8006864:	4630      	mov	r0, r6
 8006866:	f7ff fe47 	bl	80064f8 <_Bfree>
 800686a:	4647      	mov	r7, r8
 800686c:	106d      	asrs	r5, r5, #1
 800686e:	d00b      	beq.n	8006888 <__pow5mult+0xa0>
 8006870:	6820      	ldr	r0, [r4, #0]
 8006872:	b938      	cbnz	r0, 8006884 <__pow5mult+0x9c>
 8006874:	4622      	mov	r2, r4
 8006876:	4621      	mov	r1, r4
 8006878:	4630      	mov	r0, r6
 800687a:	f7ff ff0f 	bl	800669c <__multiply>
 800687e:	6020      	str	r0, [r4, #0]
 8006880:	f8c0 9000 	str.w	r9, [r0]
 8006884:	4604      	mov	r4, r0
 8006886:	e7e4      	b.n	8006852 <__pow5mult+0x6a>
 8006888:	4638      	mov	r0, r7
 800688a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800688e:	bf00      	nop
 8006890:	08007e38 	.word	0x08007e38
 8006894:	08007c5d 	.word	0x08007c5d
 8006898:	08007ce4 	.word	0x08007ce4

0800689c <__lshift>:
 800689c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a0:	460c      	mov	r4, r1
 80068a2:	6849      	ldr	r1, [r1, #4]
 80068a4:	6923      	ldr	r3, [r4, #16]
 80068a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068aa:	68a3      	ldr	r3, [r4, #8]
 80068ac:	4607      	mov	r7, r0
 80068ae:	4691      	mov	r9, r2
 80068b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068b4:	f108 0601 	add.w	r6, r8, #1
 80068b8:	42b3      	cmp	r3, r6
 80068ba:	db0b      	blt.n	80068d4 <__lshift+0x38>
 80068bc:	4638      	mov	r0, r7
 80068be:	f7ff fddb 	bl	8006478 <_Balloc>
 80068c2:	4605      	mov	r5, r0
 80068c4:	b948      	cbnz	r0, 80068da <__lshift+0x3e>
 80068c6:	4602      	mov	r2, r0
 80068c8:	4b28      	ldr	r3, [pc, #160]	; (800696c <__lshift+0xd0>)
 80068ca:	4829      	ldr	r0, [pc, #164]	; (8006970 <__lshift+0xd4>)
 80068cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80068d0:	f000 fb76 	bl	8006fc0 <__assert_func>
 80068d4:	3101      	adds	r1, #1
 80068d6:	005b      	lsls	r3, r3, #1
 80068d8:	e7ee      	b.n	80068b8 <__lshift+0x1c>
 80068da:	2300      	movs	r3, #0
 80068dc:	f100 0114 	add.w	r1, r0, #20
 80068e0:	f100 0210 	add.w	r2, r0, #16
 80068e4:	4618      	mov	r0, r3
 80068e6:	4553      	cmp	r3, sl
 80068e8:	db33      	blt.n	8006952 <__lshift+0xb6>
 80068ea:	6920      	ldr	r0, [r4, #16]
 80068ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068f0:	f104 0314 	add.w	r3, r4, #20
 80068f4:	f019 091f 	ands.w	r9, r9, #31
 80068f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006900:	d02b      	beq.n	800695a <__lshift+0xbe>
 8006902:	f1c9 0e20 	rsb	lr, r9, #32
 8006906:	468a      	mov	sl, r1
 8006908:	2200      	movs	r2, #0
 800690a:	6818      	ldr	r0, [r3, #0]
 800690c:	fa00 f009 	lsl.w	r0, r0, r9
 8006910:	4302      	orrs	r2, r0
 8006912:	f84a 2b04 	str.w	r2, [sl], #4
 8006916:	f853 2b04 	ldr.w	r2, [r3], #4
 800691a:	459c      	cmp	ip, r3
 800691c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006920:	d8f3      	bhi.n	800690a <__lshift+0x6e>
 8006922:	ebac 0304 	sub.w	r3, ip, r4
 8006926:	3b15      	subs	r3, #21
 8006928:	f023 0303 	bic.w	r3, r3, #3
 800692c:	3304      	adds	r3, #4
 800692e:	f104 0015 	add.w	r0, r4, #21
 8006932:	4584      	cmp	ip, r0
 8006934:	bf38      	it	cc
 8006936:	2304      	movcc	r3, #4
 8006938:	50ca      	str	r2, [r1, r3]
 800693a:	b10a      	cbz	r2, 8006940 <__lshift+0xa4>
 800693c:	f108 0602 	add.w	r6, r8, #2
 8006940:	3e01      	subs	r6, #1
 8006942:	4638      	mov	r0, r7
 8006944:	612e      	str	r6, [r5, #16]
 8006946:	4621      	mov	r1, r4
 8006948:	f7ff fdd6 	bl	80064f8 <_Bfree>
 800694c:	4628      	mov	r0, r5
 800694e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006952:	f842 0f04 	str.w	r0, [r2, #4]!
 8006956:	3301      	adds	r3, #1
 8006958:	e7c5      	b.n	80068e6 <__lshift+0x4a>
 800695a:	3904      	subs	r1, #4
 800695c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006960:	f841 2f04 	str.w	r2, [r1, #4]!
 8006964:	459c      	cmp	ip, r3
 8006966:	d8f9      	bhi.n	800695c <__lshift+0xc0>
 8006968:	e7ea      	b.n	8006940 <__lshift+0xa4>
 800696a:	bf00      	nop
 800696c:	08007cd3 	.word	0x08007cd3
 8006970:	08007ce4 	.word	0x08007ce4

08006974 <__mcmp>:
 8006974:	b530      	push	{r4, r5, lr}
 8006976:	6902      	ldr	r2, [r0, #16]
 8006978:	690c      	ldr	r4, [r1, #16]
 800697a:	1b12      	subs	r2, r2, r4
 800697c:	d10e      	bne.n	800699c <__mcmp+0x28>
 800697e:	f100 0314 	add.w	r3, r0, #20
 8006982:	3114      	adds	r1, #20
 8006984:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006988:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800698c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006990:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006994:	42a5      	cmp	r5, r4
 8006996:	d003      	beq.n	80069a0 <__mcmp+0x2c>
 8006998:	d305      	bcc.n	80069a6 <__mcmp+0x32>
 800699a:	2201      	movs	r2, #1
 800699c:	4610      	mov	r0, r2
 800699e:	bd30      	pop	{r4, r5, pc}
 80069a0:	4283      	cmp	r3, r0
 80069a2:	d3f3      	bcc.n	800698c <__mcmp+0x18>
 80069a4:	e7fa      	b.n	800699c <__mcmp+0x28>
 80069a6:	f04f 32ff 	mov.w	r2, #4294967295
 80069aa:	e7f7      	b.n	800699c <__mcmp+0x28>

080069ac <__mdiff>:
 80069ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b0:	460c      	mov	r4, r1
 80069b2:	4606      	mov	r6, r0
 80069b4:	4611      	mov	r1, r2
 80069b6:	4620      	mov	r0, r4
 80069b8:	4617      	mov	r7, r2
 80069ba:	f7ff ffdb 	bl	8006974 <__mcmp>
 80069be:	1e05      	subs	r5, r0, #0
 80069c0:	d110      	bne.n	80069e4 <__mdiff+0x38>
 80069c2:	4629      	mov	r1, r5
 80069c4:	4630      	mov	r0, r6
 80069c6:	f7ff fd57 	bl	8006478 <_Balloc>
 80069ca:	b930      	cbnz	r0, 80069da <__mdiff+0x2e>
 80069cc:	4b39      	ldr	r3, [pc, #228]	; (8006ab4 <__mdiff+0x108>)
 80069ce:	4602      	mov	r2, r0
 80069d0:	f240 2132 	movw	r1, #562	; 0x232
 80069d4:	4838      	ldr	r0, [pc, #224]	; (8006ab8 <__mdiff+0x10c>)
 80069d6:	f000 faf3 	bl	8006fc0 <__assert_func>
 80069da:	2301      	movs	r3, #1
 80069dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e4:	bfa4      	itt	ge
 80069e6:	463b      	movge	r3, r7
 80069e8:	4627      	movge	r7, r4
 80069ea:	4630      	mov	r0, r6
 80069ec:	6879      	ldr	r1, [r7, #4]
 80069ee:	bfa6      	itte	ge
 80069f0:	461c      	movge	r4, r3
 80069f2:	2500      	movge	r5, #0
 80069f4:	2501      	movlt	r5, #1
 80069f6:	f7ff fd3f 	bl	8006478 <_Balloc>
 80069fa:	b920      	cbnz	r0, 8006a06 <__mdiff+0x5a>
 80069fc:	4b2d      	ldr	r3, [pc, #180]	; (8006ab4 <__mdiff+0x108>)
 80069fe:	4602      	mov	r2, r0
 8006a00:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a04:	e7e6      	b.n	80069d4 <__mdiff+0x28>
 8006a06:	693e      	ldr	r6, [r7, #16]
 8006a08:	60c5      	str	r5, [r0, #12]
 8006a0a:	6925      	ldr	r5, [r4, #16]
 8006a0c:	f107 0114 	add.w	r1, r7, #20
 8006a10:	f104 0914 	add.w	r9, r4, #20
 8006a14:	f100 0e14 	add.w	lr, r0, #20
 8006a18:	f107 0210 	add.w	r2, r7, #16
 8006a1c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006a20:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006a24:	46f2      	mov	sl, lr
 8006a26:	2700      	movs	r7, #0
 8006a28:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a30:	fa1f f883 	uxth.w	r8, r3
 8006a34:	fa17 f78b 	uxtah	r7, r7, fp
 8006a38:	0c1b      	lsrs	r3, r3, #16
 8006a3a:	eba7 0808 	sub.w	r8, r7, r8
 8006a3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a46:	fa1f f888 	uxth.w	r8, r8
 8006a4a:	141f      	asrs	r7, r3, #16
 8006a4c:	454d      	cmp	r5, r9
 8006a4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a52:	f84a 3b04 	str.w	r3, [sl], #4
 8006a56:	d8e7      	bhi.n	8006a28 <__mdiff+0x7c>
 8006a58:	1b2b      	subs	r3, r5, r4
 8006a5a:	3b15      	subs	r3, #21
 8006a5c:	f023 0303 	bic.w	r3, r3, #3
 8006a60:	3304      	adds	r3, #4
 8006a62:	3415      	adds	r4, #21
 8006a64:	42a5      	cmp	r5, r4
 8006a66:	bf38      	it	cc
 8006a68:	2304      	movcc	r3, #4
 8006a6a:	4419      	add	r1, r3
 8006a6c:	4473      	add	r3, lr
 8006a6e:	469e      	mov	lr, r3
 8006a70:	460d      	mov	r5, r1
 8006a72:	4565      	cmp	r5, ip
 8006a74:	d30e      	bcc.n	8006a94 <__mdiff+0xe8>
 8006a76:	f10c 0203 	add.w	r2, ip, #3
 8006a7a:	1a52      	subs	r2, r2, r1
 8006a7c:	f022 0203 	bic.w	r2, r2, #3
 8006a80:	3903      	subs	r1, #3
 8006a82:	458c      	cmp	ip, r1
 8006a84:	bf38      	it	cc
 8006a86:	2200      	movcc	r2, #0
 8006a88:	441a      	add	r2, r3
 8006a8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006a8e:	b17b      	cbz	r3, 8006ab0 <__mdiff+0x104>
 8006a90:	6106      	str	r6, [r0, #16]
 8006a92:	e7a5      	b.n	80069e0 <__mdiff+0x34>
 8006a94:	f855 8b04 	ldr.w	r8, [r5], #4
 8006a98:	fa17 f488 	uxtah	r4, r7, r8
 8006a9c:	1422      	asrs	r2, r4, #16
 8006a9e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006aa2:	b2a4      	uxth	r4, r4
 8006aa4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006aa8:	f84e 4b04 	str.w	r4, [lr], #4
 8006aac:	1417      	asrs	r7, r2, #16
 8006aae:	e7e0      	b.n	8006a72 <__mdiff+0xc6>
 8006ab0:	3e01      	subs	r6, #1
 8006ab2:	e7ea      	b.n	8006a8a <__mdiff+0xde>
 8006ab4:	08007cd3 	.word	0x08007cd3
 8006ab8:	08007ce4 	.word	0x08007ce4

08006abc <__d2b>:
 8006abc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ac0:	4689      	mov	r9, r1
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	ec57 6b10 	vmov	r6, r7, d0
 8006ac8:	4690      	mov	r8, r2
 8006aca:	f7ff fcd5 	bl	8006478 <_Balloc>
 8006ace:	4604      	mov	r4, r0
 8006ad0:	b930      	cbnz	r0, 8006ae0 <__d2b+0x24>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	4b25      	ldr	r3, [pc, #148]	; (8006b6c <__d2b+0xb0>)
 8006ad6:	4826      	ldr	r0, [pc, #152]	; (8006b70 <__d2b+0xb4>)
 8006ad8:	f240 310a 	movw	r1, #778	; 0x30a
 8006adc:	f000 fa70 	bl	8006fc0 <__assert_func>
 8006ae0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006ae4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ae8:	bb35      	cbnz	r5, 8006b38 <__d2b+0x7c>
 8006aea:	2e00      	cmp	r6, #0
 8006aec:	9301      	str	r3, [sp, #4]
 8006aee:	d028      	beq.n	8006b42 <__d2b+0x86>
 8006af0:	4668      	mov	r0, sp
 8006af2:	9600      	str	r6, [sp, #0]
 8006af4:	f7ff fd8c 	bl	8006610 <__lo0bits>
 8006af8:	9900      	ldr	r1, [sp, #0]
 8006afa:	b300      	cbz	r0, 8006b3e <__d2b+0x82>
 8006afc:	9a01      	ldr	r2, [sp, #4]
 8006afe:	f1c0 0320 	rsb	r3, r0, #32
 8006b02:	fa02 f303 	lsl.w	r3, r2, r3
 8006b06:	430b      	orrs	r3, r1
 8006b08:	40c2      	lsrs	r2, r0
 8006b0a:	6163      	str	r3, [r4, #20]
 8006b0c:	9201      	str	r2, [sp, #4]
 8006b0e:	9b01      	ldr	r3, [sp, #4]
 8006b10:	61a3      	str	r3, [r4, #24]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	bf14      	ite	ne
 8006b16:	2202      	movne	r2, #2
 8006b18:	2201      	moveq	r2, #1
 8006b1a:	6122      	str	r2, [r4, #16]
 8006b1c:	b1d5      	cbz	r5, 8006b54 <__d2b+0x98>
 8006b1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b22:	4405      	add	r5, r0
 8006b24:	f8c9 5000 	str.w	r5, [r9]
 8006b28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b2c:	f8c8 0000 	str.w	r0, [r8]
 8006b30:	4620      	mov	r0, r4
 8006b32:	b003      	add	sp, #12
 8006b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b3c:	e7d5      	b.n	8006aea <__d2b+0x2e>
 8006b3e:	6161      	str	r1, [r4, #20]
 8006b40:	e7e5      	b.n	8006b0e <__d2b+0x52>
 8006b42:	a801      	add	r0, sp, #4
 8006b44:	f7ff fd64 	bl	8006610 <__lo0bits>
 8006b48:	9b01      	ldr	r3, [sp, #4]
 8006b4a:	6163      	str	r3, [r4, #20]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	6122      	str	r2, [r4, #16]
 8006b50:	3020      	adds	r0, #32
 8006b52:	e7e3      	b.n	8006b1c <__d2b+0x60>
 8006b54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b5c:	f8c9 0000 	str.w	r0, [r9]
 8006b60:	6918      	ldr	r0, [r3, #16]
 8006b62:	f7ff fd35 	bl	80065d0 <__hi0bits>
 8006b66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b6a:	e7df      	b.n	8006b2c <__d2b+0x70>
 8006b6c:	08007cd3 	.word	0x08007cd3
 8006b70:	08007ce4 	.word	0x08007ce4

08006b74 <_calloc_r>:
 8006b74:	b513      	push	{r0, r1, r4, lr}
 8006b76:	434a      	muls	r2, r1
 8006b78:	4611      	mov	r1, r2
 8006b7a:	9201      	str	r2, [sp, #4]
 8006b7c:	f000 f85a 	bl	8006c34 <_malloc_r>
 8006b80:	4604      	mov	r4, r0
 8006b82:	b118      	cbz	r0, 8006b8c <_calloc_r+0x18>
 8006b84:	9a01      	ldr	r2, [sp, #4]
 8006b86:	2100      	movs	r1, #0
 8006b88:	f7fe f9e0 	bl	8004f4c <memset>
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	b002      	add	sp, #8
 8006b90:	bd10      	pop	{r4, pc}
	...

08006b94 <_free_r>:
 8006b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b96:	2900      	cmp	r1, #0
 8006b98:	d048      	beq.n	8006c2c <_free_r+0x98>
 8006b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b9e:	9001      	str	r0, [sp, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ba6:	bfb8      	it	lt
 8006ba8:	18e4      	addlt	r4, r4, r3
 8006baa:	f000 fa65 	bl	8007078 <__malloc_lock>
 8006bae:	4a20      	ldr	r2, [pc, #128]	; (8006c30 <_free_r+0x9c>)
 8006bb0:	9801      	ldr	r0, [sp, #4]
 8006bb2:	6813      	ldr	r3, [r2, #0]
 8006bb4:	4615      	mov	r5, r2
 8006bb6:	b933      	cbnz	r3, 8006bc6 <_free_r+0x32>
 8006bb8:	6063      	str	r3, [r4, #4]
 8006bba:	6014      	str	r4, [r2, #0]
 8006bbc:	b003      	add	sp, #12
 8006bbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bc2:	f000 ba5f 	b.w	8007084 <__malloc_unlock>
 8006bc6:	42a3      	cmp	r3, r4
 8006bc8:	d90b      	bls.n	8006be2 <_free_r+0x4e>
 8006bca:	6821      	ldr	r1, [r4, #0]
 8006bcc:	1862      	adds	r2, r4, r1
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	bf04      	itt	eq
 8006bd2:	681a      	ldreq	r2, [r3, #0]
 8006bd4:	685b      	ldreq	r3, [r3, #4]
 8006bd6:	6063      	str	r3, [r4, #4]
 8006bd8:	bf04      	itt	eq
 8006bda:	1852      	addeq	r2, r2, r1
 8006bdc:	6022      	streq	r2, [r4, #0]
 8006bde:	602c      	str	r4, [r5, #0]
 8006be0:	e7ec      	b.n	8006bbc <_free_r+0x28>
 8006be2:	461a      	mov	r2, r3
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	b10b      	cbz	r3, 8006bec <_free_r+0x58>
 8006be8:	42a3      	cmp	r3, r4
 8006bea:	d9fa      	bls.n	8006be2 <_free_r+0x4e>
 8006bec:	6811      	ldr	r1, [r2, #0]
 8006bee:	1855      	adds	r5, r2, r1
 8006bf0:	42a5      	cmp	r5, r4
 8006bf2:	d10b      	bne.n	8006c0c <_free_r+0x78>
 8006bf4:	6824      	ldr	r4, [r4, #0]
 8006bf6:	4421      	add	r1, r4
 8006bf8:	1854      	adds	r4, r2, r1
 8006bfa:	42a3      	cmp	r3, r4
 8006bfc:	6011      	str	r1, [r2, #0]
 8006bfe:	d1dd      	bne.n	8006bbc <_free_r+0x28>
 8006c00:	681c      	ldr	r4, [r3, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	6053      	str	r3, [r2, #4]
 8006c06:	4421      	add	r1, r4
 8006c08:	6011      	str	r1, [r2, #0]
 8006c0a:	e7d7      	b.n	8006bbc <_free_r+0x28>
 8006c0c:	d902      	bls.n	8006c14 <_free_r+0x80>
 8006c0e:	230c      	movs	r3, #12
 8006c10:	6003      	str	r3, [r0, #0]
 8006c12:	e7d3      	b.n	8006bbc <_free_r+0x28>
 8006c14:	6825      	ldr	r5, [r4, #0]
 8006c16:	1961      	adds	r1, r4, r5
 8006c18:	428b      	cmp	r3, r1
 8006c1a:	bf04      	itt	eq
 8006c1c:	6819      	ldreq	r1, [r3, #0]
 8006c1e:	685b      	ldreq	r3, [r3, #4]
 8006c20:	6063      	str	r3, [r4, #4]
 8006c22:	bf04      	itt	eq
 8006c24:	1949      	addeq	r1, r1, r5
 8006c26:	6021      	streq	r1, [r4, #0]
 8006c28:	6054      	str	r4, [r2, #4]
 8006c2a:	e7c7      	b.n	8006bbc <_free_r+0x28>
 8006c2c:	b003      	add	sp, #12
 8006c2e:	bd30      	pop	{r4, r5, pc}
 8006c30:	20000204 	.word	0x20000204

08006c34 <_malloc_r>:
 8006c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c36:	1ccd      	adds	r5, r1, #3
 8006c38:	f025 0503 	bic.w	r5, r5, #3
 8006c3c:	3508      	adds	r5, #8
 8006c3e:	2d0c      	cmp	r5, #12
 8006c40:	bf38      	it	cc
 8006c42:	250c      	movcc	r5, #12
 8006c44:	2d00      	cmp	r5, #0
 8006c46:	4606      	mov	r6, r0
 8006c48:	db01      	blt.n	8006c4e <_malloc_r+0x1a>
 8006c4a:	42a9      	cmp	r1, r5
 8006c4c:	d903      	bls.n	8006c56 <_malloc_r+0x22>
 8006c4e:	230c      	movs	r3, #12
 8006c50:	6033      	str	r3, [r6, #0]
 8006c52:	2000      	movs	r0, #0
 8006c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c56:	f000 fa0f 	bl	8007078 <__malloc_lock>
 8006c5a:	4921      	ldr	r1, [pc, #132]	; (8006ce0 <_malloc_r+0xac>)
 8006c5c:	680a      	ldr	r2, [r1, #0]
 8006c5e:	4614      	mov	r4, r2
 8006c60:	b99c      	cbnz	r4, 8006c8a <_malloc_r+0x56>
 8006c62:	4f20      	ldr	r7, [pc, #128]	; (8006ce4 <_malloc_r+0xb0>)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	b923      	cbnz	r3, 8006c72 <_malloc_r+0x3e>
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f000 f998 	bl	8006fa0 <_sbrk_r>
 8006c70:	6038      	str	r0, [r7, #0]
 8006c72:	4629      	mov	r1, r5
 8006c74:	4630      	mov	r0, r6
 8006c76:	f000 f993 	bl	8006fa0 <_sbrk_r>
 8006c7a:	1c43      	adds	r3, r0, #1
 8006c7c:	d123      	bne.n	8006cc6 <_malloc_r+0x92>
 8006c7e:	230c      	movs	r3, #12
 8006c80:	6033      	str	r3, [r6, #0]
 8006c82:	4630      	mov	r0, r6
 8006c84:	f000 f9fe 	bl	8007084 <__malloc_unlock>
 8006c88:	e7e3      	b.n	8006c52 <_malloc_r+0x1e>
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	1b5b      	subs	r3, r3, r5
 8006c8e:	d417      	bmi.n	8006cc0 <_malloc_r+0x8c>
 8006c90:	2b0b      	cmp	r3, #11
 8006c92:	d903      	bls.n	8006c9c <_malloc_r+0x68>
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	441c      	add	r4, r3
 8006c98:	6025      	str	r5, [r4, #0]
 8006c9a:	e004      	b.n	8006ca6 <_malloc_r+0x72>
 8006c9c:	6863      	ldr	r3, [r4, #4]
 8006c9e:	42a2      	cmp	r2, r4
 8006ca0:	bf0c      	ite	eq
 8006ca2:	600b      	streq	r3, [r1, #0]
 8006ca4:	6053      	strne	r3, [r2, #4]
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	f000 f9ec 	bl	8007084 <__malloc_unlock>
 8006cac:	f104 000b 	add.w	r0, r4, #11
 8006cb0:	1d23      	adds	r3, r4, #4
 8006cb2:	f020 0007 	bic.w	r0, r0, #7
 8006cb6:	1ac2      	subs	r2, r0, r3
 8006cb8:	d0cc      	beq.n	8006c54 <_malloc_r+0x20>
 8006cba:	1a1b      	subs	r3, r3, r0
 8006cbc:	50a3      	str	r3, [r4, r2]
 8006cbe:	e7c9      	b.n	8006c54 <_malloc_r+0x20>
 8006cc0:	4622      	mov	r2, r4
 8006cc2:	6864      	ldr	r4, [r4, #4]
 8006cc4:	e7cc      	b.n	8006c60 <_malloc_r+0x2c>
 8006cc6:	1cc4      	adds	r4, r0, #3
 8006cc8:	f024 0403 	bic.w	r4, r4, #3
 8006ccc:	42a0      	cmp	r0, r4
 8006cce:	d0e3      	beq.n	8006c98 <_malloc_r+0x64>
 8006cd0:	1a21      	subs	r1, r4, r0
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f000 f964 	bl	8006fa0 <_sbrk_r>
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d1dd      	bne.n	8006c98 <_malloc_r+0x64>
 8006cdc:	e7cf      	b.n	8006c7e <_malloc_r+0x4a>
 8006cde:	bf00      	nop
 8006ce0:	20000204 	.word	0x20000204
 8006ce4:	20000208 	.word	0x20000208

08006ce8 <__ssputs_r>:
 8006ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cec:	688e      	ldr	r6, [r1, #8]
 8006cee:	429e      	cmp	r6, r3
 8006cf0:	4682      	mov	sl, r0
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	4690      	mov	r8, r2
 8006cf6:	461f      	mov	r7, r3
 8006cf8:	d838      	bhi.n	8006d6c <__ssputs_r+0x84>
 8006cfa:	898a      	ldrh	r2, [r1, #12]
 8006cfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d00:	d032      	beq.n	8006d68 <__ssputs_r+0x80>
 8006d02:	6825      	ldr	r5, [r4, #0]
 8006d04:	6909      	ldr	r1, [r1, #16]
 8006d06:	eba5 0901 	sub.w	r9, r5, r1
 8006d0a:	6965      	ldr	r5, [r4, #20]
 8006d0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d14:	3301      	adds	r3, #1
 8006d16:	444b      	add	r3, r9
 8006d18:	106d      	asrs	r5, r5, #1
 8006d1a:	429d      	cmp	r5, r3
 8006d1c:	bf38      	it	cc
 8006d1e:	461d      	movcc	r5, r3
 8006d20:	0553      	lsls	r3, r2, #21
 8006d22:	d531      	bpl.n	8006d88 <__ssputs_r+0xa0>
 8006d24:	4629      	mov	r1, r5
 8006d26:	f7ff ff85 	bl	8006c34 <_malloc_r>
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	b950      	cbnz	r0, 8006d44 <__ssputs_r+0x5c>
 8006d2e:	230c      	movs	r3, #12
 8006d30:	f8ca 3000 	str.w	r3, [sl]
 8006d34:	89a3      	ldrh	r3, [r4, #12]
 8006d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d3a:	81a3      	strh	r3, [r4, #12]
 8006d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d44:	6921      	ldr	r1, [r4, #16]
 8006d46:	464a      	mov	r2, r9
 8006d48:	f7ff fb88 	bl	800645c <memcpy>
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d56:	81a3      	strh	r3, [r4, #12]
 8006d58:	6126      	str	r6, [r4, #16]
 8006d5a:	6165      	str	r5, [r4, #20]
 8006d5c:	444e      	add	r6, r9
 8006d5e:	eba5 0509 	sub.w	r5, r5, r9
 8006d62:	6026      	str	r6, [r4, #0]
 8006d64:	60a5      	str	r5, [r4, #8]
 8006d66:	463e      	mov	r6, r7
 8006d68:	42be      	cmp	r6, r7
 8006d6a:	d900      	bls.n	8006d6e <__ssputs_r+0x86>
 8006d6c:	463e      	mov	r6, r7
 8006d6e:	4632      	mov	r2, r6
 8006d70:	6820      	ldr	r0, [r4, #0]
 8006d72:	4641      	mov	r1, r8
 8006d74:	f000 f966 	bl	8007044 <memmove>
 8006d78:	68a3      	ldr	r3, [r4, #8]
 8006d7a:	6822      	ldr	r2, [r4, #0]
 8006d7c:	1b9b      	subs	r3, r3, r6
 8006d7e:	4432      	add	r2, r6
 8006d80:	60a3      	str	r3, [r4, #8]
 8006d82:	6022      	str	r2, [r4, #0]
 8006d84:	2000      	movs	r0, #0
 8006d86:	e7db      	b.n	8006d40 <__ssputs_r+0x58>
 8006d88:	462a      	mov	r2, r5
 8006d8a:	f000 f981 	bl	8007090 <_realloc_r>
 8006d8e:	4606      	mov	r6, r0
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d1e1      	bne.n	8006d58 <__ssputs_r+0x70>
 8006d94:	6921      	ldr	r1, [r4, #16]
 8006d96:	4650      	mov	r0, sl
 8006d98:	f7ff fefc 	bl	8006b94 <_free_r>
 8006d9c:	e7c7      	b.n	8006d2e <__ssputs_r+0x46>
	...

08006da0 <_svfiprintf_r>:
 8006da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da4:	4698      	mov	r8, r3
 8006da6:	898b      	ldrh	r3, [r1, #12]
 8006da8:	061b      	lsls	r3, r3, #24
 8006daa:	b09d      	sub	sp, #116	; 0x74
 8006dac:	4607      	mov	r7, r0
 8006dae:	460d      	mov	r5, r1
 8006db0:	4614      	mov	r4, r2
 8006db2:	d50e      	bpl.n	8006dd2 <_svfiprintf_r+0x32>
 8006db4:	690b      	ldr	r3, [r1, #16]
 8006db6:	b963      	cbnz	r3, 8006dd2 <_svfiprintf_r+0x32>
 8006db8:	2140      	movs	r1, #64	; 0x40
 8006dba:	f7ff ff3b 	bl	8006c34 <_malloc_r>
 8006dbe:	6028      	str	r0, [r5, #0]
 8006dc0:	6128      	str	r0, [r5, #16]
 8006dc2:	b920      	cbnz	r0, 8006dce <_svfiprintf_r+0x2e>
 8006dc4:	230c      	movs	r3, #12
 8006dc6:	603b      	str	r3, [r7, #0]
 8006dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dcc:	e0d1      	b.n	8006f72 <_svfiprintf_r+0x1d2>
 8006dce:	2340      	movs	r3, #64	; 0x40
 8006dd0:	616b      	str	r3, [r5, #20]
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd6:	2320      	movs	r3, #32
 8006dd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ddc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006de0:	2330      	movs	r3, #48	; 0x30
 8006de2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f8c <_svfiprintf_r+0x1ec>
 8006de6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dea:	f04f 0901 	mov.w	r9, #1
 8006dee:	4623      	mov	r3, r4
 8006df0:	469a      	mov	sl, r3
 8006df2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006df6:	b10a      	cbz	r2, 8006dfc <_svfiprintf_r+0x5c>
 8006df8:	2a25      	cmp	r2, #37	; 0x25
 8006dfa:	d1f9      	bne.n	8006df0 <_svfiprintf_r+0x50>
 8006dfc:	ebba 0b04 	subs.w	fp, sl, r4
 8006e00:	d00b      	beq.n	8006e1a <_svfiprintf_r+0x7a>
 8006e02:	465b      	mov	r3, fp
 8006e04:	4622      	mov	r2, r4
 8006e06:	4629      	mov	r1, r5
 8006e08:	4638      	mov	r0, r7
 8006e0a:	f7ff ff6d 	bl	8006ce8 <__ssputs_r>
 8006e0e:	3001      	adds	r0, #1
 8006e10:	f000 80aa 	beq.w	8006f68 <_svfiprintf_r+0x1c8>
 8006e14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e16:	445a      	add	r2, fp
 8006e18:	9209      	str	r2, [sp, #36]	; 0x24
 8006e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 80a2 	beq.w	8006f68 <_svfiprintf_r+0x1c8>
 8006e24:	2300      	movs	r3, #0
 8006e26:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e2e:	f10a 0a01 	add.w	sl, sl, #1
 8006e32:	9304      	str	r3, [sp, #16]
 8006e34:	9307      	str	r3, [sp, #28]
 8006e36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e3a:	931a      	str	r3, [sp, #104]	; 0x68
 8006e3c:	4654      	mov	r4, sl
 8006e3e:	2205      	movs	r2, #5
 8006e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e44:	4851      	ldr	r0, [pc, #324]	; (8006f8c <_svfiprintf_r+0x1ec>)
 8006e46:	f7f9 fa03 	bl	8000250 <memchr>
 8006e4a:	9a04      	ldr	r2, [sp, #16]
 8006e4c:	b9d8      	cbnz	r0, 8006e86 <_svfiprintf_r+0xe6>
 8006e4e:	06d0      	lsls	r0, r2, #27
 8006e50:	bf44      	itt	mi
 8006e52:	2320      	movmi	r3, #32
 8006e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e58:	0711      	lsls	r1, r2, #28
 8006e5a:	bf44      	itt	mi
 8006e5c:	232b      	movmi	r3, #43	; 0x2b
 8006e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e62:	f89a 3000 	ldrb.w	r3, [sl]
 8006e66:	2b2a      	cmp	r3, #42	; 0x2a
 8006e68:	d015      	beq.n	8006e96 <_svfiprintf_r+0xf6>
 8006e6a:	9a07      	ldr	r2, [sp, #28]
 8006e6c:	4654      	mov	r4, sl
 8006e6e:	2000      	movs	r0, #0
 8006e70:	f04f 0c0a 	mov.w	ip, #10
 8006e74:	4621      	mov	r1, r4
 8006e76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e7a:	3b30      	subs	r3, #48	; 0x30
 8006e7c:	2b09      	cmp	r3, #9
 8006e7e:	d94e      	bls.n	8006f1e <_svfiprintf_r+0x17e>
 8006e80:	b1b0      	cbz	r0, 8006eb0 <_svfiprintf_r+0x110>
 8006e82:	9207      	str	r2, [sp, #28]
 8006e84:	e014      	b.n	8006eb0 <_svfiprintf_r+0x110>
 8006e86:	eba0 0308 	sub.w	r3, r0, r8
 8006e8a:	fa09 f303 	lsl.w	r3, r9, r3
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	9304      	str	r3, [sp, #16]
 8006e92:	46a2      	mov	sl, r4
 8006e94:	e7d2      	b.n	8006e3c <_svfiprintf_r+0x9c>
 8006e96:	9b03      	ldr	r3, [sp, #12]
 8006e98:	1d19      	adds	r1, r3, #4
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	9103      	str	r1, [sp, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	bfbb      	ittet	lt
 8006ea2:	425b      	neglt	r3, r3
 8006ea4:	f042 0202 	orrlt.w	r2, r2, #2
 8006ea8:	9307      	strge	r3, [sp, #28]
 8006eaa:	9307      	strlt	r3, [sp, #28]
 8006eac:	bfb8      	it	lt
 8006eae:	9204      	strlt	r2, [sp, #16]
 8006eb0:	7823      	ldrb	r3, [r4, #0]
 8006eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8006eb4:	d10c      	bne.n	8006ed0 <_svfiprintf_r+0x130>
 8006eb6:	7863      	ldrb	r3, [r4, #1]
 8006eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8006eba:	d135      	bne.n	8006f28 <_svfiprintf_r+0x188>
 8006ebc:	9b03      	ldr	r3, [sp, #12]
 8006ebe:	1d1a      	adds	r2, r3, #4
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	9203      	str	r2, [sp, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	bfb8      	it	lt
 8006ec8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ecc:	3402      	adds	r4, #2
 8006ece:	9305      	str	r3, [sp, #20]
 8006ed0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f9c <_svfiprintf_r+0x1fc>
 8006ed4:	7821      	ldrb	r1, [r4, #0]
 8006ed6:	2203      	movs	r2, #3
 8006ed8:	4650      	mov	r0, sl
 8006eda:	f7f9 f9b9 	bl	8000250 <memchr>
 8006ede:	b140      	cbz	r0, 8006ef2 <_svfiprintf_r+0x152>
 8006ee0:	2340      	movs	r3, #64	; 0x40
 8006ee2:	eba0 000a 	sub.w	r0, r0, sl
 8006ee6:	fa03 f000 	lsl.w	r0, r3, r0
 8006eea:	9b04      	ldr	r3, [sp, #16]
 8006eec:	4303      	orrs	r3, r0
 8006eee:	3401      	adds	r4, #1
 8006ef0:	9304      	str	r3, [sp, #16]
 8006ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ef6:	4826      	ldr	r0, [pc, #152]	; (8006f90 <_svfiprintf_r+0x1f0>)
 8006ef8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006efc:	2206      	movs	r2, #6
 8006efe:	f7f9 f9a7 	bl	8000250 <memchr>
 8006f02:	2800      	cmp	r0, #0
 8006f04:	d038      	beq.n	8006f78 <_svfiprintf_r+0x1d8>
 8006f06:	4b23      	ldr	r3, [pc, #140]	; (8006f94 <_svfiprintf_r+0x1f4>)
 8006f08:	bb1b      	cbnz	r3, 8006f52 <_svfiprintf_r+0x1b2>
 8006f0a:	9b03      	ldr	r3, [sp, #12]
 8006f0c:	3307      	adds	r3, #7
 8006f0e:	f023 0307 	bic.w	r3, r3, #7
 8006f12:	3308      	adds	r3, #8
 8006f14:	9303      	str	r3, [sp, #12]
 8006f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f18:	4433      	add	r3, r6
 8006f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f1c:	e767      	b.n	8006dee <_svfiprintf_r+0x4e>
 8006f1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f22:	460c      	mov	r4, r1
 8006f24:	2001      	movs	r0, #1
 8006f26:	e7a5      	b.n	8006e74 <_svfiprintf_r+0xd4>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	3401      	adds	r4, #1
 8006f2c:	9305      	str	r3, [sp, #20]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	f04f 0c0a 	mov.w	ip, #10
 8006f34:	4620      	mov	r0, r4
 8006f36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f3a:	3a30      	subs	r2, #48	; 0x30
 8006f3c:	2a09      	cmp	r2, #9
 8006f3e:	d903      	bls.n	8006f48 <_svfiprintf_r+0x1a8>
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d0c5      	beq.n	8006ed0 <_svfiprintf_r+0x130>
 8006f44:	9105      	str	r1, [sp, #20]
 8006f46:	e7c3      	b.n	8006ed0 <_svfiprintf_r+0x130>
 8006f48:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e7f0      	b.n	8006f34 <_svfiprintf_r+0x194>
 8006f52:	ab03      	add	r3, sp, #12
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	462a      	mov	r2, r5
 8006f58:	4b0f      	ldr	r3, [pc, #60]	; (8006f98 <_svfiprintf_r+0x1f8>)
 8006f5a:	a904      	add	r1, sp, #16
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	f7fe f88f 	bl	8005080 <_printf_float>
 8006f62:	1c42      	adds	r2, r0, #1
 8006f64:	4606      	mov	r6, r0
 8006f66:	d1d6      	bne.n	8006f16 <_svfiprintf_r+0x176>
 8006f68:	89ab      	ldrh	r3, [r5, #12]
 8006f6a:	065b      	lsls	r3, r3, #25
 8006f6c:	f53f af2c 	bmi.w	8006dc8 <_svfiprintf_r+0x28>
 8006f70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f72:	b01d      	add	sp, #116	; 0x74
 8006f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f78:	ab03      	add	r3, sp, #12
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	462a      	mov	r2, r5
 8006f7e:	4b06      	ldr	r3, [pc, #24]	; (8006f98 <_svfiprintf_r+0x1f8>)
 8006f80:	a904      	add	r1, sp, #16
 8006f82:	4638      	mov	r0, r7
 8006f84:	f7fe fb08 	bl	8005598 <_printf_i>
 8006f88:	e7eb      	b.n	8006f62 <_svfiprintf_r+0x1c2>
 8006f8a:	bf00      	nop
 8006f8c:	08007e44 	.word	0x08007e44
 8006f90:	08007e4e 	.word	0x08007e4e
 8006f94:	08005081 	.word	0x08005081
 8006f98:	08006ce9 	.word	0x08006ce9
 8006f9c:	08007e4a 	.word	0x08007e4a

08006fa0 <_sbrk_r>:
 8006fa0:	b538      	push	{r3, r4, r5, lr}
 8006fa2:	4d06      	ldr	r5, [pc, #24]	; (8006fbc <_sbrk_r+0x1c>)
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	4608      	mov	r0, r1
 8006faa:	602b      	str	r3, [r5, #0]
 8006fac:	f7fa fa1e 	bl	80013ec <_sbrk>
 8006fb0:	1c43      	adds	r3, r0, #1
 8006fb2:	d102      	bne.n	8006fba <_sbrk_r+0x1a>
 8006fb4:	682b      	ldr	r3, [r5, #0]
 8006fb6:	b103      	cbz	r3, 8006fba <_sbrk_r+0x1a>
 8006fb8:	6023      	str	r3, [r4, #0]
 8006fba:	bd38      	pop	{r3, r4, r5, pc}
 8006fbc:	200003d8 	.word	0x200003d8

08006fc0 <__assert_func>:
 8006fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fc2:	4614      	mov	r4, r2
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	4b09      	ldr	r3, [pc, #36]	; (8006fec <__assert_func+0x2c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4605      	mov	r5, r0
 8006fcc:	68d8      	ldr	r0, [r3, #12]
 8006fce:	b14c      	cbz	r4, 8006fe4 <__assert_func+0x24>
 8006fd0:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <__assert_func+0x30>)
 8006fd2:	9100      	str	r1, [sp, #0]
 8006fd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fd8:	4906      	ldr	r1, [pc, #24]	; (8006ff4 <__assert_func+0x34>)
 8006fda:	462b      	mov	r3, r5
 8006fdc:	f000 f80e 	bl	8006ffc <fiprintf>
 8006fe0:	f000 faa4 	bl	800752c <abort>
 8006fe4:	4b04      	ldr	r3, [pc, #16]	; (8006ff8 <__assert_func+0x38>)
 8006fe6:	461c      	mov	r4, r3
 8006fe8:	e7f3      	b.n	8006fd2 <__assert_func+0x12>
 8006fea:	bf00      	nop
 8006fec:	2000000c 	.word	0x2000000c
 8006ff0:	08007e55 	.word	0x08007e55
 8006ff4:	08007e62 	.word	0x08007e62
 8006ff8:	08007e90 	.word	0x08007e90

08006ffc <fiprintf>:
 8006ffc:	b40e      	push	{r1, r2, r3}
 8006ffe:	b503      	push	{r0, r1, lr}
 8007000:	4601      	mov	r1, r0
 8007002:	ab03      	add	r3, sp, #12
 8007004:	4805      	ldr	r0, [pc, #20]	; (800701c <fiprintf+0x20>)
 8007006:	f853 2b04 	ldr.w	r2, [r3], #4
 800700a:	6800      	ldr	r0, [r0, #0]
 800700c:	9301      	str	r3, [sp, #4]
 800700e:	f000 f88f 	bl	8007130 <_vfiprintf_r>
 8007012:	b002      	add	sp, #8
 8007014:	f85d eb04 	ldr.w	lr, [sp], #4
 8007018:	b003      	add	sp, #12
 800701a:	4770      	bx	lr
 800701c:	2000000c 	.word	0x2000000c

08007020 <__ascii_mbtowc>:
 8007020:	b082      	sub	sp, #8
 8007022:	b901      	cbnz	r1, 8007026 <__ascii_mbtowc+0x6>
 8007024:	a901      	add	r1, sp, #4
 8007026:	b142      	cbz	r2, 800703a <__ascii_mbtowc+0x1a>
 8007028:	b14b      	cbz	r3, 800703e <__ascii_mbtowc+0x1e>
 800702a:	7813      	ldrb	r3, [r2, #0]
 800702c:	600b      	str	r3, [r1, #0]
 800702e:	7812      	ldrb	r2, [r2, #0]
 8007030:	1e10      	subs	r0, r2, #0
 8007032:	bf18      	it	ne
 8007034:	2001      	movne	r0, #1
 8007036:	b002      	add	sp, #8
 8007038:	4770      	bx	lr
 800703a:	4610      	mov	r0, r2
 800703c:	e7fb      	b.n	8007036 <__ascii_mbtowc+0x16>
 800703e:	f06f 0001 	mvn.w	r0, #1
 8007042:	e7f8      	b.n	8007036 <__ascii_mbtowc+0x16>

08007044 <memmove>:
 8007044:	4288      	cmp	r0, r1
 8007046:	b510      	push	{r4, lr}
 8007048:	eb01 0402 	add.w	r4, r1, r2
 800704c:	d902      	bls.n	8007054 <memmove+0x10>
 800704e:	4284      	cmp	r4, r0
 8007050:	4623      	mov	r3, r4
 8007052:	d807      	bhi.n	8007064 <memmove+0x20>
 8007054:	1e43      	subs	r3, r0, #1
 8007056:	42a1      	cmp	r1, r4
 8007058:	d008      	beq.n	800706c <memmove+0x28>
 800705a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800705e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007062:	e7f8      	b.n	8007056 <memmove+0x12>
 8007064:	4402      	add	r2, r0
 8007066:	4601      	mov	r1, r0
 8007068:	428a      	cmp	r2, r1
 800706a:	d100      	bne.n	800706e <memmove+0x2a>
 800706c:	bd10      	pop	{r4, pc}
 800706e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007072:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007076:	e7f7      	b.n	8007068 <memmove+0x24>

08007078 <__malloc_lock>:
 8007078:	4801      	ldr	r0, [pc, #4]	; (8007080 <__malloc_lock+0x8>)
 800707a:	f000 bc17 	b.w	80078ac <__retarget_lock_acquire_recursive>
 800707e:	bf00      	nop
 8007080:	200003e0 	.word	0x200003e0

08007084 <__malloc_unlock>:
 8007084:	4801      	ldr	r0, [pc, #4]	; (800708c <__malloc_unlock+0x8>)
 8007086:	f000 bc12 	b.w	80078ae <__retarget_lock_release_recursive>
 800708a:	bf00      	nop
 800708c:	200003e0 	.word	0x200003e0

08007090 <_realloc_r>:
 8007090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007092:	4607      	mov	r7, r0
 8007094:	4614      	mov	r4, r2
 8007096:	460e      	mov	r6, r1
 8007098:	b921      	cbnz	r1, 80070a4 <_realloc_r+0x14>
 800709a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800709e:	4611      	mov	r1, r2
 80070a0:	f7ff bdc8 	b.w	8006c34 <_malloc_r>
 80070a4:	b922      	cbnz	r2, 80070b0 <_realloc_r+0x20>
 80070a6:	f7ff fd75 	bl	8006b94 <_free_r>
 80070aa:	4625      	mov	r5, r4
 80070ac:	4628      	mov	r0, r5
 80070ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070b0:	f000 fc62 	bl	8007978 <_malloc_usable_size_r>
 80070b4:	42a0      	cmp	r0, r4
 80070b6:	d20f      	bcs.n	80070d8 <_realloc_r+0x48>
 80070b8:	4621      	mov	r1, r4
 80070ba:	4638      	mov	r0, r7
 80070bc:	f7ff fdba 	bl	8006c34 <_malloc_r>
 80070c0:	4605      	mov	r5, r0
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d0f2      	beq.n	80070ac <_realloc_r+0x1c>
 80070c6:	4631      	mov	r1, r6
 80070c8:	4622      	mov	r2, r4
 80070ca:	f7ff f9c7 	bl	800645c <memcpy>
 80070ce:	4631      	mov	r1, r6
 80070d0:	4638      	mov	r0, r7
 80070d2:	f7ff fd5f 	bl	8006b94 <_free_r>
 80070d6:	e7e9      	b.n	80070ac <_realloc_r+0x1c>
 80070d8:	4635      	mov	r5, r6
 80070da:	e7e7      	b.n	80070ac <_realloc_r+0x1c>

080070dc <__sfputc_r>:
 80070dc:	6893      	ldr	r3, [r2, #8]
 80070de:	3b01      	subs	r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	b410      	push	{r4}
 80070e4:	6093      	str	r3, [r2, #8]
 80070e6:	da08      	bge.n	80070fa <__sfputc_r+0x1e>
 80070e8:	6994      	ldr	r4, [r2, #24]
 80070ea:	42a3      	cmp	r3, r4
 80070ec:	db01      	blt.n	80070f2 <__sfputc_r+0x16>
 80070ee:	290a      	cmp	r1, #10
 80070f0:	d103      	bne.n	80070fa <__sfputc_r+0x1e>
 80070f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070f6:	f000 b94b 	b.w	8007390 <__swbuf_r>
 80070fa:	6813      	ldr	r3, [r2, #0]
 80070fc:	1c58      	adds	r0, r3, #1
 80070fe:	6010      	str	r0, [r2, #0]
 8007100:	7019      	strb	r1, [r3, #0]
 8007102:	4608      	mov	r0, r1
 8007104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007108:	4770      	bx	lr

0800710a <__sfputs_r>:
 800710a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710c:	4606      	mov	r6, r0
 800710e:	460f      	mov	r7, r1
 8007110:	4614      	mov	r4, r2
 8007112:	18d5      	adds	r5, r2, r3
 8007114:	42ac      	cmp	r4, r5
 8007116:	d101      	bne.n	800711c <__sfputs_r+0x12>
 8007118:	2000      	movs	r0, #0
 800711a:	e007      	b.n	800712c <__sfputs_r+0x22>
 800711c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007120:	463a      	mov	r2, r7
 8007122:	4630      	mov	r0, r6
 8007124:	f7ff ffda 	bl	80070dc <__sfputc_r>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	d1f3      	bne.n	8007114 <__sfputs_r+0xa>
 800712c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007130 <_vfiprintf_r>:
 8007130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007134:	460d      	mov	r5, r1
 8007136:	b09d      	sub	sp, #116	; 0x74
 8007138:	4614      	mov	r4, r2
 800713a:	4698      	mov	r8, r3
 800713c:	4606      	mov	r6, r0
 800713e:	b118      	cbz	r0, 8007148 <_vfiprintf_r+0x18>
 8007140:	6983      	ldr	r3, [r0, #24]
 8007142:	b90b      	cbnz	r3, 8007148 <_vfiprintf_r+0x18>
 8007144:	f000 fb14 	bl	8007770 <__sinit>
 8007148:	4b89      	ldr	r3, [pc, #548]	; (8007370 <_vfiprintf_r+0x240>)
 800714a:	429d      	cmp	r5, r3
 800714c:	d11b      	bne.n	8007186 <_vfiprintf_r+0x56>
 800714e:	6875      	ldr	r5, [r6, #4]
 8007150:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007152:	07d9      	lsls	r1, r3, #31
 8007154:	d405      	bmi.n	8007162 <_vfiprintf_r+0x32>
 8007156:	89ab      	ldrh	r3, [r5, #12]
 8007158:	059a      	lsls	r2, r3, #22
 800715a:	d402      	bmi.n	8007162 <_vfiprintf_r+0x32>
 800715c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800715e:	f000 fba5 	bl	80078ac <__retarget_lock_acquire_recursive>
 8007162:	89ab      	ldrh	r3, [r5, #12]
 8007164:	071b      	lsls	r3, r3, #28
 8007166:	d501      	bpl.n	800716c <_vfiprintf_r+0x3c>
 8007168:	692b      	ldr	r3, [r5, #16]
 800716a:	b9eb      	cbnz	r3, 80071a8 <_vfiprintf_r+0x78>
 800716c:	4629      	mov	r1, r5
 800716e:	4630      	mov	r0, r6
 8007170:	f000 f96e 	bl	8007450 <__swsetup_r>
 8007174:	b1c0      	cbz	r0, 80071a8 <_vfiprintf_r+0x78>
 8007176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007178:	07dc      	lsls	r4, r3, #31
 800717a:	d50e      	bpl.n	800719a <_vfiprintf_r+0x6a>
 800717c:	f04f 30ff 	mov.w	r0, #4294967295
 8007180:	b01d      	add	sp, #116	; 0x74
 8007182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007186:	4b7b      	ldr	r3, [pc, #492]	; (8007374 <_vfiprintf_r+0x244>)
 8007188:	429d      	cmp	r5, r3
 800718a:	d101      	bne.n	8007190 <_vfiprintf_r+0x60>
 800718c:	68b5      	ldr	r5, [r6, #8]
 800718e:	e7df      	b.n	8007150 <_vfiprintf_r+0x20>
 8007190:	4b79      	ldr	r3, [pc, #484]	; (8007378 <_vfiprintf_r+0x248>)
 8007192:	429d      	cmp	r5, r3
 8007194:	bf08      	it	eq
 8007196:	68f5      	ldreq	r5, [r6, #12]
 8007198:	e7da      	b.n	8007150 <_vfiprintf_r+0x20>
 800719a:	89ab      	ldrh	r3, [r5, #12]
 800719c:	0598      	lsls	r0, r3, #22
 800719e:	d4ed      	bmi.n	800717c <_vfiprintf_r+0x4c>
 80071a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071a2:	f000 fb84 	bl	80078ae <__retarget_lock_release_recursive>
 80071a6:	e7e9      	b.n	800717c <_vfiprintf_r+0x4c>
 80071a8:	2300      	movs	r3, #0
 80071aa:	9309      	str	r3, [sp, #36]	; 0x24
 80071ac:	2320      	movs	r3, #32
 80071ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80071b6:	2330      	movs	r3, #48	; 0x30
 80071b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800737c <_vfiprintf_r+0x24c>
 80071bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071c0:	f04f 0901 	mov.w	r9, #1
 80071c4:	4623      	mov	r3, r4
 80071c6:	469a      	mov	sl, r3
 80071c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071cc:	b10a      	cbz	r2, 80071d2 <_vfiprintf_r+0xa2>
 80071ce:	2a25      	cmp	r2, #37	; 0x25
 80071d0:	d1f9      	bne.n	80071c6 <_vfiprintf_r+0x96>
 80071d2:	ebba 0b04 	subs.w	fp, sl, r4
 80071d6:	d00b      	beq.n	80071f0 <_vfiprintf_r+0xc0>
 80071d8:	465b      	mov	r3, fp
 80071da:	4622      	mov	r2, r4
 80071dc:	4629      	mov	r1, r5
 80071de:	4630      	mov	r0, r6
 80071e0:	f7ff ff93 	bl	800710a <__sfputs_r>
 80071e4:	3001      	adds	r0, #1
 80071e6:	f000 80aa 	beq.w	800733e <_vfiprintf_r+0x20e>
 80071ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071ec:	445a      	add	r2, fp
 80071ee:	9209      	str	r2, [sp, #36]	; 0x24
 80071f0:	f89a 3000 	ldrb.w	r3, [sl]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 80a2 	beq.w	800733e <_vfiprintf_r+0x20e>
 80071fa:	2300      	movs	r3, #0
 80071fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007204:	f10a 0a01 	add.w	sl, sl, #1
 8007208:	9304      	str	r3, [sp, #16]
 800720a:	9307      	str	r3, [sp, #28]
 800720c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007210:	931a      	str	r3, [sp, #104]	; 0x68
 8007212:	4654      	mov	r4, sl
 8007214:	2205      	movs	r2, #5
 8007216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800721a:	4858      	ldr	r0, [pc, #352]	; (800737c <_vfiprintf_r+0x24c>)
 800721c:	f7f9 f818 	bl	8000250 <memchr>
 8007220:	9a04      	ldr	r2, [sp, #16]
 8007222:	b9d8      	cbnz	r0, 800725c <_vfiprintf_r+0x12c>
 8007224:	06d1      	lsls	r1, r2, #27
 8007226:	bf44      	itt	mi
 8007228:	2320      	movmi	r3, #32
 800722a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800722e:	0713      	lsls	r3, r2, #28
 8007230:	bf44      	itt	mi
 8007232:	232b      	movmi	r3, #43	; 0x2b
 8007234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007238:	f89a 3000 	ldrb.w	r3, [sl]
 800723c:	2b2a      	cmp	r3, #42	; 0x2a
 800723e:	d015      	beq.n	800726c <_vfiprintf_r+0x13c>
 8007240:	9a07      	ldr	r2, [sp, #28]
 8007242:	4654      	mov	r4, sl
 8007244:	2000      	movs	r0, #0
 8007246:	f04f 0c0a 	mov.w	ip, #10
 800724a:	4621      	mov	r1, r4
 800724c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007250:	3b30      	subs	r3, #48	; 0x30
 8007252:	2b09      	cmp	r3, #9
 8007254:	d94e      	bls.n	80072f4 <_vfiprintf_r+0x1c4>
 8007256:	b1b0      	cbz	r0, 8007286 <_vfiprintf_r+0x156>
 8007258:	9207      	str	r2, [sp, #28]
 800725a:	e014      	b.n	8007286 <_vfiprintf_r+0x156>
 800725c:	eba0 0308 	sub.w	r3, r0, r8
 8007260:	fa09 f303 	lsl.w	r3, r9, r3
 8007264:	4313      	orrs	r3, r2
 8007266:	9304      	str	r3, [sp, #16]
 8007268:	46a2      	mov	sl, r4
 800726a:	e7d2      	b.n	8007212 <_vfiprintf_r+0xe2>
 800726c:	9b03      	ldr	r3, [sp, #12]
 800726e:	1d19      	adds	r1, r3, #4
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	9103      	str	r1, [sp, #12]
 8007274:	2b00      	cmp	r3, #0
 8007276:	bfbb      	ittet	lt
 8007278:	425b      	neglt	r3, r3
 800727a:	f042 0202 	orrlt.w	r2, r2, #2
 800727e:	9307      	strge	r3, [sp, #28]
 8007280:	9307      	strlt	r3, [sp, #28]
 8007282:	bfb8      	it	lt
 8007284:	9204      	strlt	r2, [sp, #16]
 8007286:	7823      	ldrb	r3, [r4, #0]
 8007288:	2b2e      	cmp	r3, #46	; 0x2e
 800728a:	d10c      	bne.n	80072a6 <_vfiprintf_r+0x176>
 800728c:	7863      	ldrb	r3, [r4, #1]
 800728e:	2b2a      	cmp	r3, #42	; 0x2a
 8007290:	d135      	bne.n	80072fe <_vfiprintf_r+0x1ce>
 8007292:	9b03      	ldr	r3, [sp, #12]
 8007294:	1d1a      	adds	r2, r3, #4
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	9203      	str	r2, [sp, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	bfb8      	it	lt
 800729e:	f04f 33ff 	movlt.w	r3, #4294967295
 80072a2:	3402      	adds	r4, #2
 80072a4:	9305      	str	r3, [sp, #20]
 80072a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800738c <_vfiprintf_r+0x25c>
 80072aa:	7821      	ldrb	r1, [r4, #0]
 80072ac:	2203      	movs	r2, #3
 80072ae:	4650      	mov	r0, sl
 80072b0:	f7f8 ffce 	bl	8000250 <memchr>
 80072b4:	b140      	cbz	r0, 80072c8 <_vfiprintf_r+0x198>
 80072b6:	2340      	movs	r3, #64	; 0x40
 80072b8:	eba0 000a 	sub.w	r0, r0, sl
 80072bc:	fa03 f000 	lsl.w	r0, r3, r0
 80072c0:	9b04      	ldr	r3, [sp, #16]
 80072c2:	4303      	orrs	r3, r0
 80072c4:	3401      	adds	r4, #1
 80072c6:	9304      	str	r3, [sp, #16]
 80072c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072cc:	482c      	ldr	r0, [pc, #176]	; (8007380 <_vfiprintf_r+0x250>)
 80072ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072d2:	2206      	movs	r2, #6
 80072d4:	f7f8 ffbc 	bl	8000250 <memchr>
 80072d8:	2800      	cmp	r0, #0
 80072da:	d03f      	beq.n	800735c <_vfiprintf_r+0x22c>
 80072dc:	4b29      	ldr	r3, [pc, #164]	; (8007384 <_vfiprintf_r+0x254>)
 80072de:	bb1b      	cbnz	r3, 8007328 <_vfiprintf_r+0x1f8>
 80072e0:	9b03      	ldr	r3, [sp, #12]
 80072e2:	3307      	adds	r3, #7
 80072e4:	f023 0307 	bic.w	r3, r3, #7
 80072e8:	3308      	adds	r3, #8
 80072ea:	9303      	str	r3, [sp, #12]
 80072ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ee:	443b      	add	r3, r7
 80072f0:	9309      	str	r3, [sp, #36]	; 0x24
 80072f2:	e767      	b.n	80071c4 <_vfiprintf_r+0x94>
 80072f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80072f8:	460c      	mov	r4, r1
 80072fa:	2001      	movs	r0, #1
 80072fc:	e7a5      	b.n	800724a <_vfiprintf_r+0x11a>
 80072fe:	2300      	movs	r3, #0
 8007300:	3401      	adds	r4, #1
 8007302:	9305      	str	r3, [sp, #20]
 8007304:	4619      	mov	r1, r3
 8007306:	f04f 0c0a 	mov.w	ip, #10
 800730a:	4620      	mov	r0, r4
 800730c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007310:	3a30      	subs	r2, #48	; 0x30
 8007312:	2a09      	cmp	r2, #9
 8007314:	d903      	bls.n	800731e <_vfiprintf_r+0x1ee>
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0c5      	beq.n	80072a6 <_vfiprintf_r+0x176>
 800731a:	9105      	str	r1, [sp, #20]
 800731c:	e7c3      	b.n	80072a6 <_vfiprintf_r+0x176>
 800731e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007322:	4604      	mov	r4, r0
 8007324:	2301      	movs	r3, #1
 8007326:	e7f0      	b.n	800730a <_vfiprintf_r+0x1da>
 8007328:	ab03      	add	r3, sp, #12
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	462a      	mov	r2, r5
 800732e:	4b16      	ldr	r3, [pc, #88]	; (8007388 <_vfiprintf_r+0x258>)
 8007330:	a904      	add	r1, sp, #16
 8007332:	4630      	mov	r0, r6
 8007334:	f7fd fea4 	bl	8005080 <_printf_float>
 8007338:	4607      	mov	r7, r0
 800733a:	1c78      	adds	r0, r7, #1
 800733c:	d1d6      	bne.n	80072ec <_vfiprintf_r+0x1bc>
 800733e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007340:	07d9      	lsls	r1, r3, #31
 8007342:	d405      	bmi.n	8007350 <_vfiprintf_r+0x220>
 8007344:	89ab      	ldrh	r3, [r5, #12]
 8007346:	059a      	lsls	r2, r3, #22
 8007348:	d402      	bmi.n	8007350 <_vfiprintf_r+0x220>
 800734a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800734c:	f000 faaf 	bl	80078ae <__retarget_lock_release_recursive>
 8007350:	89ab      	ldrh	r3, [r5, #12]
 8007352:	065b      	lsls	r3, r3, #25
 8007354:	f53f af12 	bmi.w	800717c <_vfiprintf_r+0x4c>
 8007358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800735a:	e711      	b.n	8007180 <_vfiprintf_r+0x50>
 800735c:	ab03      	add	r3, sp, #12
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	462a      	mov	r2, r5
 8007362:	4b09      	ldr	r3, [pc, #36]	; (8007388 <_vfiprintf_r+0x258>)
 8007364:	a904      	add	r1, sp, #16
 8007366:	4630      	mov	r0, r6
 8007368:	f7fe f916 	bl	8005598 <_printf_i>
 800736c:	e7e4      	b.n	8007338 <_vfiprintf_r+0x208>
 800736e:	bf00      	nop
 8007370:	08007fbc 	.word	0x08007fbc
 8007374:	08007fdc 	.word	0x08007fdc
 8007378:	08007f9c 	.word	0x08007f9c
 800737c:	08007e44 	.word	0x08007e44
 8007380:	08007e4e 	.word	0x08007e4e
 8007384:	08005081 	.word	0x08005081
 8007388:	0800710b 	.word	0x0800710b
 800738c:	08007e4a 	.word	0x08007e4a

08007390 <__swbuf_r>:
 8007390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007392:	460e      	mov	r6, r1
 8007394:	4614      	mov	r4, r2
 8007396:	4605      	mov	r5, r0
 8007398:	b118      	cbz	r0, 80073a2 <__swbuf_r+0x12>
 800739a:	6983      	ldr	r3, [r0, #24]
 800739c:	b90b      	cbnz	r3, 80073a2 <__swbuf_r+0x12>
 800739e:	f000 f9e7 	bl	8007770 <__sinit>
 80073a2:	4b21      	ldr	r3, [pc, #132]	; (8007428 <__swbuf_r+0x98>)
 80073a4:	429c      	cmp	r4, r3
 80073a6:	d12b      	bne.n	8007400 <__swbuf_r+0x70>
 80073a8:	686c      	ldr	r4, [r5, #4]
 80073aa:	69a3      	ldr	r3, [r4, #24]
 80073ac:	60a3      	str	r3, [r4, #8]
 80073ae:	89a3      	ldrh	r3, [r4, #12]
 80073b0:	071a      	lsls	r2, r3, #28
 80073b2:	d52f      	bpl.n	8007414 <__swbuf_r+0x84>
 80073b4:	6923      	ldr	r3, [r4, #16]
 80073b6:	b36b      	cbz	r3, 8007414 <__swbuf_r+0x84>
 80073b8:	6923      	ldr	r3, [r4, #16]
 80073ba:	6820      	ldr	r0, [r4, #0]
 80073bc:	1ac0      	subs	r0, r0, r3
 80073be:	6963      	ldr	r3, [r4, #20]
 80073c0:	b2f6      	uxtb	r6, r6
 80073c2:	4283      	cmp	r3, r0
 80073c4:	4637      	mov	r7, r6
 80073c6:	dc04      	bgt.n	80073d2 <__swbuf_r+0x42>
 80073c8:	4621      	mov	r1, r4
 80073ca:	4628      	mov	r0, r5
 80073cc:	f000 f93c 	bl	8007648 <_fflush_r>
 80073d0:	bb30      	cbnz	r0, 8007420 <__swbuf_r+0x90>
 80073d2:	68a3      	ldr	r3, [r4, #8]
 80073d4:	3b01      	subs	r3, #1
 80073d6:	60a3      	str	r3, [r4, #8]
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	6022      	str	r2, [r4, #0]
 80073de:	701e      	strb	r6, [r3, #0]
 80073e0:	6963      	ldr	r3, [r4, #20]
 80073e2:	3001      	adds	r0, #1
 80073e4:	4283      	cmp	r3, r0
 80073e6:	d004      	beq.n	80073f2 <__swbuf_r+0x62>
 80073e8:	89a3      	ldrh	r3, [r4, #12]
 80073ea:	07db      	lsls	r3, r3, #31
 80073ec:	d506      	bpl.n	80073fc <__swbuf_r+0x6c>
 80073ee:	2e0a      	cmp	r6, #10
 80073f0:	d104      	bne.n	80073fc <__swbuf_r+0x6c>
 80073f2:	4621      	mov	r1, r4
 80073f4:	4628      	mov	r0, r5
 80073f6:	f000 f927 	bl	8007648 <_fflush_r>
 80073fa:	b988      	cbnz	r0, 8007420 <__swbuf_r+0x90>
 80073fc:	4638      	mov	r0, r7
 80073fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007400:	4b0a      	ldr	r3, [pc, #40]	; (800742c <__swbuf_r+0x9c>)
 8007402:	429c      	cmp	r4, r3
 8007404:	d101      	bne.n	800740a <__swbuf_r+0x7a>
 8007406:	68ac      	ldr	r4, [r5, #8]
 8007408:	e7cf      	b.n	80073aa <__swbuf_r+0x1a>
 800740a:	4b09      	ldr	r3, [pc, #36]	; (8007430 <__swbuf_r+0xa0>)
 800740c:	429c      	cmp	r4, r3
 800740e:	bf08      	it	eq
 8007410:	68ec      	ldreq	r4, [r5, #12]
 8007412:	e7ca      	b.n	80073aa <__swbuf_r+0x1a>
 8007414:	4621      	mov	r1, r4
 8007416:	4628      	mov	r0, r5
 8007418:	f000 f81a 	bl	8007450 <__swsetup_r>
 800741c:	2800      	cmp	r0, #0
 800741e:	d0cb      	beq.n	80073b8 <__swbuf_r+0x28>
 8007420:	f04f 37ff 	mov.w	r7, #4294967295
 8007424:	e7ea      	b.n	80073fc <__swbuf_r+0x6c>
 8007426:	bf00      	nop
 8007428:	08007fbc 	.word	0x08007fbc
 800742c:	08007fdc 	.word	0x08007fdc
 8007430:	08007f9c 	.word	0x08007f9c

08007434 <__ascii_wctomb>:
 8007434:	b149      	cbz	r1, 800744a <__ascii_wctomb+0x16>
 8007436:	2aff      	cmp	r2, #255	; 0xff
 8007438:	bf85      	ittet	hi
 800743a:	238a      	movhi	r3, #138	; 0x8a
 800743c:	6003      	strhi	r3, [r0, #0]
 800743e:	700a      	strbls	r2, [r1, #0]
 8007440:	f04f 30ff 	movhi.w	r0, #4294967295
 8007444:	bf98      	it	ls
 8007446:	2001      	movls	r0, #1
 8007448:	4770      	bx	lr
 800744a:	4608      	mov	r0, r1
 800744c:	4770      	bx	lr
	...

08007450 <__swsetup_r>:
 8007450:	4b32      	ldr	r3, [pc, #200]	; (800751c <__swsetup_r+0xcc>)
 8007452:	b570      	push	{r4, r5, r6, lr}
 8007454:	681d      	ldr	r5, [r3, #0]
 8007456:	4606      	mov	r6, r0
 8007458:	460c      	mov	r4, r1
 800745a:	b125      	cbz	r5, 8007466 <__swsetup_r+0x16>
 800745c:	69ab      	ldr	r3, [r5, #24]
 800745e:	b913      	cbnz	r3, 8007466 <__swsetup_r+0x16>
 8007460:	4628      	mov	r0, r5
 8007462:	f000 f985 	bl	8007770 <__sinit>
 8007466:	4b2e      	ldr	r3, [pc, #184]	; (8007520 <__swsetup_r+0xd0>)
 8007468:	429c      	cmp	r4, r3
 800746a:	d10f      	bne.n	800748c <__swsetup_r+0x3c>
 800746c:	686c      	ldr	r4, [r5, #4]
 800746e:	89a3      	ldrh	r3, [r4, #12]
 8007470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007474:	0719      	lsls	r1, r3, #28
 8007476:	d42c      	bmi.n	80074d2 <__swsetup_r+0x82>
 8007478:	06dd      	lsls	r5, r3, #27
 800747a:	d411      	bmi.n	80074a0 <__swsetup_r+0x50>
 800747c:	2309      	movs	r3, #9
 800747e:	6033      	str	r3, [r6, #0]
 8007480:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007484:	81a3      	strh	r3, [r4, #12]
 8007486:	f04f 30ff 	mov.w	r0, #4294967295
 800748a:	e03e      	b.n	800750a <__swsetup_r+0xba>
 800748c:	4b25      	ldr	r3, [pc, #148]	; (8007524 <__swsetup_r+0xd4>)
 800748e:	429c      	cmp	r4, r3
 8007490:	d101      	bne.n	8007496 <__swsetup_r+0x46>
 8007492:	68ac      	ldr	r4, [r5, #8]
 8007494:	e7eb      	b.n	800746e <__swsetup_r+0x1e>
 8007496:	4b24      	ldr	r3, [pc, #144]	; (8007528 <__swsetup_r+0xd8>)
 8007498:	429c      	cmp	r4, r3
 800749a:	bf08      	it	eq
 800749c:	68ec      	ldreq	r4, [r5, #12]
 800749e:	e7e6      	b.n	800746e <__swsetup_r+0x1e>
 80074a0:	0758      	lsls	r0, r3, #29
 80074a2:	d512      	bpl.n	80074ca <__swsetup_r+0x7a>
 80074a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074a6:	b141      	cbz	r1, 80074ba <__swsetup_r+0x6a>
 80074a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074ac:	4299      	cmp	r1, r3
 80074ae:	d002      	beq.n	80074b6 <__swsetup_r+0x66>
 80074b0:	4630      	mov	r0, r6
 80074b2:	f7ff fb6f 	bl	8006b94 <_free_r>
 80074b6:	2300      	movs	r3, #0
 80074b8:	6363      	str	r3, [r4, #52]	; 0x34
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074c0:	81a3      	strh	r3, [r4, #12]
 80074c2:	2300      	movs	r3, #0
 80074c4:	6063      	str	r3, [r4, #4]
 80074c6:	6923      	ldr	r3, [r4, #16]
 80074c8:	6023      	str	r3, [r4, #0]
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	f043 0308 	orr.w	r3, r3, #8
 80074d0:	81a3      	strh	r3, [r4, #12]
 80074d2:	6923      	ldr	r3, [r4, #16]
 80074d4:	b94b      	cbnz	r3, 80074ea <__swsetup_r+0x9a>
 80074d6:	89a3      	ldrh	r3, [r4, #12]
 80074d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074e0:	d003      	beq.n	80074ea <__swsetup_r+0x9a>
 80074e2:	4621      	mov	r1, r4
 80074e4:	4630      	mov	r0, r6
 80074e6:	f000 fa07 	bl	80078f8 <__smakebuf_r>
 80074ea:	89a0      	ldrh	r0, [r4, #12]
 80074ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074f0:	f010 0301 	ands.w	r3, r0, #1
 80074f4:	d00a      	beq.n	800750c <__swsetup_r+0xbc>
 80074f6:	2300      	movs	r3, #0
 80074f8:	60a3      	str	r3, [r4, #8]
 80074fa:	6963      	ldr	r3, [r4, #20]
 80074fc:	425b      	negs	r3, r3
 80074fe:	61a3      	str	r3, [r4, #24]
 8007500:	6923      	ldr	r3, [r4, #16]
 8007502:	b943      	cbnz	r3, 8007516 <__swsetup_r+0xc6>
 8007504:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007508:	d1ba      	bne.n	8007480 <__swsetup_r+0x30>
 800750a:	bd70      	pop	{r4, r5, r6, pc}
 800750c:	0781      	lsls	r1, r0, #30
 800750e:	bf58      	it	pl
 8007510:	6963      	ldrpl	r3, [r4, #20]
 8007512:	60a3      	str	r3, [r4, #8]
 8007514:	e7f4      	b.n	8007500 <__swsetup_r+0xb0>
 8007516:	2000      	movs	r0, #0
 8007518:	e7f7      	b.n	800750a <__swsetup_r+0xba>
 800751a:	bf00      	nop
 800751c:	2000000c 	.word	0x2000000c
 8007520:	08007fbc 	.word	0x08007fbc
 8007524:	08007fdc 	.word	0x08007fdc
 8007528:	08007f9c 	.word	0x08007f9c

0800752c <abort>:
 800752c:	b508      	push	{r3, lr}
 800752e:	2006      	movs	r0, #6
 8007530:	f000 fa52 	bl	80079d8 <raise>
 8007534:	2001      	movs	r0, #1
 8007536:	f7f9 fee1 	bl	80012fc <_exit>
	...

0800753c <__sflush_r>:
 800753c:	898a      	ldrh	r2, [r1, #12]
 800753e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007542:	4605      	mov	r5, r0
 8007544:	0710      	lsls	r0, r2, #28
 8007546:	460c      	mov	r4, r1
 8007548:	d458      	bmi.n	80075fc <__sflush_r+0xc0>
 800754a:	684b      	ldr	r3, [r1, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	dc05      	bgt.n	800755c <__sflush_r+0x20>
 8007550:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007552:	2b00      	cmp	r3, #0
 8007554:	dc02      	bgt.n	800755c <__sflush_r+0x20>
 8007556:	2000      	movs	r0, #0
 8007558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800755c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800755e:	2e00      	cmp	r6, #0
 8007560:	d0f9      	beq.n	8007556 <__sflush_r+0x1a>
 8007562:	2300      	movs	r3, #0
 8007564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007568:	682f      	ldr	r7, [r5, #0]
 800756a:	602b      	str	r3, [r5, #0]
 800756c:	d032      	beq.n	80075d4 <__sflush_r+0x98>
 800756e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007570:	89a3      	ldrh	r3, [r4, #12]
 8007572:	075a      	lsls	r2, r3, #29
 8007574:	d505      	bpl.n	8007582 <__sflush_r+0x46>
 8007576:	6863      	ldr	r3, [r4, #4]
 8007578:	1ac0      	subs	r0, r0, r3
 800757a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800757c:	b10b      	cbz	r3, 8007582 <__sflush_r+0x46>
 800757e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007580:	1ac0      	subs	r0, r0, r3
 8007582:	2300      	movs	r3, #0
 8007584:	4602      	mov	r2, r0
 8007586:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007588:	6a21      	ldr	r1, [r4, #32]
 800758a:	4628      	mov	r0, r5
 800758c:	47b0      	blx	r6
 800758e:	1c43      	adds	r3, r0, #1
 8007590:	89a3      	ldrh	r3, [r4, #12]
 8007592:	d106      	bne.n	80075a2 <__sflush_r+0x66>
 8007594:	6829      	ldr	r1, [r5, #0]
 8007596:	291d      	cmp	r1, #29
 8007598:	d82c      	bhi.n	80075f4 <__sflush_r+0xb8>
 800759a:	4a2a      	ldr	r2, [pc, #168]	; (8007644 <__sflush_r+0x108>)
 800759c:	40ca      	lsrs	r2, r1
 800759e:	07d6      	lsls	r6, r2, #31
 80075a0:	d528      	bpl.n	80075f4 <__sflush_r+0xb8>
 80075a2:	2200      	movs	r2, #0
 80075a4:	6062      	str	r2, [r4, #4]
 80075a6:	04d9      	lsls	r1, r3, #19
 80075a8:	6922      	ldr	r2, [r4, #16]
 80075aa:	6022      	str	r2, [r4, #0]
 80075ac:	d504      	bpl.n	80075b8 <__sflush_r+0x7c>
 80075ae:	1c42      	adds	r2, r0, #1
 80075b0:	d101      	bne.n	80075b6 <__sflush_r+0x7a>
 80075b2:	682b      	ldr	r3, [r5, #0]
 80075b4:	b903      	cbnz	r3, 80075b8 <__sflush_r+0x7c>
 80075b6:	6560      	str	r0, [r4, #84]	; 0x54
 80075b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075ba:	602f      	str	r7, [r5, #0]
 80075bc:	2900      	cmp	r1, #0
 80075be:	d0ca      	beq.n	8007556 <__sflush_r+0x1a>
 80075c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075c4:	4299      	cmp	r1, r3
 80075c6:	d002      	beq.n	80075ce <__sflush_r+0x92>
 80075c8:	4628      	mov	r0, r5
 80075ca:	f7ff fae3 	bl	8006b94 <_free_r>
 80075ce:	2000      	movs	r0, #0
 80075d0:	6360      	str	r0, [r4, #52]	; 0x34
 80075d2:	e7c1      	b.n	8007558 <__sflush_r+0x1c>
 80075d4:	6a21      	ldr	r1, [r4, #32]
 80075d6:	2301      	movs	r3, #1
 80075d8:	4628      	mov	r0, r5
 80075da:	47b0      	blx	r6
 80075dc:	1c41      	adds	r1, r0, #1
 80075de:	d1c7      	bne.n	8007570 <__sflush_r+0x34>
 80075e0:	682b      	ldr	r3, [r5, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d0c4      	beq.n	8007570 <__sflush_r+0x34>
 80075e6:	2b1d      	cmp	r3, #29
 80075e8:	d001      	beq.n	80075ee <__sflush_r+0xb2>
 80075ea:	2b16      	cmp	r3, #22
 80075ec:	d101      	bne.n	80075f2 <__sflush_r+0xb6>
 80075ee:	602f      	str	r7, [r5, #0]
 80075f0:	e7b1      	b.n	8007556 <__sflush_r+0x1a>
 80075f2:	89a3      	ldrh	r3, [r4, #12]
 80075f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	e7ad      	b.n	8007558 <__sflush_r+0x1c>
 80075fc:	690f      	ldr	r7, [r1, #16]
 80075fe:	2f00      	cmp	r7, #0
 8007600:	d0a9      	beq.n	8007556 <__sflush_r+0x1a>
 8007602:	0793      	lsls	r3, r2, #30
 8007604:	680e      	ldr	r6, [r1, #0]
 8007606:	bf08      	it	eq
 8007608:	694b      	ldreq	r3, [r1, #20]
 800760a:	600f      	str	r7, [r1, #0]
 800760c:	bf18      	it	ne
 800760e:	2300      	movne	r3, #0
 8007610:	eba6 0807 	sub.w	r8, r6, r7
 8007614:	608b      	str	r3, [r1, #8]
 8007616:	f1b8 0f00 	cmp.w	r8, #0
 800761a:	dd9c      	ble.n	8007556 <__sflush_r+0x1a>
 800761c:	6a21      	ldr	r1, [r4, #32]
 800761e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007620:	4643      	mov	r3, r8
 8007622:	463a      	mov	r2, r7
 8007624:	4628      	mov	r0, r5
 8007626:	47b0      	blx	r6
 8007628:	2800      	cmp	r0, #0
 800762a:	dc06      	bgt.n	800763a <__sflush_r+0xfe>
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007632:	81a3      	strh	r3, [r4, #12]
 8007634:	f04f 30ff 	mov.w	r0, #4294967295
 8007638:	e78e      	b.n	8007558 <__sflush_r+0x1c>
 800763a:	4407      	add	r7, r0
 800763c:	eba8 0800 	sub.w	r8, r8, r0
 8007640:	e7e9      	b.n	8007616 <__sflush_r+0xda>
 8007642:	bf00      	nop
 8007644:	20400001 	.word	0x20400001

08007648 <_fflush_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	690b      	ldr	r3, [r1, #16]
 800764c:	4605      	mov	r5, r0
 800764e:	460c      	mov	r4, r1
 8007650:	b913      	cbnz	r3, 8007658 <_fflush_r+0x10>
 8007652:	2500      	movs	r5, #0
 8007654:	4628      	mov	r0, r5
 8007656:	bd38      	pop	{r3, r4, r5, pc}
 8007658:	b118      	cbz	r0, 8007662 <_fflush_r+0x1a>
 800765a:	6983      	ldr	r3, [r0, #24]
 800765c:	b90b      	cbnz	r3, 8007662 <_fflush_r+0x1a>
 800765e:	f000 f887 	bl	8007770 <__sinit>
 8007662:	4b14      	ldr	r3, [pc, #80]	; (80076b4 <_fflush_r+0x6c>)
 8007664:	429c      	cmp	r4, r3
 8007666:	d11b      	bne.n	80076a0 <_fflush_r+0x58>
 8007668:	686c      	ldr	r4, [r5, #4]
 800766a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d0ef      	beq.n	8007652 <_fflush_r+0xa>
 8007672:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007674:	07d0      	lsls	r0, r2, #31
 8007676:	d404      	bmi.n	8007682 <_fflush_r+0x3a>
 8007678:	0599      	lsls	r1, r3, #22
 800767a:	d402      	bmi.n	8007682 <_fflush_r+0x3a>
 800767c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800767e:	f000 f915 	bl	80078ac <__retarget_lock_acquire_recursive>
 8007682:	4628      	mov	r0, r5
 8007684:	4621      	mov	r1, r4
 8007686:	f7ff ff59 	bl	800753c <__sflush_r>
 800768a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800768c:	07da      	lsls	r2, r3, #31
 800768e:	4605      	mov	r5, r0
 8007690:	d4e0      	bmi.n	8007654 <_fflush_r+0xc>
 8007692:	89a3      	ldrh	r3, [r4, #12]
 8007694:	059b      	lsls	r3, r3, #22
 8007696:	d4dd      	bmi.n	8007654 <_fflush_r+0xc>
 8007698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800769a:	f000 f908 	bl	80078ae <__retarget_lock_release_recursive>
 800769e:	e7d9      	b.n	8007654 <_fflush_r+0xc>
 80076a0:	4b05      	ldr	r3, [pc, #20]	; (80076b8 <_fflush_r+0x70>)
 80076a2:	429c      	cmp	r4, r3
 80076a4:	d101      	bne.n	80076aa <_fflush_r+0x62>
 80076a6:	68ac      	ldr	r4, [r5, #8]
 80076a8:	e7df      	b.n	800766a <_fflush_r+0x22>
 80076aa:	4b04      	ldr	r3, [pc, #16]	; (80076bc <_fflush_r+0x74>)
 80076ac:	429c      	cmp	r4, r3
 80076ae:	bf08      	it	eq
 80076b0:	68ec      	ldreq	r4, [r5, #12]
 80076b2:	e7da      	b.n	800766a <_fflush_r+0x22>
 80076b4:	08007fbc 	.word	0x08007fbc
 80076b8:	08007fdc 	.word	0x08007fdc
 80076bc:	08007f9c 	.word	0x08007f9c

080076c0 <std>:
 80076c0:	2300      	movs	r3, #0
 80076c2:	b510      	push	{r4, lr}
 80076c4:	4604      	mov	r4, r0
 80076c6:	e9c0 3300 	strd	r3, r3, [r0]
 80076ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076ce:	6083      	str	r3, [r0, #8]
 80076d0:	8181      	strh	r1, [r0, #12]
 80076d2:	6643      	str	r3, [r0, #100]	; 0x64
 80076d4:	81c2      	strh	r2, [r0, #14]
 80076d6:	6183      	str	r3, [r0, #24]
 80076d8:	4619      	mov	r1, r3
 80076da:	2208      	movs	r2, #8
 80076dc:	305c      	adds	r0, #92	; 0x5c
 80076de:	f7fd fc35 	bl	8004f4c <memset>
 80076e2:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <std+0x38>)
 80076e4:	6263      	str	r3, [r4, #36]	; 0x24
 80076e6:	4b05      	ldr	r3, [pc, #20]	; (80076fc <std+0x3c>)
 80076e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80076ea:	4b05      	ldr	r3, [pc, #20]	; (8007700 <std+0x40>)
 80076ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076ee:	4b05      	ldr	r3, [pc, #20]	; (8007704 <std+0x44>)
 80076f0:	6224      	str	r4, [r4, #32]
 80076f2:	6323      	str	r3, [r4, #48]	; 0x30
 80076f4:	bd10      	pop	{r4, pc}
 80076f6:	bf00      	nop
 80076f8:	08007a11 	.word	0x08007a11
 80076fc:	08007a33 	.word	0x08007a33
 8007700:	08007a6b 	.word	0x08007a6b
 8007704:	08007a8f 	.word	0x08007a8f

08007708 <_cleanup_r>:
 8007708:	4901      	ldr	r1, [pc, #4]	; (8007710 <_cleanup_r+0x8>)
 800770a:	f000 b8af 	b.w	800786c <_fwalk_reent>
 800770e:	bf00      	nop
 8007710:	08007649 	.word	0x08007649

08007714 <__sfmoreglue>:
 8007714:	b570      	push	{r4, r5, r6, lr}
 8007716:	1e4a      	subs	r2, r1, #1
 8007718:	2568      	movs	r5, #104	; 0x68
 800771a:	4355      	muls	r5, r2
 800771c:	460e      	mov	r6, r1
 800771e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007722:	f7ff fa87 	bl	8006c34 <_malloc_r>
 8007726:	4604      	mov	r4, r0
 8007728:	b140      	cbz	r0, 800773c <__sfmoreglue+0x28>
 800772a:	2100      	movs	r1, #0
 800772c:	e9c0 1600 	strd	r1, r6, [r0]
 8007730:	300c      	adds	r0, #12
 8007732:	60a0      	str	r0, [r4, #8]
 8007734:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007738:	f7fd fc08 	bl	8004f4c <memset>
 800773c:	4620      	mov	r0, r4
 800773e:	bd70      	pop	{r4, r5, r6, pc}

08007740 <__sfp_lock_acquire>:
 8007740:	4801      	ldr	r0, [pc, #4]	; (8007748 <__sfp_lock_acquire+0x8>)
 8007742:	f000 b8b3 	b.w	80078ac <__retarget_lock_acquire_recursive>
 8007746:	bf00      	nop
 8007748:	200003e4 	.word	0x200003e4

0800774c <__sfp_lock_release>:
 800774c:	4801      	ldr	r0, [pc, #4]	; (8007754 <__sfp_lock_release+0x8>)
 800774e:	f000 b8ae 	b.w	80078ae <__retarget_lock_release_recursive>
 8007752:	bf00      	nop
 8007754:	200003e4 	.word	0x200003e4

08007758 <__sinit_lock_acquire>:
 8007758:	4801      	ldr	r0, [pc, #4]	; (8007760 <__sinit_lock_acquire+0x8>)
 800775a:	f000 b8a7 	b.w	80078ac <__retarget_lock_acquire_recursive>
 800775e:	bf00      	nop
 8007760:	200003df 	.word	0x200003df

08007764 <__sinit_lock_release>:
 8007764:	4801      	ldr	r0, [pc, #4]	; (800776c <__sinit_lock_release+0x8>)
 8007766:	f000 b8a2 	b.w	80078ae <__retarget_lock_release_recursive>
 800776a:	bf00      	nop
 800776c:	200003df 	.word	0x200003df

08007770 <__sinit>:
 8007770:	b510      	push	{r4, lr}
 8007772:	4604      	mov	r4, r0
 8007774:	f7ff fff0 	bl	8007758 <__sinit_lock_acquire>
 8007778:	69a3      	ldr	r3, [r4, #24]
 800777a:	b11b      	cbz	r3, 8007784 <__sinit+0x14>
 800777c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007780:	f7ff bff0 	b.w	8007764 <__sinit_lock_release>
 8007784:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007788:	6523      	str	r3, [r4, #80]	; 0x50
 800778a:	4b13      	ldr	r3, [pc, #76]	; (80077d8 <__sinit+0x68>)
 800778c:	4a13      	ldr	r2, [pc, #76]	; (80077dc <__sinit+0x6c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	62a2      	str	r2, [r4, #40]	; 0x28
 8007792:	42a3      	cmp	r3, r4
 8007794:	bf04      	itt	eq
 8007796:	2301      	moveq	r3, #1
 8007798:	61a3      	streq	r3, [r4, #24]
 800779a:	4620      	mov	r0, r4
 800779c:	f000 f820 	bl	80077e0 <__sfp>
 80077a0:	6060      	str	r0, [r4, #4]
 80077a2:	4620      	mov	r0, r4
 80077a4:	f000 f81c 	bl	80077e0 <__sfp>
 80077a8:	60a0      	str	r0, [r4, #8]
 80077aa:	4620      	mov	r0, r4
 80077ac:	f000 f818 	bl	80077e0 <__sfp>
 80077b0:	2200      	movs	r2, #0
 80077b2:	60e0      	str	r0, [r4, #12]
 80077b4:	2104      	movs	r1, #4
 80077b6:	6860      	ldr	r0, [r4, #4]
 80077b8:	f7ff ff82 	bl	80076c0 <std>
 80077bc:	68a0      	ldr	r0, [r4, #8]
 80077be:	2201      	movs	r2, #1
 80077c0:	2109      	movs	r1, #9
 80077c2:	f7ff ff7d 	bl	80076c0 <std>
 80077c6:	68e0      	ldr	r0, [r4, #12]
 80077c8:	2202      	movs	r2, #2
 80077ca:	2112      	movs	r1, #18
 80077cc:	f7ff ff78 	bl	80076c0 <std>
 80077d0:	2301      	movs	r3, #1
 80077d2:	61a3      	str	r3, [r4, #24]
 80077d4:	e7d2      	b.n	800777c <__sinit+0xc>
 80077d6:	bf00      	nop
 80077d8:	08007c18 	.word	0x08007c18
 80077dc:	08007709 	.word	0x08007709

080077e0 <__sfp>:
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	4607      	mov	r7, r0
 80077e4:	f7ff ffac 	bl	8007740 <__sfp_lock_acquire>
 80077e8:	4b1e      	ldr	r3, [pc, #120]	; (8007864 <__sfp+0x84>)
 80077ea:	681e      	ldr	r6, [r3, #0]
 80077ec:	69b3      	ldr	r3, [r6, #24]
 80077ee:	b913      	cbnz	r3, 80077f6 <__sfp+0x16>
 80077f0:	4630      	mov	r0, r6
 80077f2:	f7ff ffbd 	bl	8007770 <__sinit>
 80077f6:	3648      	adds	r6, #72	; 0x48
 80077f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	d503      	bpl.n	8007808 <__sfp+0x28>
 8007800:	6833      	ldr	r3, [r6, #0]
 8007802:	b30b      	cbz	r3, 8007848 <__sfp+0x68>
 8007804:	6836      	ldr	r6, [r6, #0]
 8007806:	e7f7      	b.n	80077f8 <__sfp+0x18>
 8007808:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800780c:	b9d5      	cbnz	r5, 8007844 <__sfp+0x64>
 800780e:	4b16      	ldr	r3, [pc, #88]	; (8007868 <__sfp+0x88>)
 8007810:	60e3      	str	r3, [r4, #12]
 8007812:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007816:	6665      	str	r5, [r4, #100]	; 0x64
 8007818:	f000 f847 	bl	80078aa <__retarget_lock_init_recursive>
 800781c:	f7ff ff96 	bl	800774c <__sfp_lock_release>
 8007820:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007824:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007828:	6025      	str	r5, [r4, #0]
 800782a:	61a5      	str	r5, [r4, #24]
 800782c:	2208      	movs	r2, #8
 800782e:	4629      	mov	r1, r5
 8007830:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007834:	f7fd fb8a 	bl	8004f4c <memset>
 8007838:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800783c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007840:	4620      	mov	r0, r4
 8007842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007844:	3468      	adds	r4, #104	; 0x68
 8007846:	e7d9      	b.n	80077fc <__sfp+0x1c>
 8007848:	2104      	movs	r1, #4
 800784a:	4638      	mov	r0, r7
 800784c:	f7ff ff62 	bl	8007714 <__sfmoreglue>
 8007850:	4604      	mov	r4, r0
 8007852:	6030      	str	r0, [r6, #0]
 8007854:	2800      	cmp	r0, #0
 8007856:	d1d5      	bne.n	8007804 <__sfp+0x24>
 8007858:	f7ff ff78 	bl	800774c <__sfp_lock_release>
 800785c:	230c      	movs	r3, #12
 800785e:	603b      	str	r3, [r7, #0]
 8007860:	e7ee      	b.n	8007840 <__sfp+0x60>
 8007862:	bf00      	nop
 8007864:	08007c18 	.word	0x08007c18
 8007868:	ffff0001 	.word	0xffff0001

0800786c <_fwalk_reent>:
 800786c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007870:	4606      	mov	r6, r0
 8007872:	4688      	mov	r8, r1
 8007874:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007878:	2700      	movs	r7, #0
 800787a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800787e:	f1b9 0901 	subs.w	r9, r9, #1
 8007882:	d505      	bpl.n	8007890 <_fwalk_reent+0x24>
 8007884:	6824      	ldr	r4, [r4, #0]
 8007886:	2c00      	cmp	r4, #0
 8007888:	d1f7      	bne.n	800787a <_fwalk_reent+0xe>
 800788a:	4638      	mov	r0, r7
 800788c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007890:	89ab      	ldrh	r3, [r5, #12]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d907      	bls.n	80078a6 <_fwalk_reent+0x3a>
 8007896:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800789a:	3301      	adds	r3, #1
 800789c:	d003      	beq.n	80078a6 <_fwalk_reent+0x3a>
 800789e:	4629      	mov	r1, r5
 80078a0:	4630      	mov	r0, r6
 80078a2:	47c0      	blx	r8
 80078a4:	4307      	orrs	r7, r0
 80078a6:	3568      	adds	r5, #104	; 0x68
 80078a8:	e7e9      	b.n	800787e <_fwalk_reent+0x12>

080078aa <__retarget_lock_init_recursive>:
 80078aa:	4770      	bx	lr

080078ac <__retarget_lock_acquire_recursive>:
 80078ac:	4770      	bx	lr

080078ae <__retarget_lock_release_recursive>:
 80078ae:	4770      	bx	lr

080078b0 <__swhatbuf_r>:
 80078b0:	b570      	push	{r4, r5, r6, lr}
 80078b2:	460e      	mov	r6, r1
 80078b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b8:	2900      	cmp	r1, #0
 80078ba:	b096      	sub	sp, #88	; 0x58
 80078bc:	4614      	mov	r4, r2
 80078be:	461d      	mov	r5, r3
 80078c0:	da07      	bge.n	80078d2 <__swhatbuf_r+0x22>
 80078c2:	2300      	movs	r3, #0
 80078c4:	602b      	str	r3, [r5, #0]
 80078c6:	89b3      	ldrh	r3, [r6, #12]
 80078c8:	061a      	lsls	r2, r3, #24
 80078ca:	d410      	bmi.n	80078ee <__swhatbuf_r+0x3e>
 80078cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078d0:	e00e      	b.n	80078f0 <__swhatbuf_r+0x40>
 80078d2:	466a      	mov	r2, sp
 80078d4:	f000 f902 	bl	8007adc <_fstat_r>
 80078d8:	2800      	cmp	r0, #0
 80078da:	dbf2      	blt.n	80078c2 <__swhatbuf_r+0x12>
 80078dc:	9a01      	ldr	r2, [sp, #4]
 80078de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078e6:	425a      	negs	r2, r3
 80078e8:	415a      	adcs	r2, r3
 80078ea:	602a      	str	r2, [r5, #0]
 80078ec:	e7ee      	b.n	80078cc <__swhatbuf_r+0x1c>
 80078ee:	2340      	movs	r3, #64	; 0x40
 80078f0:	2000      	movs	r0, #0
 80078f2:	6023      	str	r3, [r4, #0]
 80078f4:	b016      	add	sp, #88	; 0x58
 80078f6:	bd70      	pop	{r4, r5, r6, pc}

080078f8 <__smakebuf_r>:
 80078f8:	898b      	ldrh	r3, [r1, #12]
 80078fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078fc:	079d      	lsls	r5, r3, #30
 80078fe:	4606      	mov	r6, r0
 8007900:	460c      	mov	r4, r1
 8007902:	d507      	bpl.n	8007914 <__smakebuf_r+0x1c>
 8007904:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	6123      	str	r3, [r4, #16]
 800790c:	2301      	movs	r3, #1
 800790e:	6163      	str	r3, [r4, #20]
 8007910:	b002      	add	sp, #8
 8007912:	bd70      	pop	{r4, r5, r6, pc}
 8007914:	ab01      	add	r3, sp, #4
 8007916:	466a      	mov	r2, sp
 8007918:	f7ff ffca 	bl	80078b0 <__swhatbuf_r>
 800791c:	9900      	ldr	r1, [sp, #0]
 800791e:	4605      	mov	r5, r0
 8007920:	4630      	mov	r0, r6
 8007922:	f7ff f987 	bl	8006c34 <_malloc_r>
 8007926:	b948      	cbnz	r0, 800793c <__smakebuf_r+0x44>
 8007928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800792c:	059a      	lsls	r2, r3, #22
 800792e:	d4ef      	bmi.n	8007910 <__smakebuf_r+0x18>
 8007930:	f023 0303 	bic.w	r3, r3, #3
 8007934:	f043 0302 	orr.w	r3, r3, #2
 8007938:	81a3      	strh	r3, [r4, #12]
 800793a:	e7e3      	b.n	8007904 <__smakebuf_r+0xc>
 800793c:	4b0d      	ldr	r3, [pc, #52]	; (8007974 <__smakebuf_r+0x7c>)
 800793e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	6020      	str	r0, [r4, #0]
 8007944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007948:	81a3      	strh	r3, [r4, #12]
 800794a:	9b00      	ldr	r3, [sp, #0]
 800794c:	6163      	str	r3, [r4, #20]
 800794e:	9b01      	ldr	r3, [sp, #4]
 8007950:	6120      	str	r0, [r4, #16]
 8007952:	b15b      	cbz	r3, 800796c <__smakebuf_r+0x74>
 8007954:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007958:	4630      	mov	r0, r6
 800795a:	f000 f8d1 	bl	8007b00 <_isatty_r>
 800795e:	b128      	cbz	r0, 800796c <__smakebuf_r+0x74>
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	f023 0303 	bic.w	r3, r3, #3
 8007966:	f043 0301 	orr.w	r3, r3, #1
 800796a:	81a3      	strh	r3, [r4, #12]
 800796c:	89a0      	ldrh	r0, [r4, #12]
 800796e:	4305      	orrs	r5, r0
 8007970:	81a5      	strh	r5, [r4, #12]
 8007972:	e7cd      	b.n	8007910 <__smakebuf_r+0x18>
 8007974:	08007709 	.word	0x08007709

08007978 <_malloc_usable_size_r>:
 8007978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800797c:	1f18      	subs	r0, r3, #4
 800797e:	2b00      	cmp	r3, #0
 8007980:	bfbc      	itt	lt
 8007982:	580b      	ldrlt	r3, [r1, r0]
 8007984:	18c0      	addlt	r0, r0, r3
 8007986:	4770      	bx	lr

08007988 <_raise_r>:
 8007988:	291f      	cmp	r1, #31
 800798a:	b538      	push	{r3, r4, r5, lr}
 800798c:	4604      	mov	r4, r0
 800798e:	460d      	mov	r5, r1
 8007990:	d904      	bls.n	800799c <_raise_r+0x14>
 8007992:	2316      	movs	r3, #22
 8007994:	6003      	str	r3, [r0, #0]
 8007996:	f04f 30ff 	mov.w	r0, #4294967295
 800799a:	bd38      	pop	{r3, r4, r5, pc}
 800799c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800799e:	b112      	cbz	r2, 80079a6 <_raise_r+0x1e>
 80079a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079a4:	b94b      	cbnz	r3, 80079ba <_raise_r+0x32>
 80079a6:	4620      	mov	r0, r4
 80079a8:	f000 f830 	bl	8007a0c <_getpid_r>
 80079ac:	462a      	mov	r2, r5
 80079ae:	4601      	mov	r1, r0
 80079b0:	4620      	mov	r0, r4
 80079b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079b6:	f000 b817 	b.w	80079e8 <_kill_r>
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d00a      	beq.n	80079d4 <_raise_r+0x4c>
 80079be:	1c59      	adds	r1, r3, #1
 80079c0:	d103      	bne.n	80079ca <_raise_r+0x42>
 80079c2:	2316      	movs	r3, #22
 80079c4:	6003      	str	r3, [r0, #0]
 80079c6:	2001      	movs	r0, #1
 80079c8:	e7e7      	b.n	800799a <_raise_r+0x12>
 80079ca:	2400      	movs	r4, #0
 80079cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80079d0:	4628      	mov	r0, r5
 80079d2:	4798      	blx	r3
 80079d4:	2000      	movs	r0, #0
 80079d6:	e7e0      	b.n	800799a <_raise_r+0x12>

080079d8 <raise>:
 80079d8:	4b02      	ldr	r3, [pc, #8]	; (80079e4 <raise+0xc>)
 80079da:	4601      	mov	r1, r0
 80079dc:	6818      	ldr	r0, [r3, #0]
 80079de:	f7ff bfd3 	b.w	8007988 <_raise_r>
 80079e2:	bf00      	nop
 80079e4:	2000000c 	.word	0x2000000c

080079e8 <_kill_r>:
 80079e8:	b538      	push	{r3, r4, r5, lr}
 80079ea:	4d07      	ldr	r5, [pc, #28]	; (8007a08 <_kill_r+0x20>)
 80079ec:	2300      	movs	r3, #0
 80079ee:	4604      	mov	r4, r0
 80079f0:	4608      	mov	r0, r1
 80079f2:	4611      	mov	r1, r2
 80079f4:	602b      	str	r3, [r5, #0]
 80079f6:	f7f9 fc71 	bl	80012dc <_kill>
 80079fa:	1c43      	adds	r3, r0, #1
 80079fc:	d102      	bne.n	8007a04 <_kill_r+0x1c>
 80079fe:	682b      	ldr	r3, [r5, #0]
 8007a00:	b103      	cbz	r3, 8007a04 <_kill_r+0x1c>
 8007a02:	6023      	str	r3, [r4, #0]
 8007a04:	bd38      	pop	{r3, r4, r5, pc}
 8007a06:	bf00      	nop
 8007a08:	200003d8 	.word	0x200003d8

08007a0c <_getpid_r>:
 8007a0c:	f7f9 bc5e 	b.w	80012cc <_getpid>

08007a10 <__sread>:
 8007a10:	b510      	push	{r4, lr}
 8007a12:	460c      	mov	r4, r1
 8007a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a18:	f000 f894 	bl	8007b44 <_read_r>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	bfab      	itete	ge
 8007a20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a22:	89a3      	ldrhlt	r3, [r4, #12]
 8007a24:	181b      	addge	r3, r3, r0
 8007a26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a2a:	bfac      	ite	ge
 8007a2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a2e:	81a3      	strhlt	r3, [r4, #12]
 8007a30:	bd10      	pop	{r4, pc}

08007a32 <__swrite>:
 8007a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a36:	461f      	mov	r7, r3
 8007a38:	898b      	ldrh	r3, [r1, #12]
 8007a3a:	05db      	lsls	r3, r3, #23
 8007a3c:	4605      	mov	r5, r0
 8007a3e:	460c      	mov	r4, r1
 8007a40:	4616      	mov	r6, r2
 8007a42:	d505      	bpl.n	8007a50 <__swrite+0x1e>
 8007a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a48:	2302      	movs	r3, #2
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f000 f868 	bl	8007b20 <_lseek_r>
 8007a50:	89a3      	ldrh	r3, [r4, #12]
 8007a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a5a:	81a3      	strh	r3, [r4, #12]
 8007a5c:	4632      	mov	r2, r6
 8007a5e:	463b      	mov	r3, r7
 8007a60:	4628      	mov	r0, r5
 8007a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a66:	f000 b817 	b.w	8007a98 <_write_r>

08007a6a <__sseek>:
 8007a6a:	b510      	push	{r4, lr}
 8007a6c:	460c      	mov	r4, r1
 8007a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a72:	f000 f855 	bl	8007b20 <_lseek_r>
 8007a76:	1c43      	adds	r3, r0, #1
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	bf15      	itete	ne
 8007a7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a86:	81a3      	strheq	r3, [r4, #12]
 8007a88:	bf18      	it	ne
 8007a8a:	81a3      	strhne	r3, [r4, #12]
 8007a8c:	bd10      	pop	{r4, pc}

08007a8e <__sclose>:
 8007a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a92:	f000 b813 	b.w	8007abc <_close_r>
	...

08007a98 <_write_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	4d07      	ldr	r5, [pc, #28]	; (8007ab8 <_write_r+0x20>)
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	4608      	mov	r0, r1
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	602a      	str	r2, [r5, #0]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f7f9 fc4f 	bl	800134a <_write>
 8007aac:	1c43      	adds	r3, r0, #1
 8007aae:	d102      	bne.n	8007ab6 <_write_r+0x1e>
 8007ab0:	682b      	ldr	r3, [r5, #0]
 8007ab2:	b103      	cbz	r3, 8007ab6 <_write_r+0x1e>
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	bd38      	pop	{r3, r4, r5, pc}
 8007ab8:	200003d8 	.word	0x200003d8

08007abc <_close_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4d06      	ldr	r5, [pc, #24]	; (8007ad8 <_close_r+0x1c>)
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	4608      	mov	r0, r1
 8007ac6:	602b      	str	r3, [r5, #0]
 8007ac8:	f7f9 fc5b 	bl	8001382 <_close>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d102      	bne.n	8007ad6 <_close_r+0x1a>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	b103      	cbz	r3, 8007ad6 <_close_r+0x1a>
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	200003d8 	.word	0x200003d8

08007adc <_fstat_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4d07      	ldr	r5, [pc, #28]	; (8007afc <_fstat_r+0x20>)
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	602b      	str	r3, [r5, #0]
 8007aea:	f7f9 fc56 	bl	800139a <_fstat>
 8007aee:	1c43      	adds	r3, r0, #1
 8007af0:	d102      	bne.n	8007af8 <_fstat_r+0x1c>
 8007af2:	682b      	ldr	r3, [r5, #0]
 8007af4:	b103      	cbz	r3, 8007af8 <_fstat_r+0x1c>
 8007af6:	6023      	str	r3, [r4, #0]
 8007af8:	bd38      	pop	{r3, r4, r5, pc}
 8007afa:	bf00      	nop
 8007afc:	200003d8 	.word	0x200003d8

08007b00 <_isatty_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4d06      	ldr	r5, [pc, #24]	; (8007b1c <_isatty_r+0x1c>)
 8007b04:	2300      	movs	r3, #0
 8007b06:	4604      	mov	r4, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	602b      	str	r3, [r5, #0]
 8007b0c:	f7f9 fc55 	bl	80013ba <_isatty>
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	d102      	bne.n	8007b1a <_isatty_r+0x1a>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	b103      	cbz	r3, 8007b1a <_isatty_r+0x1a>
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	200003d8 	.word	0x200003d8

08007b20 <_lseek_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4d07      	ldr	r5, [pc, #28]	; (8007b40 <_lseek_r+0x20>)
 8007b24:	4604      	mov	r4, r0
 8007b26:	4608      	mov	r0, r1
 8007b28:	4611      	mov	r1, r2
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	602a      	str	r2, [r5, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	f7f9 fc4e 	bl	80013d0 <_lseek>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d102      	bne.n	8007b3e <_lseek_r+0x1e>
 8007b38:	682b      	ldr	r3, [r5, #0]
 8007b3a:	b103      	cbz	r3, 8007b3e <_lseek_r+0x1e>
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	200003d8 	.word	0x200003d8

08007b44 <_read_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	4d07      	ldr	r5, [pc, #28]	; (8007b64 <_read_r+0x20>)
 8007b48:	4604      	mov	r4, r0
 8007b4a:	4608      	mov	r0, r1
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	2200      	movs	r2, #0
 8007b50:	602a      	str	r2, [r5, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	f7f9 fbdc 	bl	8001310 <_read>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d102      	bne.n	8007b62 <_read_r+0x1e>
 8007b5c:	682b      	ldr	r3, [r5, #0]
 8007b5e:	b103      	cbz	r3, 8007b62 <_read_r+0x1e>
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	200003d8 	.word	0x200003d8

08007b68 <_init>:
 8007b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6a:	bf00      	nop
 8007b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b6e:	bc08      	pop	{r3}
 8007b70:	469e      	mov	lr, r3
 8007b72:	4770      	bx	lr

08007b74 <_fini>:
 8007b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b76:	bf00      	nop
 8007b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7a:	bc08      	pop	{r3}
 8007b7c:	469e      	mov	lr, r3
 8007b7e:	4770      	bx	lr

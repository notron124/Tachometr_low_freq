
usart_usb_message.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075f8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  080077f8  080077f8  000177f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c5c  08007c5c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007c5c  08007c5c  00017c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c64  08007c64  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c64  08007c64  00017c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c68  08007c68  00017c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  200001dc  08007e48  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08007e48  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e0e  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020fe  00000000  00000000  00032018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00034118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00034ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a63  00000000  00000000  00035bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001036a  00000000  00000000  0005e613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fca9b  00000000  00000000  0006e97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016b418  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d0  00000000  00000000  0016b46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	080077e0 	.word	0x080077e0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	080077e0 	.word	0x080077e0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_TIM_IC_CaptureCallback>:
                HAL_TIM_Base_Start_IT(&htim1);
        }
}*/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b09e      	sub	sp, #120	; 0x78
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a4d      	ldr	r2, [pc, #308]	; (8000728 <HAL_TIM_IC_CaptureCallback+0x140>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	f040 808d 	bne.w	8000714 <HAL_TIM_IC_CaptureCallback+0x12c>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	7f1b      	ldrb	r3, [r3, #28]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	f040 8088 	bne.w	8000714 <HAL_TIM_IC_CaptureCallback+0x12c>
		{
			count++;
 8000604:	4b49      	ldr	r3, [pc, #292]	; (800072c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	3301      	adds	r3, #1
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b47      	ldr	r3, [pc, #284]	; (800072c <HAL_TIM_IC_CaptureCallback+0x144>)
 800060e:	701a      	strb	r2, [r3, #0]
			if(count == 1)
 8000610:	4b46      	ldr	r3, [pc, #280]	; (800072c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d108      	bne.n	800062a <HAL_TIM_IC_CaptureCallback+0x42>
			{
				__HAL_TIM_SET_COUNTER(&htim4, 0x0000);
 8000618:	4b43      	ldr	r3, [pc, #268]	; (8000728 <HAL_TIM_IC_CaptureCallback+0x140>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
				__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 8000620:	4b43      	ldr	r3, [pc, #268]	; (8000730 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2200      	movs	r2, #0
 8000626:	625a      	str	r2, [r3, #36]	; 0x24

				HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
			}
		}
	}
}
 8000628:	e074      	b.n	8000714 <HAL_TIM_IC_CaptureCallback+0x12c>
			else if(count == 2)
 800062a:	4b40      	ldr	r3, [pc, #256]	; (800072c <HAL_TIM_IC_CaptureCallback+0x144>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b02      	cmp	r3, #2
 8000630:	d170      	bne.n	8000714 <HAL_TIM_IC_CaptureCallback+0x12c>
				HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);
 8000632:	2100      	movs	r1, #0
 8000634:	483c      	ldr	r0, [pc, #240]	; (8000728 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000636:	f002 fd9d 	bl	8003174 <HAL_TIM_IC_Stop_IT>
				count = 0;
 800063a:	4b3c      	ldr	r3, [pc, #240]	; (800072c <HAL_TIM_IC_CaptureCallback+0x144>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
				uint16_t countMain = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000640:	2100      	movs	r1, #0
 8000642:	4839      	ldr	r0, [pc, #228]	; (8000728 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000644:	f003 f976 	bl	8003934 <HAL_TIM_ReadCapturedValue>
 8000648:	4603      	mov	r3, r0
 800064a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
				uint16_t countSecondary = __HAL_TIM_GET_COUNTER(&htim3);
 800064e:	4b38      	ldr	r3, [pc, #224]	; (8000730 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000654:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
				uint16_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3);
 8000658:	4b35      	ldr	r3, [pc, #212]	; (8000730 <HAL_TIM_IC_CaptureCallback+0x148>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
				uint32_t res = countMain + (countSecondary * arr) + countSecondary;
 8000662:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8000666:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800066a:	f8b7 1072 	ldrh.w	r1, [r7, #114]	; 0x72
 800066e:	fb01 f303 	mul.w	r3, r1, r3
 8000672:	441a      	add	r2, r3
 8000674:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000678:	4413      	add	r3, r2
 800067a:	66fb      	str	r3, [r7, #108]	; 0x6c
				freq = 1 / (res / 1000000.0);
 800067c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800067e:	ee07 3a90 	vmov	s15, r3
 8000682:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000686:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8000720 <HAL_TIM_IC_CaptureCallback+0x138>
 800068a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800068e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000692:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000696:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800069a:	4b26      	ldr	r3, [pc, #152]	; (8000734 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800069c:	edc3 7a00 	vstr	s15, [r3]
				freq -= (freq*5)/1000;
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80006a2:	ed93 7a00 	vldr	s14, [r3]
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80006a8:	edd3 7a00 	vldr	s15, [r3]
 80006ac:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80006b0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80006b4:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8000738 <HAL_TIM_IC_CaptureCallback+0x150>
 80006b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80006bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006c0:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80006c2:	edc3 7a00 	vstr	s15, [r3]
				char str[96] = {0,};
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	225c      	movs	r2, #92	; 0x5c
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 fa78 	bl	8004bc8 <memset>
				sprintf(str, "Frequency: %.3f Hz\n--------------------\n", (float)freq);
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80006da:	edd3 7a00 	vldr	s15, [r3]
 80006de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006e2:	f107 000c 	add.w	r0, r7, #12
 80006e6:	ec53 2b17 	vmov	r2, r3, d7
 80006ea:	4914      	ldr	r1, [pc, #80]	; (800073c <HAL_TIM_IC_CaptureCallback+0x154>)
 80006ec:	f004 feb6 	bl	800545c <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 1000);
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fda3 	bl	8000240 <strlen>
 80006fa:	4603      	mov	r3, r0
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	f107 010c 	add.w	r1, r7, #12
 8000702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000706:	480e      	ldr	r0, [pc, #56]	; (8000740 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000708:	f003 fd8e 	bl	8004228 <HAL_UART_Transmit>
				HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800070c:	2100      	movs	r1, #0
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000710:	f002 fbe0 	bl	8002ed4 <HAL_TIM_IC_Start_IT>
}
 8000714:	bf00      	nop
 8000716:	3778      	adds	r7, #120	; 0x78
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	f3af 8000 	nop.w
 8000720:	00000000 	.word	0x00000000
 8000724:	412e8480 	.word	0x412e8480
 8000728:	2000020c 	.word	0x2000020c
 800072c:	200001f8 	.word	0x200001f8
 8000730:	200002dc 	.word	0x200002dc
 8000734:	200001fc 	.word	0x200001fc
 8000738:	447a0000 	.word	0x447a0000
 800073c:	080077f8 	.word	0x080077f8
 8000740:	20000258 	.word	0x20000258
 8000744:	00000000 	.word	0x00000000

08000748 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b09e      	sub	sp, #120	; 0x78
 800074c:	af04      	add	r7, sp, #16
 800074e:	6078      	str	r0, [r7, #4]
	if(htim == &htim1)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a35      	ldr	r2, [pc, #212]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d159      	bne.n	800080c <HAL_TIM_PeriodElapsedCallback+0xc4>
	{
		freq = __HAL_TIM_GET_COUNTER(&htim2) - 6*(__HAL_TIM_GET_COUNTER(&htim2)/1000);
 8000758:	4b34      	ldr	r3, [pc, #208]	; (800082c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800075e:	4b33      	ldr	r3, [pc, #204]	; (800082c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000764:	4a32      	ldr	r2, [pc, #200]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000766:	fba2 2303 	umull	r2, r3, r2, r3
 800076a:	099a      	lsrs	r2, r3, #6
 800076c:	4613      	mov	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	1acb      	subs	r3, r1, r3
 8000776:	ee07 3a90 	vmov	s15, r3
 800077a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800077e:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000780:	edc3 7a00 	vstr	s15, [r3]

		char str[96] = {0,};
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	225c      	movs	r2, #92	; 0x5c
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f004 fa19 	bl	8004bc8 <memset>

		sprintf(str,"Frequency: %.3f MHz | %.3f KHz | %lu Hz\n--------------------\n", (float)freq / 1000000.0, (float)freq / 1000.0, (uint32_t)freq);
 8000796:	4b27      	ldr	r3, [pc, #156]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000798:	edd3 7a00 	vldr	s15, [r3]
 800079c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007a0:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8000818 <HAL_TIM_PeriodElapsedCallback+0xd0>
 80007a4:	ee87 4b06 	vdiv.f64	d4, d7, d6
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80007aa:	edd3 7a00 	vldr	s15, [r3]
 80007ae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80007b2:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8000820 <HAL_TIM_PeriodElapsedCallback+0xd8>
 80007b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007ba:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80007bc:	edd3 6a00 	vldr	s13, [r3]
 80007c0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80007c4:	ee16 3a90 	vmov	r3, s13
 80007c8:	f107 0008 	add.w	r0, r7, #8
 80007cc:	9302      	str	r3, [sp, #8]
 80007ce:	ed8d 7b00 	vstr	d7, [sp]
 80007d2:	ec53 2b14 	vmov	r2, r3, d4
 80007d6:	4918      	ldr	r1, [pc, #96]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80007d8:	f004 fe40 	bl	800545c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), 1000);
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fd2d 	bl	8000240 <strlen>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	f107 0108 	add.w	r1, r7, #8
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	4812      	ldr	r0, [pc, #72]	; (800083c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80007f4:	f003 fd18 	bl	8004228 <HAL_UART_Transmit>

		HAL_TIM_Base_Stop_IT(&htim1);
 80007f8:	480b      	ldr	r0, [pc, #44]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80007fa:	f002 fae5 	bl	8002dc8 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(&htim2, 0x0000);
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim1);
 8000806:	4808      	ldr	r0, [pc, #32]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000808:	f002 fa66 	bl	8002cd8 <HAL_TIM_Base_Start_IT>
	}
}
 800080c:	bf00      	nop
 800080e:	3768      	adds	r7, #104	; 0x68
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	f3af 8000 	nop.w
 8000818:	00000000 	.word	0x00000000
 800081c:	412e8480 	.word	0x412e8480
 8000820:	00000000 	.word	0x00000000
 8000824:	408f4000 	.word	0x408f4000
 8000828:	20000328 	.word	0x20000328
 800082c:	20000374 	.word	0x20000374
 8000830:	10624dd3 	.word	0x10624dd3
 8000834:	200001fc 	.word	0x200001fc
 8000838:	08007824 	.word	0x08007824
 800083c:	20000258 	.word	0x20000258

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f000 fd17 	bl	8001276 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f84e 	bl	80008e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 fa78 	bl	8000d40 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000850:	f000 fa46 	bl	8000ce0 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000854:	f000 f8d8 	bl	8000a08 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000858:	f000 f934 	bl	8000ac4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800085c:	f000 f99c 	bl	8000b98 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000860:	f000 f9ea 	bl	8000c38 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000864:	2100      	movs	r1, #0
 8000866:	481b      	ldr	r0, [pc, #108]	; (80008d4 <main+0x94>)
 8000868:	f002 fb34 	bl	8002ed4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 800086c:	481a      	ldr	r0, [pc, #104]	; (80008d8 <main+0x98>)
 800086e:	f002 f99b 	bl	8002ba8 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  if (freq < 2)
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <main+0x9c>)
 8000874:	edd3 7a00 	vldr	s15, [r3]
 8000878:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800087c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000884:	d50d      	bpl.n	80008a2 <main+0x62>
	  {
		  HAL_TIM_Base_Stop_IT(&htim1);
 8000886:	4816      	ldr	r0, [pc, #88]	; (80008e0 <main+0xa0>)
 8000888:	f002 fa9e 	bl	8002dc8 <HAL_TIM_Base_Stop_IT>
		  HAL_TIM_Base_Stop(&htim2);
 800088c:	4815      	ldr	r0, [pc, #84]	; (80008e4 <main+0xa4>)
 800088e:	f002 f9fb 	bl	8002c88 <HAL_TIM_Base_Stop>
		  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000892:	2100      	movs	r1, #0
 8000894:	480f      	ldr	r0, [pc, #60]	; (80008d4 <main+0x94>)
 8000896:	f002 fb1d 	bl	8002ed4 <HAL_TIM_IC_Start_IT>
		  HAL_TIM_Base_Start(&htim3);
 800089a:	480f      	ldr	r0, [pc, #60]	; (80008d8 <main+0x98>)
 800089c:	f002 f984 	bl	8002ba8 <HAL_TIM_Base_Start>
 80008a0:	e7e7      	b.n	8000872 <main+0x32>
	  }
	  else if (freq >= 2)
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <main+0x9c>)
 80008a4:	edd3 7a00 	vldr	s15, [r3]
 80008a8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80008ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b4:	db0c      	blt.n	80008d0 <main+0x90>
	  {
		  HAL_TIM_IC_Stop_IT(&htim4, TIM_CHANNEL_1);
 80008b6:	2100      	movs	r1, #0
 80008b8:	4806      	ldr	r0, [pc, #24]	; (80008d4 <main+0x94>)
 80008ba:	f002 fc5b 	bl	8003174 <HAL_TIM_IC_Stop_IT>
		  HAL_TIM_Base_Stop(&htim3);
 80008be:	4806      	ldr	r0, [pc, #24]	; (80008d8 <main+0x98>)
 80008c0:	f002 f9e2 	bl	8002c88 <HAL_TIM_Base_Stop>
		  HAL_TIM_Base_Start_IT(&htim1);
 80008c4:	4806      	ldr	r0, [pc, #24]	; (80008e0 <main+0xa0>)
 80008c6:	f002 fa07 	bl	8002cd8 <HAL_TIM_Base_Start_IT>
		  HAL_TIM_Base_Start(&htim2);
 80008ca:	4806      	ldr	r0, [pc, #24]	; (80008e4 <main+0xa4>)
 80008cc:	f002 f96c 	bl	8002ba8 <HAL_TIM_Base_Start>
	  if (freq < 2)
 80008d0:	e7cf      	b.n	8000872 <main+0x32>
 80008d2:	bf00      	nop
 80008d4:	2000020c 	.word	0x2000020c
 80008d8:	200002dc 	.word	0x200002dc
 80008dc:	200001fc 	.word	0x200001fc
 80008e0:	20000328 	.word	0x20000328
 80008e4:	20000374 	.word	0x20000374

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0b8      	sub	sp, #224	; 0xe0
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008f2:	2234      	movs	r2, #52	; 0x34
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f004 f966 	bl	8004bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	2290      	movs	r2, #144	; 0x90
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f004 f957 	bl	8004bc8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b39      	ldr	r3, [pc, #228]	; (8000a00 <SystemClock_Config+0x118>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a38      	ldr	r2, [pc, #224]	; (8000a00 <SystemClock_Config+0x118>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b36      	ldr	r3, [pc, #216]	; (8000a00 <SystemClock_Config+0x118>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000932:	4b34      	ldr	r3, [pc, #208]	; (8000a04 <SystemClock_Config+0x11c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800093a:	4a32      	ldr	r2, [pc, #200]	; (8000a04 <SystemClock_Config+0x11c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6013      	str	r3, [r2, #0]
 8000942:	4b30      	ldr	r3, [pc, #192]	; (8000a04 <SystemClock_Config+0x11c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800094e:	2302      	movs	r3, #2
 8000950:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000954:	2301      	movs	r3, #1
 8000956:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095a:	2310      	movs	r3, #16
 800095c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000960:	2302      	movs	r3, #2
 8000962:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000966:	2300      	movs	r3, #0
 8000968:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 800096c:	2308      	movs	r3, #8
 800096e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 108;
 8000972:	236c      	movs	r3, #108	; 0x6c
 8000974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000978:	2302      	movs	r3, #2
 800097a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800097e:	2309      	movs	r3, #9
 8000980:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000984:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000988:	4618      	mov	r0, r3
 800098a:	f000 ffdf 	bl	800194c <HAL_RCC_OscConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000994:	f000 fa04 	bl	8000da0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000998:	f000 ff88 	bl	80018ac <HAL_PWREx_EnableOverDrive>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80009a2:	f000 f9fd 	bl	8000da0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a6:	230f      	movs	r3, #15
 80009a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ac:	2302      	movs	r3, #2
 80009ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009c8:	2101      	movs	r1, #1
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fa6c 	bl	8001ea8 <HAL_RCC_ClockConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80009d6:	f000 f9e3 	bl	8000da0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009de:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	4618      	mov	r0, r3
 80009ea:	f001 fc5d 	bl	80022a8 <HAL_RCCEx_PeriphCLKConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80009f4:	f000 f9d4 	bl	8000da0 <Error_Handler>
  }
}
 80009f8:	bf00      	nop
 80009fa:	37e0      	adds	r7, #224	; 0xe0
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40007000 	.word	0x40007000

08000a08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a26:	4b25      	ldr	r3, [pc, #148]	; (8000abc <MX_TIM1_Init+0xb4>)
 8000a28:	4a25      	ldr	r2, [pc, #148]	; (8000ac0 <MX_TIM1_Init+0xb8>)
 8000a2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5399;
 8000a2c:	4b23      	ldr	r3, [pc, #140]	; (8000abc <MX_TIM1_Init+0xb4>)
 8000a2e:	f241 5217 	movw	r2, #5399	; 0x1517
 8000a32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a34:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_TIM1_Init+0xb4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000a3a:	4b20      	ldr	r3, [pc, #128]	; (8000abc <MX_TIM1_Init+0xb4>)
 8000a3c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_TIM1_Init+0xb4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_TIM1_Init+0xb4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_TIM1_Init+0xb4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a54:	4819      	ldr	r0, [pc, #100]	; (8000abc <MX_TIM1_Init+0xb4>)
 8000a56:	f002 f84f 	bl	8002af8 <HAL_TIM_Base_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000a60:	f000 f99e 	bl	8000da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4812      	ldr	r0, [pc, #72]	; (8000abc <MX_TIM1_Init+0xb4>)
 8000a72:	f002 fe53 	bl	800371c <HAL_TIM_ConfigClockSource>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000a7c:	f000 f990 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000a80:	2108      	movs	r1, #8
 8000a82:	480e      	ldr	r0, [pc, #56]	; (8000abc <MX_TIM1_Init+0xb4>)
 8000a84:	f002 fc34 	bl	80032f0 <HAL_TIM_OnePulse_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000a8e:	f000 f987 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000a92:	2310      	movs	r3, #16
 8000a94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_TIM1_Init+0xb4>)
 8000aa4:	f003 fac6 	bl	8004034 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000aae:	f000 f977 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3720      	adds	r7, #32
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000328 	.word	0x20000328
 8000ac0:	40010000 	.word	0x40010000

08000ac4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	; 0x30
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aca:	f107 0320 	add.w	r3, r7, #32
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae8:	463b      	mov	r3, r7
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000af2:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <MX_TIM2_Init+0xd0>)
 8000af4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000af8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <MX_TIM2_Init+0xd0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <MX_TIM2_Init+0xd0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b06:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <MX_TIM2_Init+0xd0>)
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <MX_TIM2_Init+0xd0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <MX_TIM2_Init+0xd0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b1a:	481e      	ldr	r0, [pc, #120]	; (8000b94 <MX_TIM2_Init+0xd0>)
 8000b1c:	f001 ffec 	bl	8002af8 <HAL_TIM_Base_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000b26:	f000 f93b 	bl	8000da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000b2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2e:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  sClockSourceConfig.ClockFilter = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b3c:	f107 0320 	add.w	r3, r7, #32
 8000b40:	4619      	mov	r1, r3
 8000b42:	4814      	ldr	r0, [pc, #80]	; (8000b94 <MX_TIM2_Init+0xd0>)
 8000b44:	f002 fdea 	bl	800371c <HAL_TIM_ConfigClockSource>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b4e:	f000 f927 	bl	8000da0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8000b52:	2305      	movs	r3, #5
 8000b54:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <MX_TIM2_Init+0xd0>)
 8000b62:	f002 fea5 	bl	80038b0 <HAL_TIM_SlaveConfigSynchro>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000b6c:	f000 f918 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b70:	2320      	movs	r3, #32
 8000b72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_TIM2_Init+0xd0>)
 8000b7e:	f003 fa59 	bl	8004034 <HAL_TIMEx_MasterConfigSynchronization>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8000b88:	f000 f90a 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	3730      	adds	r7, #48	; 0x30
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000374 	.word	0x20000374

08000b98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_TIM3_Init+0x98>)
 8000bba:	4a1e      	ldr	r2, [pc, #120]	; (8000c34 <MX_TIM3_Init+0x9c>)
 8000bbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_TIM3_Init+0x98>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_TIM3_Init+0x98>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_TIM3_Init+0x98>)
 8000bcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <MX_TIM3_Init+0x98>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <MX_TIM3_Init+0x98>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bde:	4814      	ldr	r0, [pc, #80]	; (8000c30 <MX_TIM3_Init+0x98>)
 8000be0:	f001 ff8a 	bl	8002af8 <HAL_TIM_Base_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000bea:	f000 f8d9 	bl	8000da0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8000bf2:	2330      	movs	r3, #48	; 0x30
 8000bf4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <MX_TIM3_Init+0x98>)
 8000bfe:	f002 fe57 	bl	80038b0 <HAL_TIM_SlaveConfigSynchro>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000c08:	f000 f8ca 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_TIM3_Init+0x98>)
 8000c1a:	f003 fa0b 	bl	8004034 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000c24:	f000 f8bc 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	3720      	adds	r7, #32
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200002dc 	.word	0x200002dc
 8000c34:	40000400 	.word	0x40000400

08000c38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <MX_TIM4_Init+0xa0>)
 8000c58:	4a20      	ldr	r2, [pc, #128]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 53;
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <MX_TIM4_Init+0xa0>)
 8000c5e:	2235      	movs	r2, #53	; 0x35
 8000c60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <MX_TIM4_Init+0xa0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <MX_TIM4_Init+0xa0>)
 8000c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <MX_TIM4_Init+0xa0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_TIM4_Init+0xa0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000c7c:	4816      	ldr	r0, [pc, #88]	; (8000cd8 <MX_TIM4_Init+0xa0>)
 8000c7e:	f002 f8d2 	bl	8002e26 <HAL_TIM_IC_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000c88:	f000 f88a 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c8c:	2320      	movs	r3, #32
 8000c8e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480f      	ldr	r0, [pc, #60]	; (8000cd8 <MX_TIM4_Init+0xa0>)
 8000c9c:	f003 f9ca 	bl	8004034 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000ca6:	f000 f87b 	bl	8000da0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_TIM4_Init+0xa0>)
 8000cc2:	f002 fc8e 	bl	80035e2 <HAL_TIM_IC_ConfigChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000ccc:	f000 f868 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2000020c 	.word	0x2000020c
 8000cdc:	40000800 	.word	0x40000800

08000ce0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_USART3_UART_Init+0x58>)
 8000ce6:	4a15      	ldr	r2, [pc, #84]	; (8000d3c <MX_USART3_UART_Init+0x5c>)
 8000ce8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_USART3_UART_Init+0x58>)
 8000cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_USART3_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_USART3_UART_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_USART3_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_USART3_UART_Init+0x58>)
 8000d06:	220c      	movs	r2, #12
 8000d08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_USART3_UART_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_USART3_UART_Init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_USART3_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_USART3_UART_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_USART3_UART_Init+0x58>)
 8000d24:	f003 fa32 	bl	800418c <HAL_UART_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d2e:	f000 f837 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000258 	.word	0x20000258
 8000d3c:	40004800 	.word	0x40004800

08000d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <MX_GPIO_Init+0x5c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <MX_GPIO_Init+0x5c>)
 8000d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MX_GPIO_Init+0x5c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_GPIO_Init+0x5c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <MX_GPIO_Init+0x5c>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_GPIO_Init+0x5c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_GPIO_Init+0x5c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <MX_GPIO_Init+0x5c>)
 8000d7c:	f043 0308 	orr.w	r3, r3, #8
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_GPIO_Init+0x5c>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0308 	and.w	r3, r3, #8
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]

}
 8000d8e:	bf00      	nop
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <Error_Handler+0x8>
	...

08000dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_MspInit+0x44>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <HAL_MspInit+0x44>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_MspInit+0x44>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_MspInit+0x44>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_MspInit+0x44>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_MspInit+0x44>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800

08000df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	; 0x30
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a2d      	ldr	r2, [pc, #180]	; (8000ec8 <HAL_TIM_Base_MspInit+0xd4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d114      	bne.n	8000e40 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e16:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <HAL_TIM_Base_MspInit+0xd8>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	4a2c      	ldr	r2, [pc, #176]	; (8000ecc <HAL_TIM_Base_MspInit+0xd8>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6453      	str	r3, [r2, #68]	; 0x44
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <HAL_TIM_Base_MspInit+0xd8>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	61bb      	str	r3, [r7, #24]
 8000e2c:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	2019      	movs	r0, #25
 8000e34:	f000 fb57 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e38:	2019      	movs	r0, #25
 8000e3a:	f000 fb70 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e3e:	e03e      	b.n	8000ebe <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e48:	d128      	bne.n	8000e9c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e4a:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <HAL_TIM_Base_MspInit+0xd8>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ecc <HAL_TIM_Base_MspInit+0xd8>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_TIM_Base_MspInit+0xd8>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_TIM_Base_MspInit+0xd8>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <HAL_TIM_Base_MspInit+0xd8>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <HAL_TIM_Base_MspInit+0xd8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	4619      	mov	r1, r3
 8000e94:	480e      	ldr	r0, [pc, #56]	; (8000ed0 <HAL_TIM_Base_MspInit+0xdc>)
 8000e96:	f000 fb5d 	bl	8001554 <HAL_GPIO_Init>
}
 8000e9a:	e010      	b.n	8000ebe <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0c      	ldr	r2, [pc, #48]	; (8000ed4 <HAL_TIM_Base_MspInit+0xe0>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d10b      	bne.n	8000ebe <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_TIM_Base_MspInit+0xd8>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_TIM_Base_MspInit+0xd8>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_TIM_Base_MspInit+0xd8>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
}
 8000ebe:	bf00      	nop
 8000ec0:	3730      	adds	r7, #48	; 0x30
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40010000 	.word	0x40010000
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	40000400 	.word	0x40000400

08000ed8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a1b      	ldr	r2, [pc, #108]	; (8000f64 <HAL_TIM_IC_MspInit+0x8c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d130      	bne.n	8000f5c <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <HAL_TIM_IC_MspInit+0x90>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a1a      	ldr	r2, [pc, #104]	; (8000f68 <HAL_TIM_IC_MspInit+0x90>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_TIM_IC_MspInit+0x90>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_TIM_IC_MspInit+0x90>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <HAL_TIM_IC_MspInit+0x90>)
 8000f18:	f043 0308 	orr.w	r3, r3, #8
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_TIM_IC_MspInit+0x90>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0308 	and.w	r3, r3, #8
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4809      	ldr	r0, [pc, #36]	; (8000f6c <HAL_TIM_IC_MspInit+0x94>)
 8000f48:	f000 fb04 	bl	8001554 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	201e      	movs	r0, #30
 8000f52:	f000 fac8 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f56:	201e      	movs	r0, #30
 8000f58:	f000 fae1 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f5c:	bf00      	nop
 8000f5e:	3728      	adds	r7, #40	; 0x28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40000800 	.word	0x40000800
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020c00 	.word	0x40020c00

08000f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a17      	ldr	r2, [pc, #92]	; (8000fec <HAL_UART_MspInit+0x7c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d128      	bne.n	8000fe4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HAL_UART_MspInit+0x80>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <HAL_UART_MspInit+0x80>)
 8000f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_UART_MspInit+0x80>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_UART_MspInit+0x80>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <HAL_UART_MspInit+0x80>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_UART_MspInit+0x80>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <HAL_UART_MspInit+0x84>)
 8000fe0:	f000 fab8 	bl	8001554 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40004800 	.word	0x40004800
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020c00 	.word	0x40020c00

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <NMI_Handler+0x4>

08000ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <MemManage_Handler+0x4>

0800100a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <BusFault_Handler+0x4>

08001010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <UsageFault_Handler+0x4>

08001016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001044:	f000 f954 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001052:	f002 f9a7 	bl	80033a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000328 	.word	0x20000328

08001060 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <TIM4_IRQHandler+0x10>)
 8001066:	f002 f99d 	bl	80033a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000020c 	.word	0x2000020c

08001074 <_getpid>:
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
 8001078:	2301      	movs	r3, #1
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <_kill>:
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	f003 fd71 	bl	8004b74 <__errno>
 8001092:	4603      	mov	r3, r0
 8001094:	2216      	movs	r2, #22
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_exit>:
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ffe7 	bl	8001084 <_kill>
 80010b6:	e7fe      	b.n	80010b6 <_exit+0x12>

080010b8 <_read>:
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	e00a      	b.n	80010e0 <_read+0x28>
 80010ca:	f3af 8000 	nop.w
 80010ce:	4601      	mov	r1, r0
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	60ba      	str	r2, [r7, #8]
 80010d6:	b2ca      	uxtb	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dbf0      	blt.n	80010ca <_read+0x12>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_write>:
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	e009      	b.n	8001118 <_write+0x26>
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	60ba      	str	r2, [r7, #8]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f3af 8000 	nop.w
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3301      	adds	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	dbf1      	blt.n	8001104 <_write+0x12>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_close>:
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <_fstat>:
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	2300      	movs	r3, #0
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <_isatty>:
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	2301      	movs	r3, #1
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <_lseek>:
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	2300      	movs	r3, #0
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <_sbrk>:
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <_sbrk+0x5c>)
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <_sbrk+0x60>)
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <_sbrk+0x22>
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <_sbrk+0x64>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <_sbrk+0x68>)
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d207      	bcs.n	80011d4 <_sbrk+0x40>
 80011c4:	f003 fcd6 	bl	8004b74 <__errno>
 80011c8:	4603      	mov	r3, r0
 80011ca:	220c      	movs	r2, #12
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	e009      	b.n	80011e8 <_sbrk+0x54>
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <_sbrk+0x64>)
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20080000 	.word	0x20080000
 80011f4:	00000400 	.word	0x00000400
 80011f8:	20000200 	.word	0x20000200
 80011fc:	200003d8 	.word	0x200003d8

08001200 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <SystemInit+0x20>)
 8001206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120a:	4a05      	ldr	r2, [pc, #20]	; (8001220 <SystemInit+0x20>)
 800120c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <Reset_Handler>:
 8001224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800125c <LoopFillZerobss+0x12>
 8001228:	480d      	ldr	r0, [pc, #52]	; (8001260 <LoopFillZerobss+0x16>)
 800122a:	490e      	ldr	r1, [pc, #56]	; (8001264 <LoopFillZerobss+0x1a>)
 800122c:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <LoopFillZerobss+0x1e>)
 800122e:	2300      	movs	r3, #0
 8001230:	e002      	b.n	8001238 <LoopCopyDataInit>

08001232 <CopyDataInit>:
 8001232:	58d4      	ldr	r4, [r2, r3]
 8001234:	50c4      	str	r4, [r0, r3]
 8001236:	3304      	adds	r3, #4

08001238 <LoopCopyDataInit>:
 8001238:	18c4      	adds	r4, r0, r3
 800123a:	428c      	cmp	r4, r1
 800123c:	d3f9      	bcc.n	8001232 <CopyDataInit>
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <LoopFillZerobss+0x22>)
 8001240:	4c0b      	ldr	r4, [pc, #44]	; (8001270 <LoopFillZerobss+0x26>)
 8001242:	2300      	movs	r3, #0
 8001244:	e001      	b.n	800124a <LoopFillZerobss>

08001246 <FillZerobss>:
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	3204      	adds	r2, #4

0800124a <LoopFillZerobss>:
 800124a:	42a2      	cmp	r2, r4
 800124c:	d3fb      	bcc.n	8001246 <FillZerobss>
 800124e:	f7ff ffd7 	bl	8001200 <SystemInit>
 8001252:	f003 fc95 	bl	8004b80 <__libc_init_array>
 8001256:	f7ff faf3 	bl	8000840 <main>
 800125a:	4770      	bx	lr
 800125c:	20080000 	.word	0x20080000
 8001260:	20000000 	.word	0x20000000
 8001264:	200001dc 	.word	0x200001dc
 8001268:	08007c6c 	.word	0x08007c6c
 800126c:	200001dc 	.word	0x200001dc
 8001270:	200003d4 	.word	0x200003d4

08001274 <ADC_IRQHandler>:
 8001274:	e7fe      	b.n	8001274 <ADC_IRQHandler>

08001276 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127a:	2003      	movs	r0, #3
 800127c:	f000 f928 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001280:	2000      	movs	r0, #0
 8001282:	f000 f805 	bl	8001290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001286:	f7ff fd91 	bl	8000dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_InitTick+0x54>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_InitTick+0x58>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f943 	bl	800153a <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00e      	b.n	80012dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d80a      	bhi.n	80012da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c4:	2200      	movs	r2, #0
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f000 f90b 	bl	80014e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <HAL_InitTick+0x5c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000008 	.word	0x20000008
 80012ec:	20000004 	.word	0x20000004

080012f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000008 	.word	0x20000008
 8001314:	200003c0 	.word	0x200003c0

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	200003c0 	.word	0x200003c0

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <__NVIC_SetPriorityGrouping+0x40>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	4313      	orrs	r3, r2
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <__NVIC_SetPriorityGrouping+0x40>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00
 8001374:	05fa0000 	.word	0x05fa0000

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db0b      	blt.n	80013be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	4907      	ldr	r1, [pc, #28]	; (80013cc <__NVIC_EnableIRQ+0x38>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2001      	movs	r0, #1
 80013b6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000e100 	.word	0xe000e100

080013d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db0a      	blt.n	80013fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	490c      	ldr	r1, [pc, #48]	; (800141c <__NVIC_SetPriority+0x4c>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	0112      	lsls	r2, r2, #4
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f8:	e00a      	b.n	8001410 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4908      	ldr	r1, [pc, #32]	; (8001420 <__NVIC_SetPriority+0x50>)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	3b04      	subs	r3, #4
 8001408:	0112      	lsls	r2, r2, #4
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	440b      	add	r3, r1
 800140e:	761a      	strb	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000e100 	.word	0xe000e100
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	; 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f1c3 0307 	rsb	r3, r3, #7
 800143e:	2b04      	cmp	r3, #4
 8001440:	bf28      	it	cs
 8001442:	2304      	movcs	r3, #4
 8001444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3304      	adds	r3, #4
 800144a:	2b06      	cmp	r3, #6
 800144c:	d902      	bls.n	8001454 <NVIC_EncodePriority+0x30>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3b03      	subs	r3, #3
 8001452:	e000      	b.n	8001456 <NVIC_EncodePriority+0x32>
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	f04f 32ff 	mov.w	r2, #4294967295
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	401a      	ands	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800146c:	f04f 31ff 	mov.w	r1, #4294967295
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43d9      	mvns	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	4313      	orrs	r3, r2
         );
}
 800147e:	4618      	mov	r0, r3
 8001480:	3724      	adds	r7, #36	; 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800149c:	d301      	bcc.n	80014a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149e:	2301      	movs	r3, #1
 80014a0:	e00f      	b.n	80014c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <SysTick_Config+0x40>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014aa:	210f      	movs	r1, #15
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	f7ff ff8e 	bl	80013d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <SysTick_Config+0x40>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SysTick_Config+0x40>)
 80014bc:	2207      	movs	r2, #7
 80014be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	e000e010 	.word	0xe000e010

080014d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff29 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f8:	f7ff ff3e 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f7ff ff8e 	bl	8001424 <NVIC_EncodePriority>
 8001508:	4602      	mov	r2, r0
 800150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff5d 	bl	80013d0 <__NVIC_SetPriority>
}
 8001516:	bf00      	nop
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff31 	bl	8001394 <__NVIC_EnableIRQ>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ffa2 	bl	800148c <SysTick_Config>
 8001548:	4603      	mov	r3, r0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	; 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
 8001572:	e175      	b.n	8001860 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001574:	2201      	movs	r2, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	429a      	cmp	r2, r3
 800158e:	f040 8164 	bne.w	800185a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	2b01      	cmp	r3, #1
 800159c:	d005      	beq.n	80015aa <HAL_GPIO_Init+0x56>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d130      	bne.n	800160c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e0:	2201      	movs	r2, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	f003 0201 	and.w	r2, r3, #1
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b03      	cmp	r3, #3
 8001616:	d017      	beq.n	8001648 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d123      	bne.n	800169c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3208      	adds	r2, #8
 800165c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	08da      	lsrs	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3208      	adds	r2, #8
 8001696:	69b9      	ldr	r1, [r7, #24]
 8001698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0203 	and.w	r2, r3, #3
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80be 	beq.w	800185a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	4b66      	ldr	r3, [pc, #408]	; (8001878 <HAL_GPIO_Init+0x324>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	4a65      	ldr	r2, [pc, #404]	; (8001878 <HAL_GPIO_Init+0x324>)
 80016e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ea:	4b63      	ldr	r3, [pc, #396]	; (8001878 <HAL_GPIO_Init+0x324>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80016f6:	4a61      	ldr	r2, [pc, #388]	; (800187c <HAL_GPIO_Init+0x328>)
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	089b      	lsrs	r3, r3, #2
 80016fc:	3302      	adds	r3, #2
 80016fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	220f      	movs	r2, #15
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a58      	ldr	r2, [pc, #352]	; (8001880 <HAL_GPIO_Init+0x32c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d037      	beq.n	8001792 <HAL_GPIO_Init+0x23e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a57      	ldr	r2, [pc, #348]	; (8001884 <HAL_GPIO_Init+0x330>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d031      	beq.n	800178e <HAL_GPIO_Init+0x23a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a56      	ldr	r2, [pc, #344]	; (8001888 <HAL_GPIO_Init+0x334>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d02b      	beq.n	800178a <HAL_GPIO_Init+0x236>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a55      	ldr	r2, [pc, #340]	; (800188c <HAL_GPIO_Init+0x338>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d025      	beq.n	8001786 <HAL_GPIO_Init+0x232>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a54      	ldr	r2, [pc, #336]	; (8001890 <HAL_GPIO_Init+0x33c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d01f      	beq.n	8001782 <HAL_GPIO_Init+0x22e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a53      	ldr	r2, [pc, #332]	; (8001894 <HAL_GPIO_Init+0x340>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d019      	beq.n	800177e <HAL_GPIO_Init+0x22a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a52      	ldr	r2, [pc, #328]	; (8001898 <HAL_GPIO_Init+0x344>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d013      	beq.n	800177a <HAL_GPIO_Init+0x226>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a51      	ldr	r2, [pc, #324]	; (800189c <HAL_GPIO_Init+0x348>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d00d      	beq.n	8001776 <HAL_GPIO_Init+0x222>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a50      	ldr	r2, [pc, #320]	; (80018a0 <HAL_GPIO_Init+0x34c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d007      	beq.n	8001772 <HAL_GPIO_Init+0x21e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4f      	ldr	r2, [pc, #316]	; (80018a4 <HAL_GPIO_Init+0x350>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d101      	bne.n	800176e <HAL_GPIO_Init+0x21a>
 800176a:	2309      	movs	r3, #9
 800176c:	e012      	b.n	8001794 <HAL_GPIO_Init+0x240>
 800176e:	230a      	movs	r3, #10
 8001770:	e010      	b.n	8001794 <HAL_GPIO_Init+0x240>
 8001772:	2308      	movs	r3, #8
 8001774:	e00e      	b.n	8001794 <HAL_GPIO_Init+0x240>
 8001776:	2307      	movs	r3, #7
 8001778:	e00c      	b.n	8001794 <HAL_GPIO_Init+0x240>
 800177a:	2306      	movs	r3, #6
 800177c:	e00a      	b.n	8001794 <HAL_GPIO_Init+0x240>
 800177e:	2305      	movs	r3, #5
 8001780:	e008      	b.n	8001794 <HAL_GPIO_Init+0x240>
 8001782:	2304      	movs	r3, #4
 8001784:	e006      	b.n	8001794 <HAL_GPIO_Init+0x240>
 8001786:	2303      	movs	r3, #3
 8001788:	e004      	b.n	8001794 <HAL_GPIO_Init+0x240>
 800178a:	2302      	movs	r3, #2
 800178c:	e002      	b.n	8001794 <HAL_GPIO_Init+0x240>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <HAL_GPIO_Init+0x240>
 8001792:	2300      	movs	r3, #0
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	f002 0203 	and.w	r2, r2, #3
 800179a:	0092      	lsls	r2, r2, #2
 800179c:	4093      	lsls	r3, r2
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017a4:	4935      	ldr	r1, [pc, #212]	; (800187c <HAL_GPIO_Init+0x328>)
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	3302      	adds	r3, #2
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017b2:	4b3d      	ldr	r3, [pc, #244]	; (80018a8 <HAL_GPIO_Init+0x354>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017d6:	4a34      	ldr	r2, [pc, #208]	; (80018a8 <HAL_GPIO_Init+0x354>)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017dc:	4b32      	ldr	r3, [pc, #200]	; (80018a8 <HAL_GPIO_Init+0x354>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001800:	4a29      	ldr	r2, [pc, #164]	; (80018a8 <HAL_GPIO_Init+0x354>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001806:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <HAL_GPIO_Init+0x354>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800182a:	4a1f      	ldr	r2, [pc, #124]	; (80018a8 <HAL_GPIO_Init+0x354>)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001830:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <HAL_GPIO_Init+0x354>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001854:	4a14      	ldr	r2, [pc, #80]	; (80018a8 <HAL_GPIO_Init+0x354>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3301      	adds	r3, #1
 800185e:	61fb      	str	r3, [r7, #28]
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	2b0f      	cmp	r3, #15
 8001864:	f67f ae86 	bls.w	8001574 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40013800 	.word	0x40013800
 8001880:	40020000 	.word	0x40020000
 8001884:	40020400 	.word	0x40020400
 8001888:	40020800 	.word	0x40020800
 800188c:	40020c00 	.word	0x40020c00
 8001890:	40021000 	.word	0x40021000
 8001894:	40021400 	.word	0x40021400
 8001898:	40021800 	.word	0x40021800
 800189c:	40021c00 	.word	0x40021c00
 80018a0:	40022000 	.word	0x40022000
 80018a4:	40022400 	.word	0x40022400
 80018a8:	40013c00 	.word	0x40013c00

080018ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	4b23      	ldr	r3, [pc, #140]	; (8001944 <HAL_PWREx_EnableOverDrive+0x98>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a22      	ldr	r2, [pc, #136]	; (8001944 <HAL_PWREx_EnableOverDrive+0x98>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_PWREx_EnableOverDrive+0x98>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80018ce:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a1d      	ldr	r2, [pc, #116]	; (8001948 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018da:	f7ff fd1d 	bl	8001318 <HAL_GetTick>
 80018de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018e0:	e009      	b.n	80018f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018e2:	f7ff fd19 	bl	8001318 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018f0:	d901      	bls.n	80018f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e022      	b.n	800193c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001902:	d1ee      	bne.n	80018e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <HAL_PWREx_EnableOverDrive+0x9c>)
 800190a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800190e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001910:	f7ff fd02 	bl	8001318 <HAL_GetTick>
 8001914:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001916:	e009      	b.n	800192c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001918:	f7ff fcfe 	bl	8001318 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001926:	d901      	bls.n	800192c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e007      	b.n	800193c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_PWREx_EnableOverDrive+0x9c>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001938:	d1ee      	bne.n	8001918 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40023800 	.word	0x40023800
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e29b      	b.n	8001e9a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8087 	beq.w	8001a7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001970:	4b96      	ldr	r3, [pc, #600]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b04      	cmp	r3, #4
 800197a:	d00c      	beq.n	8001996 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800197c:	4b93      	ldr	r3, [pc, #588]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d112      	bne.n	80019ae <HAL_RCC_OscConfig+0x62>
 8001988:	4b90      	ldr	r3, [pc, #576]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001994:	d10b      	bne.n	80019ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001996:	4b8d      	ldr	r3, [pc, #564]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d06c      	beq.n	8001a7c <HAL_RCC_OscConfig+0x130>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d168      	bne.n	8001a7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e275      	b.n	8001e9a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b6:	d106      	bne.n	80019c6 <HAL_RCC_OscConfig+0x7a>
 80019b8:	4b84      	ldr	r3, [pc, #528]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a83      	ldr	r2, [pc, #524]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 80019be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e02e      	b.n	8001a24 <HAL_RCC_OscConfig+0xd8>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x9c>
 80019ce:	4b7f      	ldr	r3, [pc, #508]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a7e      	ldr	r2, [pc, #504]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 80019d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	4b7c      	ldr	r3, [pc, #496]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a7b      	ldr	r2, [pc, #492]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 80019e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e01d      	b.n	8001a24 <HAL_RCC_OscConfig+0xd8>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 80019f2:	4b76      	ldr	r3, [pc, #472]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a75      	ldr	r2, [pc, #468]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 80019f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b73      	ldr	r3, [pc, #460]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a72      	ldr	r2, [pc, #456]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e00b      	b.n	8001a24 <HAL_RCC_OscConfig+0xd8>
 8001a0c:	4b6f      	ldr	r3, [pc, #444]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a6e      	ldr	r2, [pc, #440]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b6c      	ldr	r3, [pc, #432]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a6b      	ldr	r2, [pc, #428]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d013      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fc74 	bl	8001318 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fc70 	bl	8001318 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e229      	b.n	8001e9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	4b61      	ldr	r3, [pc, #388]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e014      	b.n	8001a7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff fc60 	bl	8001318 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff fc5c 	bl	8001318 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e215      	b.n	8001e9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6e:	4b57      	ldr	r3, [pc, #348]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x110>
 8001a7a:	e000      	b.n	8001a7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d069      	beq.n	8001b5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a8a:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00b      	beq.n	8001aae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a96:	4b4d      	ldr	r3, [pc, #308]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d11c      	bne.n	8001adc <HAL_RCC_OscConfig+0x190>
 8001aa2:	4b4a      	ldr	r3, [pc, #296]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d116      	bne.n	8001adc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aae:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d005      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x17a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d001      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e1e9      	b.n	8001e9a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac6:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	493d      	ldr	r1, [pc, #244]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ada:	e040      	b.n	8001b5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d023      	beq.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae4:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a38      	ldr	r2, [pc, #224]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7ff fc12 	bl	8001318 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af8:	f7ff fc0e 	bl	8001318 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e1c7      	b.n	8001e9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0a:	4b30      	ldr	r3, [pc, #192]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4929      	ldr	r1, [pc, #164]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]
 8001b2a:	e018      	b.n	8001b5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a26      	ldr	r2, [pc, #152]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001b32:	f023 0301 	bic.w	r3, r3, #1
 8001b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff fbee 	bl	8001318 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b40:	f7ff fbea 	bl	8001318 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e1a3      	b.n	8001e9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b52:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d038      	beq.n	8001bdc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d019      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b72:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b76:	4a15      	ldr	r2, [pc, #84]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7e:	f7ff fbcb 	bl	8001318 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b86:	f7ff fbc7 	bl	8001318 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e180      	b.n	8001e9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x23a>
 8001ba4:	e01a      	b.n	8001bdc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001baa:	4a08      	ldr	r2, [pc, #32]	; (8001bcc <HAL_RCC_OscConfig+0x280>)
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb2:	f7ff fbb1 	bl	8001318 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bba:	f7ff fbad 	bl	8001318 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d903      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e166      	b.n	8001e9a <HAL_RCC_OscConfig+0x54e>
 8001bcc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd0:	4b92      	ldr	r3, [pc, #584]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1ee      	bne.n	8001bba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80a4 	beq.w	8001d32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bea:	4b8c      	ldr	r3, [pc, #560]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10d      	bne.n	8001c12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	4b89      	ldr	r3, [pc, #548]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	4a88      	ldr	r2, [pc, #544]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c00:	6413      	str	r3, [r2, #64]	; 0x40
 8001c02:	4b86      	ldr	r3, [pc, #536]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c12:	4b83      	ldr	r3, [pc, #524]	; (8001e20 <HAL_RCC_OscConfig+0x4d4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d118      	bne.n	8001c50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c1e:	4b80      	ldr	r3, [pc, #512]	; (8001e20 <HAL_RCC_OscConfig+0x4d4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a7f      	ldr	r2, [pc, #508]	; (8001e20 <HAL_RCC_OscConfig+0x4d4>)
 8001c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2a:	f7ff fb75 	bl	8001318 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c32:	f7ff fb71 	bl	8001318 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b64      	cmp	r3, #100	; 0x64
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e12a      	b.n	8001e9a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c44:	4b76      	ldr	r3, [pc, #472]	; (8001e20 <HAL_RCC_OscConfig+0x4d4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d106      	bne.n	8001c66 <HAL_RCC_OscConfig+0x31a>
 8001c58:	4b70      	ldr	r3, [pc, #448]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5c:	4a6f      	ldr	r2, [pc, #444]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6713      	str	r3, [r2, #112]	; 0x70
 8001c64:	e02d      	b.n	8001cc2 <HAL_RCC_OscConfig+0x376>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x33c>
 8001c6e:	4b6b      	ldr	r3, [pc, #428]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c72:	4a6a      	ldr	r2, [pc, #424]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001c74:	f023 0301 	bic.w	r3, r3, #1
 8001c78:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7a:	4b68      	ldr	r3, [pc, #416]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7e:	4a67      	ldr	r2, [pc, #412]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001c80:	f023 0304 	bic.w	r3, r3, #4
 8001c84:	6713      	str	r3, [r2, #112]	; 0x70
 8001c86:	e01c      	b.n	8001cc2 <HAL_RCC_OscConfig+0x376>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b05      	cmp	r3, #5
 8001c8e:	d10c      	bne.n	8001caa <HAL_RCC_OscConfig+0x35e>
 8001c90:	4b62      	ldr	r3, [pc, #392]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c94:	4a61      	ldr	r2, [pc, #388]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001c96:	f043 0304 	orr.w	r3, r3, #4
 8001c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9c:	4b5f      	ldr	r3, [pc, #380]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca0:	4a5e      	ldr	r2, [pc, #376]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca8:	e00b      	b.n	8001cc2 <HAL_RCC_OscConfig+0x376>
 8001caa:	4b5c      	ldr	r3, [pc, #368]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cae:	4a5b      	ldr	r2, [pc, #364]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001cb0:	f023 0301 	bic.w	r3, r3, #1
 8001cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb6:	4b59      	ldr	r3, [pc, #356]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cba:	4a58      	ldr	r2, [pc, #352]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d015      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cca:	f7ff fb25 	bl	8001318 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd2:	f7ff fb21 	bl	8001318 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e0d8      	b.n	8001e9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce8:	4b4c      	ldr	r3, [pc, #304]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0ee      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x386>
 8001cf4:	e014      	b.n	8001d20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf6:	f7ff fb0f 	bl	8001318 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	f7ff fb0b 	bl	8001318 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e0c2      	b.n	8001e9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d14:	4b41      	ldr	r3, [pc, #260]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1ee      	bne.n	8001cfe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d20:	7dfb      	ldrb	r3, [r7, #23]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d105      	bne.n	8001d32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d26:	4b3d      	ldr	r3, [pc, #244]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	4a3c      	ldr	r2, [pc, #240]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 80ae 	beq.w	8001e98 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d3c:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d06d      	beq.n	8001e24 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d14b      	bne.n	8001de8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d50:	4b32      	ldr	r3, [pc, #200]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a31      	ldr	r2, [pc, #196]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f7ff fadc 	bl	8001318 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d64:	f7ff fad8 	bl	8001318 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e091      	b.n	8001e9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d76:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69da      	ldr	r2, [r3, #28]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	019b      	lsls	r3, r3, #6
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	085b      	lsrs	r3, r3, #1
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	041b      	lsls	r3, r3, #16
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	061b      	lsls	r3, r3, #24
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	071b      	lsls	r3, r3, #28
 8001dae:	491b      	ldr	r1, [pc, #108]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a18      	ldr	r2, [pc, #96]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff faaa 	bl	8001318 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7ff faa6 	bl	8001318 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e05f      	b.n	8001e9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x47c>
 8001de6:	e057      	b.n	8001e98 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7ff fa90 	bl	8001318 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7ff fa8c 	bl	8001318 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e045      	b.n	8001e9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0e:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_RCC_OscConfig+0x4d0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x4b0>
 8001e1a:	e03d      	b.n	8001e98 <HAL_RCC_OscConfig+0x54c>
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e24:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <HAL_RCC_OscConfig+0x558>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d030      	beq.n	8001e94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d129      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d122      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e54:	4013      	ands	r3, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e5a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d119      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	085b      	lsrs	r3, r3, #1
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d10f      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d107      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0d0      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b6a      	ldr	r3, [pc, #424]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d910      	bls.n	8001ef0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b67      	ldr	r3, [pc, #412]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 020f 	bic.w	r2, r3, #15
 8001ed6:	4965      	ldr	r1, [pc, #404]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b63      	ldr	r3, [pc, #396]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0b8      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f08:	4b59      	ldr	r3, [pc, #356]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4a58      	ldr	r2, [pc, #352]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f20:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	4a52      	ldr	r2, [pc, #328]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4b50      	ldr	r3, [pc, #320]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	494d      	ldr	r1, [pc, #308]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d040      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d115      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e07f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6a:	4b41      	ldr	r3, [pc, #260]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e073      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e06b      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f8a:	4b39      	ldr	r3, [pc, #228]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f023 0203 	bic.w	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4936      	ldr	r1, [pc, #216]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f9c:	f7ff f9bc 	bl	8001318 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f7ff f9b8 	bl	8001318 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e053      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 020c 	and.w	r2, r3, #12
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d1eb      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d210      	bcs.n	8001ffc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 020f 	bic.w	r2, r3, #15
 8001fe2:	4922      	ldr	r1, [pc, #136]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e032      	b.n	8002062 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002008:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4916      	ldr	r1, [pc, #88]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	490e      	ldr	r1, [pc, #56]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800203a:	f000 f821 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 800203e:	4602      	mov	r2, r0
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	490a      	ldr	r1, [pc, #40]	; (8002074 <HAL_RCC_ClockConfig+0x1cc>)
 800204c:	5ccb      	ldrb	r3, [r1, r3]
 800204e:	fa22 f303 	lsr.w	r3, r2, r3
 8002052:	4a09      	ldr	r2, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x1d0>)
 8002054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1d4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff f918 	bl	8001290 <HAL_InitTick>

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023c00 	.word	0x40023c00
 8002070:	40023800 	.word	0x40023800
 8002074:	08007864 	.word	0x08007864
 8002078:	20000000 	.word	0x20000000
 800207c:	20000004 	.word	0x20000004

08002080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002080:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	2300      	movs	r3, #0
 8002092:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002098:	4b67      	ldr	r3, [pc, #412]	; (8002238 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d00d      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x40>
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	f200 80bd 	bhi.w	8002224 <HAL_RCC_GetSysClockFreq+0x1a4>
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0x34>
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d003      	beq.n	80020ba <HAL_RCC_GetSysClockFreq+0x3a>
 80020b2:	e0b7      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020b4:	4b61      	ldr	r3, [pc, #388]	; (800223c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80020b6:	60bb      	str	r3, [r7, #8]
      break;
 80020b8:	e0b7      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020ba:	4b60      	ldr	r3, [pc, #384]	; (800223c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80020bc:	60bb      	str	r3, [r7, #8]
      break;
 80020be:	e0b4      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020c0:	4b5d      	ldr	r3, [pc, #372]	; (8002238 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020c8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020ca:	4b5b      	ldr	r3, [pc, #364]	; (8002238 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d04d      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d6:	4b58      	ldr	r3, [pc, #352]	; (8002238 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	099b      	lsrs	r3, r3, #6
 80020dc:	461a      	mov	r2, r3
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020e6:	f04f 0100 	mov.w	r1, #0
 80020ea:	ea02 0800 	and.w	r8, r2, r0
 80020ee:	ea03 0901 	and.w	r9, r3, r1
 80020f2:	4640      	mov	r0, r8
 80020f4:	4649      	mov	r1, r9
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	014b      	lsls	r3, r1, #5
 8002100:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002104:	0142      	lsls	r2, r0, #5
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	ebb0 0008 	subs.w	r0, r0, r8
 800210e:	eb61 0109 	sbc.w	r1, r1, r9
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	018b      	lsls	r3, r1, #6
 800211c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002120:	0182      	lsls	r2, r0, #6
 8002122:	1a12      	subs	r2, r2, r0
 8002124:	eb63 0301 	sbc.w	r3, r3, r1
 8002128:	f04f 0000 	mov.w	r0, #0
 800212c:	f04f 0100 	mov.w	r1, #0
 8002130:	00d9      	lsls	r1, r3, #3
 8002132:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002136:	00d0      	lsls	r0, r2, #3
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	eb12 0208 	adds.w	r2, r2, r8
 8002140:	eb43 0309 	adc.w	r3, r3, r9
 8002144:	f04f 0000 	mov.w	r0, #0
 8002148:	f04f 0100 	mov.w	r1, #0
 800214c:	0299      	lsls	r1, r3, #10
 800214e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002152:	0290      	lsls	r0, r2, #10
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	461a      	mov	r2, r3
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	f7fe f8c4 	bl	80002f0 <__aeabi_uldivmod>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4613      	mov	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	e04a      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002172:	4b31      	ldr	r3, [pc, #196]	; (8002238 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	099b      	lsrs	r3, r3, #6
 8002178:	461a      	mov	r2, r3
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002182:	f04f 0100 	mov.w	r1, #0
 8002186:	ea02 0400 	and.w	r4, r2, r0
 800218a:	ea03 0501 	and.w	r5, r3, r1
 800218e:	4620      	mov	r0, r4
 8002190:	4629      	mov	r1, r5
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	014b      	lsls	r3, r1, #5
 800219c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021a0:	0142      	lsls	r2, r0, #5
 80021a2:	4610      	mov	r0, r2
 80021a4:	4619      	mov	r1, r3
 80021a6:	1b00      	subs	r0, r0, r4
 80021a8:	eb61 0105 	sbc.w	r1, r1, r5
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	018b      	lsls	r3, r1, #6
 80021b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021ba:	0182      	lsls	r2, r0, #6
 80021bc:	1a12      	subs	r2, r2, r0
 80021be:	eb63 0301 	sbc.w	r3, r3, r1
 80021c2:	f04f 0000 	mov.w	r0, #0
 80021c6:	f04f 0100 	mov.w	r1, #0
 80021ca:	00d9      	lsls	r1, r3, #3
 80021cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021d0:	00d0      	lsls	r0, r2, #3
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	1912      	adds	r2, r2, r4
 80021d8:	eb45 0303 	adc.w	r3, r5, r3
 80021dc:	f04f 0000 	mov.w	r0, #0
 80021e0:	f04f 0100 	mov.w	r1, #0
 80021e4:	0299      	lsls	r1, r3, #10
 80021e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80021ea:	0290      	lsls	r0, r2, #10
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	461a      	mov	r2, r3
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	f7fe f878 	bl	80002f0 <__aeabi_uldivmod>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4613      	mov	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	0c1b      	lsrs	r3, r3, #16
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	3301      	adds	r3, #1
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002220:	60bb      	str	r3, [r7, #8]
      break;
 8002222:	e002      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002226:	60bb      	str	r3, [r7, #8]
      break;
 8002228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800222a:	68bb      	ldr	r3, [r7, #8]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800
 800223c:	00f42400 	.word	0x00f42400

08002240 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <HAL_RCC_GetHCLKFreq+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000000 	.word	0x20000000

08002258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800225c:	f7ff fff0 	bl	8002240 <HAL_RCC_GetHCLKFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0a9b      	lsrs	r3, r3, #10
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4903      	ldr	r1, [pc, #12]	; (800227c <HAL_RCC_GetPCLK1Freq+0x24>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40023800 	.word	0x40023800
 800227c:	08007874 	.word	0x08007874

08002280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002284:	f7ff ffdc 	bl	8002240 <HAL_RCC_GetHCLKFreq>
 8002288:	4602      	mov	r2, r0
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	0b5b      	lsrs	r3, r3, #13
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	4903      	ldr	r1, [pc, #12]	; (80022a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002296:	5ccb      	ldrb	r3, [r1, r3]
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800229c:	4618      	mov	r0, r3
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40023800 	.word	0x40023800
 80022a4:	08007874 	.word	0x08007874

080022a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d012      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022d0:	4b69      	ldr	r3, [pc, #420]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	4a68      	ldr	r2, [pc, #416]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022da:	6093      	str	r3, [r2, #8]
 80022dc:	4b66      	ldr	r3, [pc, #408]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e4:	4964      	ldr	r1, [pc, #400]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80022f2:	2301      	movs	r3, #1
 80022f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d017      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002302:	4b5d      	ldr	r3, [pc, #372]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002308:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002310:	4959      	ldr	r1, [pc, #356]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002320:	d101      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002322:	2301      	movs	r3, #1
 8002324:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800232e:	2301      	movs	r3, #1
 8002330:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d017      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800233e:	4b4e      	ldr	r3, [pc, #312]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002344:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	494a      	ldr	r1, [pc, #296]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800235c:	d101      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800235e:	2301      	movs	r3, #1
 8002360:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800236a:	2301      	movs	r3, #1
 800236c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800237a:	2301      	movs	r3, #1
 800237c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 808b 	beq.w	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800238c:	4b3a      	ldr	r3, [pc, #232]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	4a39      	ldr	r2, [pc, #228]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002396:	6413      	str	r3, [r2, #64]	; 0x40
 8002398:	4b37      	ldr	r3, [pc, #220]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023a4:	4b35      	ldr	r3, [pc, #212]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a34      	ldr	r2, [pc, #208]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b0:	f7fe ffb2 	bl	8001318 <HAL_GetTick>
 80023b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b8:	f7fe ffae 	bl	8001318 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e38f      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023ca:	4b2c      	ldr	r3, [pc, #176]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023d6:	4b28      	ldr	r3, [pc, #160]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d035      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d02e      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023f4:	4b20      	ldr	r3, [pc, #128]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023fe:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002402:	4a1d      	ldr	r2, [pc, #116]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240e:	4a1a      	ldr	r2, [pc, #104]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002414:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002416:	4a18      	ldr	r2, [pc, #96]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800241c:	4b16      	ldr	r3, [pc, #88]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b01      	cmp	r3, #1
 8002426:	d114      	bne.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7fe ff76 	bl	8001318 <HAL_GetTick>
 800242c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242e:	e00a      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002430:	f7fe ff72 	bl	8001318 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e351      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002446:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0ee      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800245e:	d111      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800246e:	400b      	ands	r3, r1
 8002470:	4901      	ldr	r1, [pc, #4]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
 8002476:	e00b      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002478:	40023800 	.word	0x40023800
 800247c:	40007000 	.word	0x40007000
 8002480:	0ffffcff 	.word	0x0ffffcff
 8002484:	4bb3      	ldr	r3, [pc, #716]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4ab2      	ldr	r2, [pc, #712]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800248a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800248e:	6093      	str	r3, [r2, #8]
 8002490:	4bb0      	ldr	r3, [pc, #704]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002492:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800249c:	49ad      	ldr	r1, [pc, #692]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d010      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024ae:	4ba9      	ldr	r3, [pc, #676]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024b4:	4aa7      	ldr	r2, [pc, #668]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024be:	4ba5      	ldr	r3, [pc, #660]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c8:	49a2      	ldr	r1, [pc, #648]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00a      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024dc:	4b9d      	ldr	r3, [pc, #628]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ea:	499a      	ldr	r1, [pc, #616]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024fe:	4b95      	ldr	r3, [pc, #596]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002504:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800250c:	4991      	ldr	r1, [pc, #580]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00a      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002520:	4b8c      	ldr	r3, [pc, #560]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800252e:	4989      	ldr	r1, [pc, #548]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002530:	4313      	orrs	r3, r2
 8002532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00a      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002542:	4b84      	ldr	r3, [pc, #528]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002548:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	4980      	ldr	r1, [pc, #512]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00a      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002564:	4b7b      	ldr	r3, [pc, #492]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256a:	f023 0203 	bic.w	r2, r3, #3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	4978      	ldr	r1, [pc, #480]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00a      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002586:	4b73      	ldr	r3, [pc, #460]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258c:	f023 020c 	bic.w	r2, r3, #12
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002594:	496f      	ldr	r1, [pc, #444]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00a      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025a8:	4b6a      	ldr	r3, [pc, #424]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b6:	4967      	ldr	r1, [pc, #412]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025ca:	4b62      	ldr	r3, [pc, #392]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d8:	495e      	ldr	r1, [pc, #376]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00a      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025ec:	4b59      	ldr	r3, [pc, #356]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	4956      	ldr	r1, [pc, #344]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00a      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800260e:	4b51      	ldr	r3, [pc, #324]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002614:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	494d      	ldr	r1, [pc, #308]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00a      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002630:	4b48      	ldr	r3, [pc, #288]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	4945      	ldr	r1, [pc, #276]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002652:	4b40      	ldr	r3, [pc, #256]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002658:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002660:	493c      	ldr	r1, [pc, #240]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002674:	4b37      	ldr	r3, [pc, #220]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002682:	4934      	ldr	r1, [pc, #208]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d011      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002696:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026a4:	492b      	ldr	r1, [pc, #172]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026b4:	d101      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80026b6:	2301      	movs	r3, #1
 80026b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80026c6:	2301      	movs	r3, #1
 80026c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026d6:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e4:	491b      	ldr	r1, [pc, #108]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00b      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026f8:	4b16      	ldr	r3, [pc, #88]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002708:	4912      	ldr	r1, [pc, #72]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00b      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800271c:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002722:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800272c:	4909      	ldr	r1, [pc, #36]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00f      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002746:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002750:	e002      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	4986      	ldr	r1, [pc, #536]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00b      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800276c:	4b81      	ldr	r3, [pc, #516]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800276e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002772:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800277c:	497d      	ldr	r1, [pc, #500]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d006      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 80d6 	beq.w	8002944 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002798:	4b76      	ldr	r3, [pc, #472]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a75      	ldr	r2, [pc, #468]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800279e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a4:	f7fe fdb8 	bl	8001318 <HAL_GetTick>
 80027a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027ac:	f7fe fdb4 	bl	8001318 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e195      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027be:	4b6d      	ldr	r3, [pc, #436]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d021      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d11d      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027de:	4b65      	ldr	r3, [pc, #404]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027ec:	4b61      	ldr	r3, [pc, #388]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f2:	0e1b      	lsrs	r3, r3, #24
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	019a      	lsls	r2, r3, #6
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	041b      	lsls	r3, r3, #16
 8002804:	431a      	orrs	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	061b      	lsls	r3, r3, #24
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	071b      	lsls	r3, r3, #28
 8002812:	4958      	ldr	r1, [pc, #352]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d004      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800282e:	d00a      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02e      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002844:	d129      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002846:	4b4b      	ldr	r3, [pc, #300]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002854:	4b47      	ldr	r3, [pc, #284]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800285a:	0f1b      	lsrs	r3, r3, #28
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	019a      	lsls	r2, r3, #6
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	041b      	lsls	r3, r3, #16
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	061b      	lsls	r3, r3, #24
 8002874:	431a      	orrs	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	071b      	lsls	r3, r3, #28
 800287a:	493e      	ldr	r1, [pc, #248]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002882:	4b3c      	ldr	r3, [pc, #240]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002888:	f023 021f 	bic.w	r2, r3, #31
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	3b01      	subs	r3, #1
 8002892:	4938      	ldr	r1, [pc, #224]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d01d      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028a6:	4b33      	ldr	r3, [pc, #204]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ac:	0e1b      	lsrs	r3, r3, #24
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028b4:	4b2f      	ldr	r3, [pc, #188]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ba:	0f1b      	lsrs	r3, r3, #28
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	019a      	lsls	r2, r3, #6
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	061b      	lsls	r3, r3, #24
 80028d4:	431a      	orrs	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	071b      	lsls	r3, r3, #28
 80028da:	4926      	ldr	r1, [pc, #152]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d011      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	019a      	lsls	r2, r3, #6
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	041b      	lsls	r3, r3, #16
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	061b      	lsls	r3, r3, #24
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	071b      	lsls	r3, r3, #28
 800290a:	491a      	ldr	r1, [pc, #104]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002912:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a17      	ldr	r2, [pc, #92]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002918:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800291c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800291e:	f7fe fcfb 	bl	8001318 <HAL_GetTick>
 8002922:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002926:	f7fe fcf7 	bl	8001318 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b64      	cmp	r3, #100	; 0x64
 8002932:	d901      	bls.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e0d8      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002938:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b01      	cmp	r3, #1
 8002948:	f040 80ce 	bne.w	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a08      	ldr	r2, [pc, #32]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002958:	f7fe fcde 	bl	8001318 <HAL_GetTick>
 800295c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800295e:	e00b      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002960:	f7fe fcda 	bl	8001318 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	; 0x64
 800296c:	d904      	bls.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e0bb      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002978:	4b5e      	ldr	r3, [pc, #376]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002984:	d0ec      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d02e      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d12a      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029ae:	4b51      	ldr	r3, [pc, #324]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b4:	0c1b      	lsrs	r3, r3, #16
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029bc:	4b4d      	ldr	r3, [pc, #308]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	0f1b      	lsrs	r3, r3, #28
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	019a      	lsls	r2, r3, #6
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	041b      	lsls	r3, r3, #16
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	061b      	lsls	r3, r3, #24
 80029dc:	431a      	orrs	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	071b      	lsls	r3, r3, #28
 80029e2:	4944      	ldr	r1, [pc, #272]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029ea:	4b42      	ldr	r3, [pc, #264]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	3b01      	subs	r3, #1
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	493d      	ldr	r1, [pc, #244]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d022      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a18:	d11d      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a1a:	4b36      	ldr	r3, [pc, #216]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a20:	0e1b      	lsrs	r3, r3, #24
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a28:	4b32      	ldr	r3, [pc, #200]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	0f1b      	lsrs	r3, r3, #28
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	019a      	lsls	r2, r3, #6
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	041b      	lsls	r3, r3, #16
 8002a42:	431a      	orrs	r2, r3
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	061b      	lsls	r3, r3, #24
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	071b      	lsls	r3, r3, #28
 8002a4e:	4929      	ldr	r1, [pc, #164]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d028      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a62:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a68:	0e1b      	lsrs	r3, r3, #24
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a70:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	0c1b      	lsrs	r3, r3, #16
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	019a      	lsls	r2, r3, #6
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	041b      	lsls	r3, r3, #16
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	061b      	lsls	r3, r3, #24
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	071b      	lsls	r3, r3, #28
 8002a96:	4917      	ldr	r1, [pc, #92]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	4911      	ldr	r1, [pc, #68]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ab4:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0e      	ldr	r2, [pc, #56]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002abe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac0:	f7fe fc2a 	bl	8001318 <HAL_GetTick>
 8002ac4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ac8:	f7fe fc26 	bl	8001318 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b64      	cmp	r3, #100	; 0x64
 8002ad4:	d901      	bls.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e007      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ae6:	d1ef      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3720      	adds	r7, #32
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800

08002af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e049      	b.n	8002b9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fe f968 	bl	8000df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3304      	adds	r3, #4
 8002b34:	4619      	mov	r1, r3
 8002b36:	4610      	mov	r0, r2
 8002b38:	f000 ff5e 	bl	80039f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d001      	beq.n	8002bc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e04c      	b.n	8002c5a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a26      	ldr	r2, [pc, #152]	; (8002c68 <HAL_TIM_Base_Start+0xc0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d022      	beq.n	8002c18 <HAL_TIM_Base_Start+0x70>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bda:	d01d      	beq.n	8002c18 <HAL_TIM_Base_Start+0x70>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a22      	ldr	r2, [pc, #136]	; (8002c6c <HAL_TIM_Base_Start+0xc4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d018      	beq.n	8002c18 <HAL_TIM_Base_Start+0x70>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a21      	ldr	r2, [pc, #132]	; (8002c70 <HAL_TIM_Base_Start+0xc8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d013      	beq.n	8002c18 <HAL_TIM_Base_Start+0x70>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1f      	ldr	r2, [pc, #124]	; (8002c74 <HAL_TIM_Base_Start+0xcc>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00e      	beq.n	8002c18 <HAL_TIM_Base_Start+0x70>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1e      	ldr	r2, [pc, #120]	; (8002c78 <HAL_TIM_Base_Start+0xd0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d009      	beq.n	8002c18 <HAL_TIM_Base_Start+0x70>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <HAL_TIM_Base_Start+0xd4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d004      	beq.n	8002c18 <HAL_TIM_Base_Start+0x70>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1b      	ldr	r2, [pc, #108]	; (8002c80 <HAL_TIM_Base_Start+0xd8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d115      	bne.n	8002c44 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <HAL_TIM_Base_Start+0xdc>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d015      	beq.n	8002c56 <HAL_TIM_Base_Start+0xae>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c30:	d011      	beq.n	8002c56 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c42:	e008      	b.n	8002c56 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e000      	b.n	8002c58 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40010000 	.word	0x40010000
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	40000800 	.word	0x40000800
 8002c74:	40000c00 	.word	0x40000c00
 8002c78:	40010400 	.word	0x40010400
 8002c7c:	40014000 	.word	0x40014000
 8002c80:	40001800 	.word	0x40001800
 8002c84:	00010007 	.word	0x00010007

08002c88 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6a1a      	ldr	r2, [r3, #32]
 8002c96:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10f      	bne.n	8002cc0 <HAL_TIM_Base_Stop+0x38>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6a1a      	ldr	r2, [r3, #32]
 8002ca6:	f240 4344 	movw	r3, #1092	; 0x444
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d107      	bne.n	8002cc0 <HAL_TIM_Base_Stop+0x38>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0201 	bic.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d001      	beq.n	8002cf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e054      	b.n	8002d9a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a26      	ldr	r2, [pc, #152]	; (8002da8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d022      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x80>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1a:	d01d      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x80>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a22      	ldr	r2, [pc, #136]	; (8002dac <HAL_TIM_Base_Start_IT+0xd4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d018      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x80>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a21      	ldr	r2, [pc, #132]	; (8002db0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x80>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a1f      	ldr	r2, [pc, #124]	; (8002db4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00e      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x80>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a1e      	ldr	r2, [pc, #120]	; (8002db8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d009      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x80>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a1c      	ldr	r2, [pc, #112]	; (8002dbc <HAL_TIM_Base_Start_IT+0xe4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d004      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0x80>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1b      	ldr	r2, [pc, #108]	; (8002dc0 <HAL_TIM_Base_Start_IT+0xe8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d115      	bne.n	8002d84 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <HAL_TIM_Base_Start_IT+0xec>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d015      	beq.n	8002d96 <HAL_TIM_Base_Start_IT+0xbe>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d70:	d011      	beq.n	8002d96 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 0201 	orr.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d82:	e008      	b.n	8002d96 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	e000      	b.n	8002d98 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40010000 	.word	0x40010000
 8002dac:	40000400 	.word	0x40000400
 8002db0:	40000800 	.word	0x40000800
 8002db4:	40000c00 	.word	0x40000c00
 8002db8:	40010400 	.word	0x40010400
 8002dbc:	40014000 	.word	0x40014000
 8002dc0:	40001800 	.word	0x40001800
 8002dc4:	00010007 	.word	0x00010007

08002dc8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6a1a      	ldr	r2, [r3, #32]
 8002de6:	f241 1311 	movw	r3, #4369	; 0x1111
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10f      	bne.n	8002e10 <HAL_TIM_Base_Stop_IT+0x48>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6a1a      	ldr	r2, [r3, #32]
 8002df6:	f240 4344 	movw	r3, #1092	; 0x444
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d107      	bne.n	8002e10 <HAL_TIM_Base_Stop_IT+0x48>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0201 	bic.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e049      	b.n	8002ecc <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d106      	bne.n	8002e52 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7fe f843 	bl	8000ed8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3304      	adds	r3, #4
 8002e62:	4619      	mov	r1, r3
 8002e64:	4610      	mov	r0, r2
 8002e66:	f000 fdc7 	bl	80039f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d104      	bne.n	8002ef2 <HAL_TIM_IC_Start_IT+0x1e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	e023      	b.n	8002f3a <HAL_TIM_IC_Start_IT+0x66>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d104      	bne.n	8002f02 <HAL_TIM_IC_Start_IT+0x2e>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	e01b      	b.n	8002f3a <HAL_TIM_IC_Start_IT+0x66>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d104      	bne.n	8002f12 <HAL_TIM_IC_Start_IT+0x3e>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	e013      	b.n	8002f3a <HAL_TIM_IC_Start_IT+0x66>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b0c      	cmp	r3, #12
 8002f16:	d104      	bne.n	8002f22 <HAL_TIM_IC_Start_IT+0x4e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	e00b      	b.n	8002f3a <HAL_TIM_IC_Start_IT+0x66>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b10      	cmp	r3, #16
 8002f26:	d104      	bne.n	8002f32 <HAL_TIM_IC_Start_IT+0x5e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	e003      	b.n	8002f3a <HAL_TIM_IC_Start_IT+0x66>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d104      	bne.n	8002f4c <HAL_TIM_IC_Start_IT+0x78>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	e013      	b.n	8002f74 <HAL_TIM_IC_Start_IT+0xa0>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d104      	bne.n	8002f5c <HAL_TIM_IC_Start_IT+0x88>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e00b      	b.n	8002f74 <HAL_TIM_IC_Start_IT+0xa0>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d104      	bne.n	8002f6c <HAL_TIM_IC_Start_IT+0x98>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e003      	b.n	8002f74 <HAL_TIM_IC_Start_IT+0xa0>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f76:	7bbb      	ldrb	r3, [r7, #14]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d102      	bne.n	8002f82 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f7c:	7b7b      	ldrb	r3, [r7, #13]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d001      	beq.n	8002f86 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0e2      	b.n	800314c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d104      	bne.n	8002f96 <HAL_TIM_IC_Start_IT+0xc2>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f94:	e023      	b.n	8002fde <HAL_TIM_IC_Start_IT+0x10a>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d104      	bne.n	8002fa6 <HAL_TIM_IC_Start_IT+0xd2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fa4:	e01b      	b.n	8002fde <HAL_TIM_IC_Start_IT+0x10a>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d104      	bne.n	8002fb6 <HAL_TIM_IC_Start_IT+0xe2>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fb4:	e013      	b.n	8002fde <HAL_TIM_IC_Start_IT+0x10a>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b0c      	cmp	r3, #12
 8002fba:	d104      	bne.n	8002fc6 <HAL_TIM_IC_Start_IT+0xf2>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fc4:	e00b      	b.n	8002fde <HAL_TIM_IC_Start_IT+0x10a>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d104      	bne.n	8002fd6 <HAL_TIM_IC_Start_IT+0x102>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fd4:	e003      	b.n	8002fde <HAL_TIM_IC_Start_IT+0x10a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d104      	bne.n	8002fee <HAL_TIM_IC_Start_IT+0x11a>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fec:	e013      	b.n	8003016 <HAL_TIM_IC_Start_IT+0x142>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d104      	bne.n	8002ffe <HAL_TIM_IC_Start_IT+0x12a>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ffc:	e00b      	b.n	8003016 <HAL_TIM_IC_Start_IT+0x142>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b08      	cmp	r3, #8
 8003002:	d104      	bne.n	800300e <HAL_TIM_IC_Start_IT+0x13a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800300c:	e003      	b.n	8003016 <HAL_TIM_IC_Start_IT+0x142>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2202      	movs	r2, #2
 8003012:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b0c      	cmp	r3, #12
 800301a:	d841      	bhi.n	80030a0 <HAL_TIM_IC_Start_IT+0x1cc>
 800301c:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <HAL_TIM_IC_Start_IT+0x150>)
 800301e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003022:	bf00      	nop
 8003024:	08003059 	.word	0x08003059
 8003028:	080030a1 	.word	0x080030a1
 800302c:	080030a1 	.word	0x080030a1
 8003030:	080030a1 	.word	0x080030a1
 8003034:	0800306b 	.word	0x0800306b
 8003038:	080030a1 	.word	0x080030a1
 800303c:	080030a1 	.word	0x080030a1
 8003040:	080030a1 	.word	0x080030a1
 8003044:	0800307d 	.word	0x0800307d
 8003048:	080030a1 	.word	0x080030a1
 800304c:	080030a1 	.word	0x080030a1
 8003050:	080030a1 	.word	0x080030a1
 8003054:	0800308f 	.word	0x0800308f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0202 	orr.w	r2, r2, #2
 8003066:	60da      	str	r2, [r3, #12]
      break;
 8003068:	e01d      	b.n	80030a6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0204 	orr.w	r2, r2, #4
 8003078:	60da      	str	r2, [r3, #12]
      break;
 800307a:	e014      	b.n	80030a6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0208 	orr.w	r2, r2, #8
 800308a:	60da      	str	r2, [r3, #12]
      break;
 800308c:	e00b      	b.n	80030a6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0210 	orr.w	r2, r2, #16
 800309c:	60da      	str	r2, [r3, #12]
      break;
 800309e:	e002      	b.n	80030a6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
      break;
 80030a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d14e      	bne.n	800314a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2201      	movs	r2, #1
 80030b2:	6839      	ldr	r1, [r7, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 ff97 	bl	8003fe8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a25      	ldr	r2, [pc, #148]	; (8003154 <HAL_TIM_IC_Start_IT+0x280>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d022      	beq.n	800310a <HAL_TIM_IC_Start_IT+0x236>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030cc:	d01d      	beq.n	800310a <HAL_TIM_IC_Start_IT+0x236>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a21      	ldr	r2, [pc, #132]	; (8003158 <HAL_TIM_IC_Start_IT+0x284>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d018      	beq.n	800310a <HAL_TIM_IC_Start_IT+0x236>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1f      	ldr	r2, [pc, #124]	; (800315c <HAL_TIM_IC_Start_IT+0x288>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_TIM_IC_Start_IT+0x236>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a1e      	ldr	r2, [pc, #120]	; (8003160 <HAL_TIM_IC_Start_IT+0x28c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00e      	beq.n	800310a <HAL_TIM_IC_Start_IT+0x236>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1c      	ldr	r2, [pc, #112]	; (8003164 <HAL_TIM_IC_Start_IT+0x290>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d009      	beq.n	800310a <HAL_TIM_IC_Start_IT+0x236>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1b      	ldr	r2, [pc, #108]	; (8003168 <HAL_TIM_IC_Start_IT+0x294>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d004      	beq.n	800310a <HAL_TIM_IC_Start_IT+0x236>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a19      	ldr	r2, [pc, #100]	; (800316c <HAL_TIM_IC_Start_IT+0x298>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d115      	bne.n	8003136 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	4b17      	ldr	r3, [pc, #92]	; (8003170 <HAL_TIM_IC_Start_IT+0x29c>)
 8003112:	4013      	ands	r3, r2
 8003114:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b06      	cmp	r3, #6
 800311a:	d015      	beq.n	8003148 <HAL_TIM_IC_Start_IT+0x274>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003122:	d011      	beq.n	8003148 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003134:	e008      	b.n	8003148 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	e000      	b.n	800314a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003148:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800314a:	7bfb      	ldrb	r3, [r7, #15]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40010000 	.word	0x40010000
 8003158:	40000400 	.word	0x40000400
 800315c:	40000800 	.word	0x40000800
 8003160:	40000c00 	.word	0x40000c00
 8003164:	40010400 	.word	0x40010400
 8003168:	40014000 	.word	0x40014000
 800316c:	40001800 	.word	0x40001800
 8003170:	00010007 	.word	0x00010007

08003174 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b0c      	cmp	r3, #12
 8003186:	d841      	bhi.n	800320c <HAL_TIM_IC_Stop_IT+0x98>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <HAL_TIM_IC_Stop_IT+0x1c>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031c5 	.word	0x080031c5
 8003194:	0800320d 	.word	0x0800320d
 8003198:	0800320d 	.word	0x0800320d
 800319c:	0800320d 	.word	0x0800320d
 80031a0:	080031d7 	.word	0x080031d7
 80031a4:	0800320d 	.word	0x0800320d
 80031a8:	0800320d 	.word	0x0800320d
 80031ac:	0800320d 	.word	0x0800320d
 80031b0:	080031e9 	.word	0x080031e9
 80031b4:	0800320d 	.word	0x0800320d
 80031b8:	0800320d 	.word	0x0800320d
 80031bc:	0800320d 	.word	0x0800320d
 80031c0:	080031fb 	.word	0x080031fb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0202 	bic.w	r2, r2, #2
 80031d2:	60da      	str	r2, [r3, #12]
      break;
 80031d4:	e01d      	b.n	8003212 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0204 	bic.w	r2, r2, #4
 80031e4:	60da      	str	r2, [r3, #12]
      break;
 80031e6:	e014      	b.n	8003212 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0208 	bic.w	r2, r2, #8
 80031f6:	60da      	str	r2, [r3, #12]
      break;
 80031f8:	e00b      	b.n	8003212 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0210 	bic.w	r2, r2, #16
 8003208:	60da      	str	r2, [r3, #12]
      break;
 800320a:	e002      	b.n	8003212 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
      break;
 8003210:	bf00      	nop
  }

  if (status == HAL_OK)
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d166      	bne.n	80032e6 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2200      	movs	r2, #0
 800321e:	6839      	ldr	r1, [r7, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fee1 	bl	8003fe8 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6a1a      	ldr	r2, [r3, #32]
 800322c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10f      	bne.n	8003256 <HAL_TIM_IC_Stop_IT+0xe2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6a1a      	ldr	r2, [r3, #32]
 800323c:	f240 4344 	movw	r3, #1092	; 0x444
 8003240:	4013      	ands	r3, r2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d107      	bne.n	8003256 <HAL_TIM_IC_Stop_IT+0xe2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0201 	bic.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d104      	bne.n	8003266 <HAL_TIM_IC_Stop_IT+0xf2>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003264:	e023      	b.n	80032ae <HAL_TIM_IC_Stop_IT+0x13a>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b04      	cmp	r3, #4
 800326a:	d104      	bne.n	8003276 <HAL_TIM_IC_Stop_IT+0x102>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003274:	e01b      	b.n	80032ae <HAL_TIM_IC_Stop_IT+0x13a>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b08      	cmp	r3, #8
 800327a:	d104      	bne.n	8003286 <HAL_TIM_IC_Stop_IT+0x112>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003284:	e013      	b.n	80032ae <HAL_TIM_IC_Stop_IT+0x13a>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b0c      	cmp	r3, #12
 800328a:	d104      	bne.n	8003296 <HAL_TIM_IC_Stop_IT+0x122>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003294:	e00b      	b.n	80032ae <HAL_TIM_IC_Stop_IT+0x13a>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b10      	cmp	r3, #16
 800329a:	d104      	bne.n	80032a6 <HAL_TIM_IC_Stop_IT+0x132>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032a4:	e003      	b.n	80032ae <HAL_TIM_IC_Stop_IT+0x13a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d104      	bne.n	80032be <HAL_TIM_IC_Stop_IT+0x14a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032bc:	e013      	b.n	80032e6 <HAL_TIM_IC_Stop_IT+0x172>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d104      	bne.n	80032ce <HAL_TIM_IC_Stop_IT+0x15a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032cc:	e00b      	b.n	80032e6 <HAL_TIM_IC_Stop_IT+0x172>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d104      	bne.n	80032de <HAL_TIM_IC_Stop_IT+0x16a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032dc:	e003      	b.n	80032e6 <HAL_TIM_IC_Stop_IT+0x172>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e041      	b.n	8003388 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d106      	bne.n	800331e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f839 	bl	8003390 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2202      	movs	r2, #2
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3304      	adds	r3, #4
 800332e:	4619      	mov	r1, r3
 8003330:	4610      	mov	r0, r2
 8003332:	f000 fb61 	bl	80039f8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0208 	bic.w	r2, r2, #8
 8003344:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6819      	ldr	r1, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d122      	bne.n	8003400 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d11b      	bne.n	8003400 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0202 	mvn.w	r2, #2
 80033d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fd f8fe 	bl	80005e8 <HAL_TIM_IC_CaptureCallback>
 80033ec:	e005      	b.n	80033fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fae4 	bl	80039bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 faeb 	bl	80039d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b04      	cmp	r3, #4
 800340c:	d122      	bne.n	8003454 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b04      	cmp	r3, #4
 800341a:	d11b      	bne.n	8003454 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0204 	mvn.w	r2, #4
 8003424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2202      	movs	r2, #2
 800342a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fd f8d4 	bl	80005e8 <HAL_TIM_IC_CaptureCallback>
 8003440:	e005      	b.n	800344e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 faba 	bl	80039bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fac1 	bl	80039d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b08      	cmp	r3, #8
 8003460:	d122      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b08      	cmp	r3, #8
 800346e:	d11b      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0208 	mvn.w	r2, #8
 8003478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2204      	movs	r2, #4
 800347e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fd f8aa 	bl	80005e8 <HAL_TIM_IC_CaptureCallback>
 8003494:	e005      	b.n	80034a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fa90 	bl	80039bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fa97 	bl	80039d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0310 	and.w	r3, r3, #16
 80034b2:	2b10      	cmp	r3, #16
 80034b4:	d122      	bne.n	80034fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b10      	cmp	r3, #16
 80034c2:	d11b      	bne.n	80034fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0210 	mvn.w	r2, #16
 80034cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2208      	movs	r2, #8
 80034d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fd f880 	bl	80005e8 <HAL_TIM_IC_CaptureCallback>
 80034e8:	e005      	b.n	80034f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fa66 	bl	80039bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fa6d 	bl	80039d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b01      	cmp	r3, #1
 8003508:	d10e      	bne.n	8003528 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b01      	cmp	r3, #1
 8003516:	d107      	bne.n	8003528 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0201 	mvn.w	r2, #1
 8003520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fd f910 	bl	8000748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003532:	2b80      	cmp	r3, #128	; 0x80
 8003534:	d10e      	bne.n	8003554 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003540:	2b80      	cmp	r3, #128	; 0x80
 8003542:	d107      	bne.n	8003554 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800354c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fe08 	bl	8004164 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003562:	d10e      	bne.n	8003582 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356e:	2b80      	cmp	r3, #128	; 0x80
 8003570:	d107      	bne.n	8003582 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800357a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fdfb 	bl	8004178 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d10e      	bne.n	80035ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359a:	2b40      	cmp	r3, #64	; 0x40
 800359c:	d107      	bne.n	80035ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fa1b 	bl	80039e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d10e      	bne.n	80035da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	d107      	bne.n	80035da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f06f 0220 	mvn.w	r2, #32
 80035d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fdbb 	bl	8004150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b086      	sub	sp, #24
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_TIM_IC_ConfigChannel+0x1e>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e088      	b.n	8003712 <HAL_TIM_IC_ConfigChannel+0x130>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d11b      	bne.n	8003646 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	6819      	ldr	r1, [r3, #0]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f000 fb1f 	bl	8003c60 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699a      	ldr	r2, [r3, #24]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 020c 	bic.w	r2, r2, #12
 8003630:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6999      	ldr	r1, [r3, #24]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	619a      	str	r2, [r3, #24]
 8003644:	e060      	b.n	8003708 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b04      	cmp	r3, #4
 800364a:	d11c      	bne.n	8003686 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	6819      	ldr	r1, [r3, #0]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f000 fba3 	bl	8003da6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699a      	ldr	r2, [r3, #24]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800366e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6999      	ldr	r1, [r3, #24]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	021a      	lsls	r2, r3, #8
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	619a      	str	r2, [r3, #24]
 8003684:	e040      	b.n	8003708 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b08      	cmp	r3, #8
 800368a:	d11b      	bne.n	80036c4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	6819      	ldr	r1, [r3, #0]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f000 fbf0 	bl	8003e80 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 020c 	bic.w	r2, r2, #12
 80036ae:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69d9      	ldr	r1, [r3, #28]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	61da      	str	r2, [r3, #28]
 80036c2:	e021      	b.n	8003708 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b0c      	cmp	r3, #12
 80036c8:	d11c      	bne.n	8003704 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6818      	ldr	r0, [r3, #0]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	6819      	ldr	r1, [r3, #0]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f000 fc0d 	bl	8003ef8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69da      	ldr	r2, [r3, #28]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80036ec:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	69d9      	ldr	r1, [r3, #28]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	021a      	lsls	r2, r3, #8
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	61da      	str	r2, [r3, #28]
 8003702:	e001      	b.n	8003708 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003710:	7dfb      	ldrb	r3, [r7, #23]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <HAL_TIM_ConfigClockSource+0x1c>
 8003734:	2302      	movs	r3, #2
 8003736:	e0b4      	b.n	80038a2 <HAL_TIM_ConfigClockSource+0x186>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	4b56      	ldr	r3, [pc, #344]	; (80038ac <HAL_TIM_ConfigClockSource+0x190>)
 8003754:	4013      	ands	r3, r2
 8003756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800375e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003770:	d03e      	beq.n	80037f0 <HAL_TIM_ConfigClockSource+0xd4>
 8003772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003776:	f200 8087 	bhi.w	8003888 <HAL_TIM_ConfigClockSource+0x16c>
 800377a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377e:	f000 8086 	beq.w	800388e <HAL_TIM_ConfigClockSource+0x172>
 8003782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003786:	d87f      	bhi.n	8003888 <HAL_TIM_ConfigClockSource+0x16c>
 8003788:	2b70      	cmp	r3, #112	; 0x70
 800378a:	d01a      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0xa6>
 800378c:	2b70      	cmp	r3, #112	; 0x70
 800378e:	d87b      	bhi.n	8003888 <HAL_TIM_ConfigClockSource+0x16c>
 8003790:	2b60      	cmp	r3, #96	; 0x60
 8003792:	d050      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0x11a>
 8003794:	2b60      	cmp	r3, #96	; 0x60
 8003796:	d877      	bhi.n	8003888 <HAL_TIM_ConfigClockSource+0x16c>
 8003798:	2b50      	cmp	r3, #80	; 0x50
 800379a:	d03c      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0xfa>
 800379c:	2b50      	cmp	r3, #80	; 0x50
 800379e:	d873      	bhi.n	8003888 <HAL_TIM_ConfigClockSource+0x16c>
 80037a0:	2b40      	cmp	r3, #64	; 0x40
 80037a2:	d058      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0x13a>
 80037a4:	2b40      	cmp	r3, #64	; 0x40
 80037a6:	d86f      	bhi.n	8003888 <HAL_TIM_ConfigClockSource+0x16c>
 80037a8:	2b30      	cmp	r3, #48	; 0x30
 80037aa:	d064      	beq.n	8003876 <HAL_TIM_ConfigClockSource+0x15a>
 80037ac:	2b30      	cmp	r3, #48	; 0x30
 80037ae:	d86b      	bhi.n	8003888 <HAL_TIM_ConfigClockSource+0x16c>
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d060      	beq.n	8003876 <HAL_TIM_ConfigClockSource+0x15a>
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	d867      	bhi.n	8003888 <HAL_TIM_ConfigClockSource+0x16c>
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d05c      	beq.n	8003876 <HAL_TIM_ConfigClockSource+0x15a>
 80037bc:	2b10      	cmp	r3, #16
 80037be:	d05a      	beq.n	8003876 <HAL_TIM_ConfigClockSource+0x15a>
 80037c0:	e062      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	6899      	ldr	r1, [r3, #8]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f000 fbe9 	bl	8003fa8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	609a      	str	r2, [r3, #8]
      break;
 80037ee:	e04f      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6818      	ldr	r0, [r3, #0]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	6899      	ldr	r1, [r3, #8]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f000 fbd2 	bl	8003fa8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003812:	609a      	str	r2, [r3, #8]
      break;
 8003814:	e03c      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6859      	ldr	r1, [r3, #4]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	461a      	mov	r2, r3
 8003824:	f000 fa90 	bl	8003d48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2150      	movs	r1, #80	; 0x50
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fb9f 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 8003834:	e02c      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	461a      	mov	r2, r3
 8003844:	f000 faec 	bl	8003e20 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2160      	movs	r1, #96	; 0x60
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fb8f 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 8003854:	e01c      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	6859      	ldr	r1, [r3, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	461a      	mov	r2, r3
 8003864:	f000 fa70 	bl	8003d48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2140      	movs	r1, #64	; 0x40
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fb7f 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 8003874:	e00c      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f000 fb76 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 8003886:	e003      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
      break;
 800388c:	e000      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800388e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	fffeff88 	.word	0xfffeff88

080038b0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e031      	b.n	800392c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80038d8:	6839      	ldr	r1, [r7, #0]
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f92c 	bl	8003b38 <TIM_SlaveTimer_SetConfig>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e018      	b.n	800392c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003908:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003918:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b0c      	cmp	r3, #12
 8003946:	d831      	bhi.n	80039ac <HAL_TIM_ReadCapturedValue+0x78>
 8003948:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <HAL_TIM_ReadCapturedValue+0x1c>)
 800394a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394e:	bf00      	nop
 8003950:	08003985 	.word	0x08003985
 8003954:	080039ad 	.word	0x080039ad
 8003958:	080039ad 	.word	0x080039ad
 800395c:	080039ad 	.word	0x080039ad
 8003960:	0800398f 	.word	0x0800398f
 8003964:	080039ad 	.word	0x080039ad
 8003968:	080039ad 	.word	0x080039ad
 800396c:	080039ad 	.word	0x080039ad
 8003970:	08003999 	.word	0x08003999
 8003974:	080039ad 	.word	0x080039ad
 8003978:	080039ad 	.word	0x080039ad
 800397c:	080039ad 	.word	0x080039ad
 8003980:	080039a3 	.word	0x080039a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398a:	60fb      	str	r3, [r7, #12]

      break;
 800398c:	e00f      	b.n	80039ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	60fb      	str	r3, [r7, #12]

      break;
 8003996:	e00a      	b.n	80039ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	60fb      	str	r3, [r7, #12]

      break;
 80039a0:	e005      	b.n	80039ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	60fb      	str	r3, [r7, #12]

      break;
 80039aa:	e000      	b.n	80039ae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80039ac:	bf00      	nop
  }

  return tmpreg;
 80039ae:	68fb      	ldr	r3, [r7, #12]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a40      	ldr	r2, [pc, #256]	; (8003b0c <TIM_Base_SetConfig+0x114>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d013      	beq.n	8003a38 <TIM_Base_SetConfig+0x40>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a16:	d00f      	beq.n	8003a38 <TIM_Base_SetConfig+0x40>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a3d      	ldr	r2, [pc, #244]	; (8003b10 <TIM_Base_SetConfig+0x118>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00b      	beq.n	8003a38 <TIM_Base_SetConfig+0x40>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a3c      	ldr	r2, [pc, #240]	; (8003b14 <TIM_Base_SetConfig+0x11c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d007      	beq.n	8003a38 <TIM_Base_SetConfig+0x40>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a3b      	ldr	r2, [pc, #236]	; (8003b18 <TIM_Base_SetConfig+0x120>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <TIM_Base_SetConfig+0x40>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a3a      	ldr	r2, [pc, #232]	; (8003b1c <TIM_Base_SetConfig+0x124>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d108      	bne.n	8003a4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a2f      	ldr	r2, [pc, #188]	; (8003b0c <TIM_Base_SetConfig+0x114>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d02b      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a58:	d027      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a2c      	ldr	r2, [pc, #176]	; (8003b10 <TIM_Base_SetConfig+0x118>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d023      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a2b      	ldr	r2, [pc, #172]	; (8003b14 <TIM_Base_SetConfig+0x11c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d01f      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a2a      	ldr	r2, [pc, #168]	; (8003b18 <TIM_Base_SetConfig+0x120>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d01b      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a29      	ldr	r2, [pc, #164]	; (8003b1c <TIM_Base_SetConfig+0x124>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d017      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a28      	ldr	r2, [pc, #160]	; (8003b20 <TIM_Base_SetConfig+0x128>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a27      	ldr	r2, [pc, #156]	; (8003b24 <TIM_Base_SetConfig+0x12c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00f      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a26      	ldr	r2, [pc, #152]	; (8003b28 <TIM_Base_SetConfig+0x130>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00b      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a25      	ldr	r2, [pc, #148]	; (8003b2c <TIM_Base_SetConfig+0x134>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d007      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a24      	ldr	r2, [pc, #144]	; (8003b30 <TIM_Base_SetConfig+0x138>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d003      	beq.n	8003aaa <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a23      	ldr	r2, [pc, #140]	; (8003b34 <TIM_Base_SetConfig+0x13c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d108      	bne.n	8003abc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <TIM_Base_SetConfig+0x114>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <TIM_Base_SetConfig+0xf8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a0c      	ldr	r2, [pc, #48]	; (8003b1c <TIM_Base_SetConfig+0x124>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d103      	bne.n	8003af8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	615a      	str	r2, [r3, #20]
}
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40010000 	.word	0x40010000
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40000800 	.word	0x40000800
 8003b18:	40000c00 	.word	0x40000c00
 8003b1c:	40010400 	.word	0x40010400
 8003b20:	40014000 	.word	0x40014000
 8003b24:	40014400 	.word	0x40014400
 8003b28:	40014800 	.word	0x40014800
 8003b2c:	40001800 	.word	0x40001800
 8003b30:	40001c00 	.word	0x40001c00
 8003b34:	40002000 	.word	0x40002000

08003b38 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b54:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4b3e      	ldr	r3, [pc, #248]	; (8003c5c <TIM_SlaveTimer_SetConfig+0x124>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b70      	cmp	r3, #112	; 0x70
 8003b80:	d01a      	beq.n	8003bb8 <TIM_SlaveTimer_SetConfig+0x80>
 8003b82:	2b70      	cmp	r3, #112	; 0x70
 8003b84:	d860      	bhi.n	8003c48 <TIM_SlaveTimer_SetConfig+0x110>
 8003b86:	2b60      	cmp	r3, #96	; 0x60
 8003b88:	d054      	beq.n	8003c34 <TIM_SlaveTimer_SetConfig+0xfc>
 8003b8a:	2b60      	cmp	r3, #96	; 0x60
 8003b8c:	d85c      	bhi.n	8003c48 <TIM_SlaveTimer_SetConfig+0x110>
 8003b8e:	2b50      	cmp	r3, #80	; 0x50
 8003b90:	d046      	beq.n	8003c20 <TIM_SlaveTimer_SetConfig+0xe8>
 8003b92:	2b50      	cmp	r3, #80	; 0x50
 8003b94:	d858      	bhi.n	8003c48 <TIM_SlaveTimer_SetConfig+0x110>
 8003b96:	2b40      	cmp	r3, #64	; 0x40
 8003b98:	d019      	beq.n	8003bce <TIM_SlaveTimer_SetConfig+0x96>
 8003b9a:	2b40      	cmp	r3, #64	; 0x40
 8003b9c:	d854      	bhi.n	8003c48 <TIM_SlaveTimer_SetConfig+0x110>
 8003b9e:	2b30      	cmp	r3, #48	; 0x30
 8003ba0:	d055      	beq.n	8003c4e <TIM_SlaveTimer_SetConfig+0x116>
 8003ba2:	2b30      	cmp	r3, #48	; 0x30
 8003ba4:	d850      	bhi.n	8003c48 <TIM_SlaveTimer_SetConfig+0x110>
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d051      	beq.n	8003c4e <TIM_SlaveTimer_SetConfig+0x116>
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d84c      	bhi.n	8003c48 <TIM_SlaveTimer_SetConfig+0x110>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d04d      	beq.n	8003c4e <TIM_SlaveTimer_SetConfig+0x116>
 8003bb2:	2b10      	cmp	r3, #16
 8003bb4:	d04b      	beq.n	8003c4e <TIM_SlaveTimer_SetConfig+0x116>
 8003bb6:	e047      	b.n	8003c48 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68d9      	ldr	r1, [r3, #12]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	f000 f9ee 	bl	8003fa8 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003bcc:	e040      	b.n	8003c50 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b05      	cmp	r3, #5
 8003bd4:	d101      	bne.n	8003bda <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e03b      	b.n	8003c52 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6a1a      	ldr	r2, [r3, #32]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0201 	bic.w	r2, r2, #1
 8003bf0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c00:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	621a      	str	r2, [r3, #32]
      break;
 8003c1e:	e017      	b.n	8003c50 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	6899      	ldr	r1, [r3, #8]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f000 f88b 	bl	8003d48 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003c32:	e00d      	b.n	8003c50 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6899      	ldr	r1, [r3, #8]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	461a      	mov	r2, r3
 8003c42:	f000 f8ed 	bl	8003e20 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003c46:	e003      	b.n	8003c50 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c4c:	e000      	b.n	8003c50 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003c4e:	bf00      	nop
  }

  return status;
 8003c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	fffefff8 	.word	0xfffefff8

08003c60 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f023 0201 	bic.w	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4a28      	ldr	r2, [pc, #160]	; (8003d2c <TIM_TI1_SetConfig+0xcc>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d01b      	beq.n	8003cc6 <TIM_TI1_SetConfig+0x66>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c94:	d017      	beq.n	8003cc6 <TIM_TI1_SetConfig+0x66>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4a25      	ldr	r2, [pc, #148]	; (8003d30 <TIM_TI1_SetConfig+0xd0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d013      	beq.n	8003cc6 <TIM_TI1_SetConfig+0x66>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4a24      	ldr	r2, [pc, #144]	; (8003d34 <TIM_TI1_SetConfig+0xd4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00f      	beq.n	8003cc6 <TIM_TI1_SetConfig+0x66>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4a23      	ldr	r2, [pc, #140]	; (8003d38 <TIM_TI1_SetConfig+0xd8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00b      	beq.n	8003cc6 <TIM_TI1_SetConfig+0x66>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4a22      	ldr	r2, [pc, #136]	; (8003d3c <TIM_TI1_SetConfig+0xdc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d007      	beq.n	8003cc6 <TIM_TI1_SetConfig+0x66>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4a21      	ldr	r2, [pc, #132]	; (8003d40 <TIM_TI1_SetConfig+0xe0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d003      	beq.n	8003cc6 <TIM_TI1_SetConfig+0x66>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4a20      	ldr	r2, [pc, #128]	; (8003d44 <TIM_TI1_SetConfig+0xe4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d101      	bne.n	8003cca <TIM_TI1_SetConfig+0x6a>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <TIM_TI1_SetConfig+0x6c>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f023 0303 	bic.w	r3, r3, #3
 8003cd6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	e003      	b.n	8003cea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f023 030a 	bic.w	r3, r3, #10
 8003d04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f003 030a 	and.w	r3, r3, #10
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	621a      	str	r2, [r3, #32]
}
 8003d1e:	bf00      	nop
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40010000 	.word	0x40010000
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40000800 	.word	0x40000800
 8003d38:	40000c00 	.word	0x40000c00
 8003d3c:	40010400 	.word	0x40010400
 8003d40:	40014000 	.word	0x40014000
 8003d44:	40001800 	.word	0x40001800

08003d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	f023 0201 	bic.w	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f023 030a 	bic.w	r3, r3, #10
 8003d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	621a      	str	r2, [r3, #32]
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b087      	sub	sp, #28
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f023 0210 	bic.w	r2, r3, #16
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003de4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	031b      	lsls	r3, r3, #12
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003df8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	621a      	str	r2, [r3, #32]
}
 8003e14:	bf00      	nop
 8003e16:	371c      	adds	r7, #28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	f023 0210 	bic.w	r2, r3, #16
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	031b      	lsls	r3, r3, #12
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	621a      	str	r2, [r3, #32]
}
 8003e74:	bf00      	nop
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f023 0303 	bic.w	r3, r3, #3
 8003eac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ebc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003ed0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	621a      	str	r2, [r3, #32]
}
 8003eec:	bf00      	nop
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f36:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	031b      	lsls	r3, r3, #12
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003f4a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	031b      	lsls	r3, r3, #12
 8003f50:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	621a      	str	r2, [r3, #32]
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b085      	sub	sp, #20
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f043 0307 	orr.w	r3, r3, #7
 8003f94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	609a      	str	r2, [r3, #8]
}
 8003f9c:	bf00      	nop
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	021a      	lsls	r2, r3, #8
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	609a      	str	r2, [r3, #8]
}
 8003fdc:	bf00      	nop
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a1a      	ldr	r2, [r3, #32]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	43db      	mvns	r3, r3
 800400a:	401a      	ands	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a1a      	ldr	r2, [r3, #32]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	fa01 f303 	lsl.w	r3, r1, r3
 8004020:	431a      	orrs	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
	...

08004034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004048:	2302      	movs	r3, #2
 800404a:	e06d      	b.n	8004128 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a30      	ldr	r2, [pc, #192]	; (8004134 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d004      	beq.n	8004080 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a2f      	ldr	r2, [pc, #188]	; (8004138 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d108      	bne.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004086:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004098:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a20      	ldr	r2, [pc, #128]	; (8004134 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d022      	beq.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040be:	d01d      	beq.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1d      	ldr	r2, [pc, #116]	; (800413c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d018      	beq.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1c      	ldr	r2, [pc, #112]	; (8004140 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d013      	beq.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1a      	ldr	r2, [pc, #104]	; (8004144 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00e      	beq.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a15      	ldr	r2, [pc, #84]	; (8004138 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d009      	beq.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a16      	ldr	r2, [pc, #88]	; (8004148 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d004      	beq.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a15      	ldr	r2, [pc, #84]	; (800414c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d10c      	bne.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004102:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	4313      	orrs	r3, r2
 800410c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	40010000 	.word	0x40010000
 8004138:	40010400 	.word	0x40010400
 800413c:	40000400 	.word	0x40000400
 8004140:	40000800 	.word	0x40000800
 8004144:	40000c00 	.word	0x40000c00
 8004148:	40014000 	.word	0x40014000
 800414c:	40001800 	.word	0x40001800

08004150 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e040      	b.n	8004220 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fc fede 	bl	8000f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2224      	movs	r2, #36	; 0x24
 80041b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f8c0 	bl	8004350 <UART_SetConfig>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e022      	b.n	8004220 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fb16 	bl	8004814 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004206:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fb9d 	bl	8004958 <UART_CheckIdleState>
 800421e:	4603      	mov	r3, r0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	; 0x28
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	4613      	mov	r3, r2
 8004236:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800423c:	2b20      	cmp	r3, #32
 800423e:	f040 8081 	bne.w	8004344 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <HAL_UART_Transmit+0x26>
 8004248:	88fb      	ldrh	r3, [r7, #6]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e079      	b.n	8004346 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_UART_Transmit+0x38>
 800425c:	2302      	movs	r3, #2
 800425e:	e072      	b.n	8004346 <HAL_UART_Transmit+0x11e>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2221      	movs	r2, #33	; 0x21
 8004274:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004276:	f7fd f84f 	bl	8001318 <HAL_GetTick>
 800427a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	88fa      	ldrh	r2, [r7, #6]
 8004280:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	88fa      	ldrh	r2, [r7, #6]
 8004288:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004294:	d108      	bne.n	80042a8 <HAL_UART_Transmit+0x80>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d104      	bne.n	80042a8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	e003      	b.n	80042b0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80042b8:	e02c      	b.n	8004314 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2200      	movs	r2, #0
 80042c2:	2180      	movs	r1, #128	; 0x80
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 fb90 	bl	80049ea <UART_WaitOnFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e038      	b.n	8004346 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10b      	bne.n	80042f2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	3302      	adds	r3, #2
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	e007      	b.n	8004302 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	781a      	ldrb	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	3301      	adds	r3, #1
 8004300:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1cc      	bne.n	80042ba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2200      	movs	r2, #0
 8004328:	2140      	movs	r1, #64	; 0x40
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 fb5d 	bl	80049ea <UART_WaitOnFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e005      	b.n	8004346 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2220      	movs	r2, #32
 800433e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	e000      	b.n	8004346 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004344:	2302      	movs	r3, #2
  }
}
 8004346:	4618      	mov	r0, r3
 8004348:	3720      	adds	r7, #32
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4ba7      	ldr	r3, [pc, #668]	; (8004618 <UART_SetConfig+0x2c8>)
 800437c:	4013      	ands	r3, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	6979      	ldr	r1, [r7, #20]
 8004384:	430b      	orrs	r3, r1
 8004386:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	430a      	orrs	r2, r1
 80043c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a95      	ldr	r2, [pc, #596]	; (800461c <UART_SetConfig+0x2cc>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d120      	bne.n	800440e <UART_SetConfig+0xbe>
 80043cc:	4b94      	ldr	r3, [pc, #592]	; (8004620 <UART_SetConfig+0x2d0>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d816      	bhi.n	8004408 <UART_SetConfig+0xb8>
 80043da:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <UART_SetConfig+0x90>)
 80043dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e0:	080043f1 	.word	0x080043f1
 80043e4:	080043fd 	.word	0x080043fd
 80043e8:	080043f7 	.word	0x080043f7
 80043ec:	08004403 	.word	0x08004403
 80043f0:	2301      	movs	r3, #1
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e14f      	b.n	8004696 <UART_SetConfig+0x346>
 80043f6:	2302      	movs	r3, #2
 80043f8:	77fb      	strb	r3, [r7, #31]
 80043fa:	e14c      	b.n	8004696 <UART_SetConfig+0x346>
 80043fc:	2304      	movs	r3, #4
 80043fe:	77fb      	strb	r3, [r7, #31]
 8004400:	e149      	b.n	8004696 <UART_SetConfig+0x346>
 8004402:	2308      	movs	r3, #8
 8004404:	77fb      	strb	r3, [r7, #31]
 8004406:	e146      	b.n	8004696 <UART_SetConfig+0x346>
 8004408:	2310      	movs	r3, #16
 800440a:	77fb      	strb	r3, [r7, #31]
 800440c:	e143      	b.n	8004696 <UART_SetConfig+0x346>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a84      	ldr	r2, [pc, #528]	; (8004624 <UART_SetConfig+0x2d4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d132      	bne.n	800447e <UART_SetConfig+0x12e>
 8004418:	4b81      	ldr	r3, [pc, #516]	; (8004620 <UART_SetConfig+0x2d0>)
 800441a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441e:	f003 030c 	and.w	r3, r3, #12
 8004422:	2b0c      	cmp	r3, #12
 8004424:	d828      	bhi.n	8004478 <UART_SetConfig+0x128>
 8004426:	a201      	add	r2, pc, #4	; (adr r2, 800442c <UART_SetConfig+0xdc>)
 8004428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442c:	08004461 	.word	0x08004461
 8004430:	08004479 	.word	0x08004479
 8004434:	08004479 	.word	0x08004479
 8004438:	08004479 	.word	0x08004479
 800443c:	0800446d 	.word	0x0800446d
 8004440:	08004479 	.word	0x08004479
 8004444:	08004479 	.word	0x08004479
 8004448:	08004479 	.word	0x08004479
 800444c:	08004467 	.word	0x08004467
 8004450:	08004479 	.word	0x08004479
 8004454:	08004479 	.word	0x08004479
 8004458:	08004479 	.word	0x08004479
 800445c:	08004473 	.word	0x08004473
 8004460:	2300      	movs	r3, #0
 8004462:	77fb      	strb	r3, [r7, #31]
 8004464:	e117      	b.n	8004696 <UART_SetConfig+0x346>
 8004466:	2302      	movs	r3, #2
 8004468:	77fb      	strb	r3, [r7, #31]
 800446a:	e114      	b.n	8004696 <UART_SetConfig+0x346>
 800446c:	2304      	movs	r3, #4
 800446e:	77fb      	strb	r3, [r7, #31]
 8004470:	e111      	b.n	8004696 <UART_SetConfig+0x346>
 8004472:	2308      	movs	r3, #8
 8004474:	77fb      	strb	r3, [r7, #31]
 8004476:	e10e      	b.n	8004696 <UART_SetConfig+0x346>
 8004478:	2310      	movs	r3, #16
 800447a:	77fb      	strb	r3, [r7, #31]
 800447c:	e10b      	b.n	8004696 <UART_SetConfig+0x346>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a69      	ldr	r2, [pc, #420]	; (8004628 <UART_SetConfig+0x2d8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d120      	bne.n	80044ca <UART_SetConfig+0x17a>
 8004488:	4b65      	ldr	r3, [pc, #404]	; (8004620 <UART_SetConfig+0x2d0>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004492:	2b30      	cmp	r3, #48	; 0x30
 8004494:	d013      	beq.n	80044be <UART_SetConfig+0x16e>
 8004496:	2b30      	cmp	r3, #48	; 0x30
 8004498:	d814      	bhi.n	80044c4 <UART_SetConfig+0x174>
 800449a:	2b20      	cmp	r3, #32
 800449c:	d009      	beq.n	80044b2 <UART_SetConfig+0x162>
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d810      	bhi.n	80044c4 <UART_SetConfig+0x174>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <UART_SetConfig+0x15c>
 80044a6:	2b10      	cmp	r3, #16
 80044a8:	d006      	beq.n	80044b8 <UART_SetConfig+0x168>
 80044aa:	e00b      	b.n	80044c4 <UART_SetConfig+0x174>
 80044ac:	2300      	movs	r3, #0
 80044ae:	77fb      	strb	r3, [r7, #31]
 80044b0:	e0f1      	b.n	8004696 <UART_SetConfig+0x346>
 80044b2:	2302      	movs	r3, #2
 80044b4:	77fb      	strb	r3, [r7, #31]
 80044b6:	e0ee      	b.n	8004696 <UART_SetConfig+0x346>
 80044b8:	2304      	movs	r3, #4
 80044ba:	77fb      	strb	r3, [r7, #31]
 80044bc:	e0eb      	b.n	8004696 <UART_SetConfig+0x346>
 80044be:	2308      	movs	r3, #8
 80044c0:	77fb      	strb	r3, [r7, #31]
 80044c2:	e0e8      	b.n	8004696 <UART_SetConfig+0x346>
 80044c4:	2310      	movs	r3, #16
 80044c6:	77fb      	strb	r3, [r7, #31]
 80044c8:	e0e5      	b.n	8004696 <UART_SetConfig+0x346>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a57      	ldr	r2, [pc, #348]	; (800462c <UART_SetConfig+0x2dc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d120      	bne.n	8004516 <UART_SetConfig+0x1c6>
 80044d4:	4b52      	ldr	r3, [pc, #328]	; (8004620 <UART_SetConfig+0x2d0>)
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044de:	2bc0      	cmp	r3, #192	; 0xc0
 80044e0:	d013      	beq.n	800450a <UART_SetConfig+0x1ba>
 80044e2:	2bc0      	cmp	r3, #192	; 0xc0
 80044e4:	d814      	bhi.n	8004510 <UART_SetConfig+0x1c0>
 80044e6:	2b80      	cmp	r3, #128	; 0x80
 80044e8:	d009      	beq.n	80044fe <UART_SetConfig+0x1ae>
 80044ea:	2b80      	cmp	r3, #128	; 0x80
 80044ec:	d810      	bhi.n	8004510 <UART_SetConfig+0x1c0>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <UART_SetConfig+0x1a8>
 80044f2:	2b40      	cmp	r3, #64	; 0x40
 80044f4:	d006      	beq.n	8004504 <UART_SetConfig+0x1b4>
 80044f6:	e00b      	b.n	8004510 <UART_SetConfig+0x1c0>
 80044f8:	2300      	movs	r3, #0
 80044fa:	77fb      	strb	r3, [r7, #31]
 80044fc:	e0cb      	b.n	8004696 <UART_SetConfig+0x346>
 80044fe:	2302      	movs	r3, #2
 8004500:	77fb      	strb	r3, [r7, #31]
 8004502:	e0c8      	b.n	8004696 <UART_SetConfig+0x346>
 8004504:	2304      	movs	r3, #4
 8004506:	77fb      	strb	r3, [r7, #31]
 8004508:	e0c5      	b.n	8004696 <UART_SetConfig+0x346>
 800450a:	2308      	movs	r3, #8
 800450c:	77fb      	strb	r3, [r7, #31]
 800450e:	e0c2      	b.n	8004696 <UART_SetConfig+0x346>
 8004510:	2310      	movs	r3, #16
 8004512:	77fb      	strb	r3, [r7, #31]
 8004514:	e0bf      	b.n	8004696 <UART_SetConfig+0x346>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a45      	ldr	r2, [pc, #276]	; (8004630 <UART_SetConfig+0x2e0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d125      	bne.n	800456c <UART_SetConfig+0x21c>
 8004520:	4b3f      	ldr	r3, [pc, #252]	; (8004620 <UART_SetConfig+0x2d0>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800452e:	d017      	beq.n	8004560 <UART_SetConfig+0x210>
 8004530:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004534:	d817      	bhi.n	8004566 <UART_SetConfig+0x216>
 8004536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800453a:	d00b      	beq.n	8004554 <UART_SetConfig+0x204>
 800453c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004540:	d811      	bhi.n	8004566 <UART_SetConfig+0x216>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <UART_SetConfig+0x1fe>
 8004546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800454a:	d006      	beq.n	800455a <UART_SetConfig+0x20a>
 800454c:	e00b      	b.n	8004566 <UART_SetConfig+0x216>
 800454e:	2300      	movs	r3, #0
 8004550:	77fb      	strb	r3, [r7, #31]
 8004552:	e0a0      	b.n	8004696 <UART_SetConfig+0x346>
 8004554:	2302      	movs	r3, #2
 8004556:	77fb      	strb	r3, [r7, #31]
 8004558:	e09d      	b.n	8004696 <UART_SetConfig+0x346>
 800455a:	2304      	movs	r3, #4
 800455c:	77fb      	strb	r3, [r7, #31]
 800455e:	e09a      	b.n	8004696 <UART_SetConfig+0x346>
 8004560:	2308      	movs	r3, #8
 8004562:	77fb      	strb	r3, [r7, #31]
 8004564:	e097      	b.n	8004696 <UART_SetConfig+0x346>
 8004566:	2310      	movs	r3, #16
 8004568:	77fb      	strb	r3, [r7, #31]
 800456a:	e094      	b.n	8004696 <UART_SetConfig+0x346>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a30      	ldr	r2, [pc, #192]	; (8004634 <UART_SetConfig+0x2e4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d125      	bne.n	80045c2 <UART_SetConfig+0x272>
 8004576:	4b2a      	ldr	r3, [pc, #168]	; (8004620 <UART_SetConfig+0x2d0>)
 8004578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004580:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004584:	d017      	beq.n	80045b6 <UART_SetConfig+0x266>
 8004586:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800458a:	d817      	bhi.n	80045bc <UART_SetConfig+0x26c>
 800458c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004590:	d00b      	beq.n	80045aa <UART_SetConfig+0x25a>
 8004592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004596:	d811      	bhi.n	80045bc <UART_SetConfig+0x26c>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <UART_SetConfig+0x254>
 800459c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a0:	d006      	beq.n	80045b0 <UART_SetConfig+0x260>
 80045a2:	e00b      	b.n	80045bc <UART_SetConfig+0x26c>
 80045a4:	2301      	movs	r3, #1
 80045a6:	77fb      	strb	r3, [r7, #31]
 80045a8:	e075      	b.n	8004696 <UART_SetConfig+0x346>
 80045aa:	2302      	movs	r3, #2
 80045ac:	77fb      	strb	r3, [r7, #31]
 80045ae:	e072      	b.n	8004696 <UART_SetConfig+0x346>
 80045b0:	2304      	movs	r3, #4
 80045b2:	77fb      	strb	r3, [r7, #31]
 80045b4:	e06f      	b.n	8004696 <UART_SetConfig+0x346>
 80045b6:	2308      	movs	r3, #8
 80045b8:	77fb      	strb	r3, [r7, #31]
 80045ba:	e06c      	b.n	8004696 <UART_SetConfig+0x346>
 80045bc:	2310      	movs	r3, #16
 80045be:	77fb      	strb	r3, [r7, #31]
 80045c0:	e069      	b.n	8004696 <UART_SetConfig+0x346>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a1c      	ldr	r2, [pc, #112]	; (8004638 <UART_SetConfig+0x2e8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d137      	bne.n	800463c <UART_SetConfig+0x2ec>
 80045cc:	4b14      	ldr	r3, [pc, #80]	; (8004620 <UART_SetConfig+0x2d0>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80045d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045da:	d017      	beq.n	800460c <UART_SetConfig+0x2bc>
 80045dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045e0:	d817      	bhi.n	8004612 <UART_SetConfig+0x2c2>
 80045e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e6:	d00b      	beq.n	8004600 <UART_SetConfig+0x2b0>
 80045e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ec:	d811      	bhi.n	8004612 <UART_SetConfig+0x2c2>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <UART_SetConfig+0x2aa>
 80045f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f6:	d006      	beq.n	8004606 <UART_SetConfig+0x2b6>
 80045f8:	e00b      	b.n	8004612 <UART_SetConfig+0x2c2>
 80045fa:	2300      	movs	r3, #0
 80045fc:	77fb      	strb	r3, [r7, #31]
 80045fe:	e04a      	b.n	8004696 <UART_SetConfig+0x346>
 8004600:	2302      	movs	r3, #2
 8004602:	77fb      	strb	r3, [r7, #31]
 8004604:	e047      	b.n	8004696 <UART_SetConfig+0x346>
 8004606:	2304      	movs	r3, #4
 8004608:	77fb      	strb	r3, [r7, #31]
 800460a:	e044      	b.n	8004696 <UART_SetConfig+0x346>
 800460c:	2308      	movs	r3, #8
 800460e:	77fb      	strb	r3, [r7, #31]
 8004610:	e041      	b.n	8004696 <UART_SetConfig+0x346>
 8004612:	2310      	movs	r3, #16
 8004614:	77fb      	strb	r3, [r7, #31]
 8004616:	e03e      	b.n	8004696 <UART_SetConfig+0x346>
 8004618:	efff69f3 	.word	0xefff69f3
 800461c:	40011000 	.word	0x40011000
 8004620:	40023800 	.word	0x40023800
 8004624:	40004400 	.word	0x40004400
 8004628:	40004800 	.word	0x40004800
 800462c:	40004c00 	.word	0x40004c00
 8004630:	40005000 	.word	0x40005000
 8004634:	40011400 	.word	0x40011400
 8004638:	40007800 	.word	0x40007800
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a71      	ldr	r2, [pc, #452]	; (8004808 <UART_SetConfig+0x4b8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d125      	bne.n	8004692 <UART_SetConfig+0x342>
 8004646:	4b71      	ldr	r3, [pc, #452]	; (800480c <UART_SetConfig+0x4bc>)
 8004648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004650:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004654:	d017      	beq.n	8004686 <UART_SetConfig+0x336>
 8004656:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800465a:	d817      	bhi.n	800468c <UART_SetConfig+0x33c>
 800465c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004660:	d00b      	beq.n	800467a <UART_SetConfig+0x32a>
 8004662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004666:	d811      	bhi.n	800468c <UART_SetConfig+0x33c>
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <UART_SetConfig+0x324>
 800466c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004670:	d006      	beq.n	8004680 <UART_SetConfig+0x330>
 8004672:	e00b      	b.n	800468c <UART_SetConfig+0x33c>
 8004674:	2300      	movs	r3, #0
 8004676:	77fb      	strb	r3, [r7, #31]
 8004678:	e00d      	b.n	8004696 <UART_SetConfig+0x346>
 800467a:	2302      	movs	r3, #2
 800467c:	77fb      	strb	r3, [r7, #31]
 800467e:	e00a      	b.n	8004696 <UART_SetConfig+0x346>
 8004680:	2304      	movs	r3, #4
 8004682:	77fb      	strb	r3, [r7, #31]
 8004684:	e007      	b.n	8004696 <UART_SetConfig+0x346>
 8004686:	2308      	movs	r3, #8
 8004688:	77fb      	strb	r3, [r7, #31]
 800468a:	e004      	b.n	8004696 <UART_SetConfig+0x346>
 800468c:	2310      	movs	r3, #16
 800468e:	77fb      	strb	r3, [r7, #31]
 8004690:	e001      	b.n	8004696 <UART_SetConfig+0x346>
 8004692:	2310      	movs	r3, #16
 8004694:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800469e:	d15a      	bne.n	8004756 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80046a0:	7ffb      	ldrb	r3, [r7, #31]
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d827      	bhi.n	80046f6 <UART_SetConfig+0x3a6>
 80046a6:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <UART_SetConfig+0x35c>)
 80046a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ac:	080046d1 	.word	0x080046d1
 80046b0:	080046d9 	.word	0x080046d9
 80046b4:	080046e1 	.word	0x080046e1
 80046b8:	080046f7 	.word	0x080046f7
 80046bc:	080046e7 	.word	0x080046e7
 80046c0:	080046f7 	.word	0x080046f7
 80046c4:	080046f7 	.word	0x080046f7
 80046c8:	080046f7 	.word	0x080046f7
 80046cc:	080046ef 	.word	0x080046ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046d0:	f7fd fdc2 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 80046d4:	61b8      	str	r0, [r7, #24]
        break;
 80046d6:	e013      	b.n	8004700 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046d8:	f7fd fdd2 	bl	8002280 <HAL_RCC_GetPCLK2Freq>
 80046dc:	61b8      	str	r0, [r7, #24]
        break;
 80046de:	e00f      	b.n	8004700 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046e0:	4b4b      	ldr	r3, [pc, #300]	; (8004810 <UART_SetConfig+0x4c0>)
 80046e2:	61bb      	str	r3, [r7, #24]
        break;
 80046e4:	e00c      	b.n	8004700 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046e6:	f7fd fccb 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 80046ea:	61b8      	str	r0, [r7, #24]
        break;
 80046ec:	e008      	b.n	8004700 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046f2:	61bb      	str	r3, [r7, #24]
        break;
 80046f4:	e004      	b.n	8004700 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	77bb      	strb	r3, [r7, #30]
        break;
 80046fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d074      	beq.n	80047f0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	005a      	lsls	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	085b      	lsrs	r3, r3, #1
 8004710:	441a      	add	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	fbb2 f3f3 	udiv	r3, r2, r3
 800471a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	2b0f      	cmp	r3, #15
 8004720:	d916      	bls.n	8004750 <UART_SetConfig+0x400>
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004728:	d212      	bcs.n	8004750 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	b29b      	uxth	r3, r3
 800472e:	f023 030f 	bic.w	r3, r3, #15
 8004732:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	085b      	lsrs	r3, r3, #1
 8004738:	b29b      	uxth	r3, r3
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	b29a      	uxth	r2, r3
 8004740:	89fb      	ldrh	r3, [r7, #14]
 8004742:	4313      	orrs	r3, r2
 8004744:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	89fa      	ldrh	r2, [r7, #14]
 800474c:	60da      	str	r2, [r3, #12]
 800474e:	e04f      	b.n	80047f0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	77bb      	strb	r3, [r7, #30]
 8004754:	e04c      	b.n	80047f0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004756:	7ffb      	ldrb	r3, [r7, #31]
 8004758:	2b08      	cmp	r3, #8
 800475a:	d828      	bhi.n	80047ae <UART_SetConfig+0x45e>
 800475c:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <UART_SetConfig+0x414>)
 800475e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004762:	bf00      	nop
 8004764:	08004789 	.word	0x08004789
 8004768:	08004791 	.word	0x08004791
 800476c:	08004799 	.word	0x08004799
 8004770:	080047af 	.word	0x080047af
 8004774:	0800479f 	.word	0x0800479f
 8004778:	080047af 	.word	0x080047af
 800477c:	080047af 	.word	0x080047af
 8004780:	080047af 	.word	0x080047af
 8004784:	080047a7 	.word	0x080047a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004788:	f7fd fd66 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 800478c:	61b8      	str	r0, [r7, #24]
        break;
 800478e:	e013      	b.n	80047b8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004790:	f7fd fd76 	bl	8002280 <HAL_RCC_GetPCLK2Freq>
 8004794:	61b8      	str	r0, [r7, #24]
        break;
 8004796:	e00f      	b.n	80047b8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004798:	4b1d      	ldr	r3, [pc, #116]	; (8004810 <UART_SetConfig+0x4c0>)
 800479a:	61bb      	str	r3, [r7, #24]
        break;
 800479c:	e00c      	b.n	80047b8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800479e:	f7fd fc6f 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 80047a2:	61b8      	str	r0, [r7, #24]
        break;
 80047a4:	e008      	b.n	80047b8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047aa:	61bb      	str	r3, [r7, #24]
        break;
 80047ac:	e004      	b.n	80047b8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	77bb      	strb	r3, [r7, #30]
        break;
 80047b6:	bf00      	nop
    }

    if (pclk != 0U)
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d018      	beq.n	80047f0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	085a      	lsrs	r2, r3, #1
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	441a      	add	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b0f      	cmp	r3, #15
 80047d6:	d909      	bls.n	80047ec <UART_SetConfig+0x49c>
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047de:	d205      	bcs.n	80047ec <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	e001      	b.n	80047f0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80047fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3720      	adds	r7, #32
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40007c00 	.word	0x40007c00
 800480c:	40023800 	.word	0x40023800
 8004810:	00f42400 	.word	0x00f42400

08004814 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01a      	beq.n	800492a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004912:	d10a      	bne.n	800492a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	605a      	str	r2, [r3, #4]
  }
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af02      	add	r7, sp, #8
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004968:	f7fc fcd6 	bl	8001318 <HAL_GetTick>
 800496c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0308 	and.w	r3, r3, #8
 8004978:	2b08      	cmp	r3, #8
 800497a:	d10e      	bne.n	800499a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800497c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f82d 	bl	80049ea <UART_WaitOnFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e023      	b.n	80049e2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d10e      	bne.n	80049c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f817 	bl	80049ea <UART_WaitOnFlagUntilTimeout>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e00d      	b.n	80049e2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2220      	movs	r2, #32
 80049ca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2220      	movs	r2, #32
 80049d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b09c      	sub	sp, #112	; 0x70
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	4613      	mov	r3, r2
 80049f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049fa:	e0a5      	b.n	8004b48 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a02:	f000 80a1 	beq.w	8004b48 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a06:	f7fc fc87 	bl	8001318 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d302      	bcc.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x32>
 8004a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d13e      	bne.n	8004a9a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a24:	e853 3f00 	ldrex	r3, [r3]
 8004a28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a30:	667b      	str	r3, [r7, #100]	; 0x64
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a3c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a42:	e841 2300 	strex	r3, r2, [r1]
 8004a46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e6      	bne.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3308      	adds	r3, #8
 8004a54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a58:	e853 3f00 	ldrex	r3, [r3]
 8004a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a60:	f023 0301 	bic.w	r3, r3, #1
 8004a64:	663b      	str	r3, [r7, #96]	; 0x60
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a76:	e841 2300 	strex	r3, r2, [r1]
 8004a7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1e5      	bne.n	8004a4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e067      	b.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d04f      	beq.n	8004b48 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab6:	d147      	bne.n	8004b48 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ac0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	461a      	mov	r2, r3
 8004ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ae2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e6      	bne.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3308      	adds	r3, #8
 8004afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	e853 3f00 	ldrex	r3, [r3]
 8004b02:	613b      	str	r3, [r7, #16]
   return(result);
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f023 0301 	bic.w	r3, r3, #1
 8004b0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3308      	adds	r3, #8
 8004b12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b14:	623a      	str	r2, [r7, #32]
 8004b16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	69f9      	ldr	r1, [r7, #28]
 8004b1a:	6a3a      	ldr	r2, [r7, #32]
 8004b1c:	e841 2300 	strex	r3, r2, [r1]
 8004b20:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e5      	bne.n	8004af4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2220      	movs	r2, #32
 8004b32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e010      	b.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69da      	ldr	r2, [r3, #28]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	4013      	ands	r3, r2
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	bf0c      	ite	eq
 8004b58:	2301      	moveq	r3, #1
 8004b5a:	2300      	movne	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	f43f af4a 	beq.w	80049fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3770      	adds	r7, #112	; 0x70
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <__errno>:
 8004b74:	4b01      	ldr	r3, [pc, #4]	; (8004b7c <__errno+0x8>)
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	2000000c 	.word	0x2000000c

08004b80 <__libc_init_array>:
 8004b80:	b570      	push	{r4, r5, r6, lr}
 8004b82:	4d0d      	ldr	r5, [pc, #52]	; (8004bb8 <__libc_init_array+0x38>)
 8004b84:	4c0d      	ldr	r4, [pc, #52]	; (8004bbc <__libc_init_array+0x3c>)
 8004b86:	1b64      	subs	r4, r4, r5
 8004b88:	10a4      	asrs	r4, r4, #2
 8004b8a:	2600      	movs	r6, #0
 8004b8c:	42a6      	cmp	r6, r4
 8004b8e:	d109      	bne.n	8004ba4 <__libc_init_array+0x24>
 8004b90:	4d0b      	ldr	r5, [pc, #44]	; (8004bc0 <__libc_init_array+0x40>)
 8004b92:	4c0c      	ldr	r4, [pc, #48]	; (8004bc4 <__libc_init_array+0x44>)
 8004b94:	f002 fe24 	bl	80077e0 <_init>
 8004b98:	1b64      	subs	r4, r4, r5
 8004b9a:	10a4      	asrs	r4, r4, #2
 8004b9c:	2600      	movs	r6, #0
 8004b9e:	42a6      	cmp	r6, r4
 8004ba0:	d105      	bne.n	8004bae <__libc_init_array+0x2e>
 8004ba2:	bd70      	pop	{r4, r5, r6, pc}
 8004ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba8:	4798      	blx	r3
 8004baa:	3601      	adds	r6, #1
 8004bac:	e7ee      	b.n	8004b8c <__libc_init_array+0xc>
 8004bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb2:	4798      	blx	r3
 8004bb4:	3601      	adds	r6, #1
 8004bb6:	e7f2      	b.n	8004b9e <__libc_init_array+0x1e>
 8004bb8:	08007c64 	.word	0x08007c64
 8004bbc:	08007c64 	.word	0x08007c64
 8004bc0:	08007c64 	.word	0x08007c64
 8004bc4:	08007c68 	.word	0x08007c68

08004bc8 <memset>:
 8004bc8:	4402      	add	r2, r0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d100      	bne.n	8004bd2 <memset+0xa>
 8004bd0:	4770      	bx	lr
 8004bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004bd6:	e7f9      	b.n	8004bcc <memset+0x4>

08004bd8 <__cvt>:
 8004bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bda:	ed2d 8b02 	vpush	{d8}
 8004bde:	eeb0 8b40 	vmov.f64	d8, d0
 8004be2:	b085      	sub	sp, #20
 8004be4:	4617      	mov	r7, r2
 8004be6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004be8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004bea:	ee18 2a90 	vmov	r2, s17
 8004bee:	f025 0520 	bic.w	r5, r5, #32
 8004bf2:	2a00      	cmp	r2, #0
 8004bf4:	bfb6      	itet	lt
 8004bf6:	222d      	movlt	r2, #45	; 0x2d
 8004bf8:	2200      	movge	r2, #0
 8004bfa:	eeb1 8b40 	vneglt.f64	d8, d0
 8004bfe:	2d46      	cmp	r5, #70	; 0x46
 8004c00:	460c      	mov	r4, r1
 8004c02:	701a      	strb	r2, [r3, #0]
 8004c04:	d004      	beq.n	8004c10 <__cvt+0x38>
 8004c06:	2d45      	cmp	r5, #69	; 0x45
 8004c08:	d100      	bne.n	8004c0c <__cvt+0x34>
 8004c0a:	3401      	adds	r4, #1
 8004c0c:	2102      	movs	r1, #2
 8004c0e:	e000      	b.n	8004c12 <__cvt+0x3a>
 8004c10:	2103      	movs	r1, #3
 8004c12:	ab03      	add	r3, sp, #12
 8004c14:	9301      	str	r3, [sp, #4]
 8004c16:	ab02      	add	r3, sp, #8
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	4622      	mov	r2, r4
 8004c1c:	4633      	mov	r3, r6
 8004c1e:	eeb0 0b48 	vmov.f64	d0, d8
 8004c22:	f000 fcc9 	bl	80055b8 <_dtoa_r>
 8004c26:	2d47      	cmp	r5, #71	; 0x47
 8004c28:	d109      	bne.n	8004c3e <__cvt+0x66>
 8004c2a:	07fb      	lsls	r3, r7, #31
 8004c2c:	d407      	bmi.n	8004c3e <__cvt+0x66>
 8004c2e:	9b03      	ldr	r3, [sp, #12]
 8004c30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c32:	1a1b      	subs	r3, r3, r0
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	b005      	add	sp, #20
 8004c38:	ecbd 8b02 	vpop	{d8}
 8004c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c3e:	2d46      	cmp	r5, #70	; 0x46
 8004c40:	eb00 0204 	add.w	r2, r0, r4
 8004c44:	d10c      	bne.n	8004c60 <__cvt+0x88>
 8004c46:	7803      	ldrb	r3, [r0, #0]
 8004c48:	2b30      	cmp	r3, #48	; 0x30
 8004c4a:	d107      	bne.n	8004c5c <__cvt+0x84>
 8004c4c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c54:	bf1c      	itt	ne
 8004c56:	f1c4 0401 	rsbne	r4, r4, #1
 8004c5a:	6034      	strne	r4, [r6, #0]
 8004c5c:	6833      	ldr	r3, [r6, #0]
 8004c5e:	441a      	add	r2, r3
 8004c60:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c68:	bf08      	it	eq
 8004c6a:	9203      	streq	r2, [sp, #12]
 8004c6c:	2130      	movs	r1, #48	; 0x30
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d2dc      	bcs.n	8004c2e <__cvt+0x56>
 8004c74:	1c5c      	adds	r4, r3, #1
 8004c76:	9403      	str	r4, [sp, #12]
 8004c78:	7019      	strb	r1, [r3, #0]
 8004c7a:	e7f8      	b.n	8004c6e <__cvt+0x96>

08004c7c <__exponent>:
 8004c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2900      	cmp	r1, #0
 8004c82:	bfb8      	it	lt
 8004c84:	4249      	neglt	r1, r1
 8004c86:	f803 2b02 	strb.w	r2, [r3], #2
 8004c8a:	bfb4      	ite	lt
 8004c8c:	222d      	movlt	r2, #45	; 0x2d
 8004c8e:	222b      	movge	r2, #43	; 0x2b
 8004c90:	2909      	cmp	r1, #9
 8004c92:	7042      	strb	r2, [r0, #1]
 8004c94:	dd2a      	ble.n	8004cec <__exponent+0x70>
 8004c96:	f10d 0407 	add.w	r4, sp, #7
 8004c9a:	46a4      	mov	ip, r4
 8004c9c:	270a      	movs	r7, #10
 8004c9e:	46a6      	mov	lr, r4
 8004ca0:	460a      	mov	r2, r1
 8004ca2:	fb91 f6f7 	sdiv	r6, r1, r7
 8004ca6:	fb07 1516 	mls	r5, r7, r6, r1
 8004caa:	3530      	adds	r5, #48	; 0x30
 8004cac:	2a63      	cmp	r2, #99	; 0x63
 8004cae:	f104 34ff 	add.w	r4, r4, #4294967295
 8004cb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004cb6:	4631      	mov	r1, r6
 8004cb8:	dcf1      	bgt.n	8004c9e <__exponent+0x22>
 8004cba:	3130      	adds	r1, #48	; 0x30
 8004cbc:	f1ae 0502 	sub.w	r5, lr, #2
 8004cc0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004cc4:	1c44      	adds	r4, r0, #1
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	4561      	cmp	r1, ip
 8004cca:	d30a      	bcc.n	8004ce2 <__exponent+0x66>
 8004ccc:	f10d 0209 	add.w	r2, sp, #9
 8004cd0:	eba2 020e 	sub.w	r2, r2, lr
 8004cd4:	4565      	cmp	r5, ip
 8004cd6:	bf88      	it	hi
 8004cd8:	2200      	movhi	r2, #0
 8004cda:	4413      	add	r3, r2
 8004cdc:	1a18      	subs	r0, r3, r0
 8004cde:	b003      	add	sp, #12
 8004ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ce6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004cea:	e7ed      	b.n	8004cc8 <__exponent+0x4c>
 8004cec:	2330      	movs	r3, #48	; 0x30
 8004cee:	3130      	adds	r1, #48	; 0x30
 8004cf0:	7083      	strb	r3, [r0, #2]
 8004cf2:	70c1      	strb	r1, [r0, #3]
 8004cf4:	1d03      	adds	r3, r0, #4
 8004cf6:	e7f1      	b.n	8004cdc <__exponent+0x60>

08004cf8 <_printf_float>:
 8004cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cfc:	b08b      	sub	sp, #44	; 0x2c
 8004cfe:	460c      	mov	r4, r1
 8004d00:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004d04:	4616      	mov	r6, r2
 8004d06:	461f      	mov	r7, r3
 8004d08:	4605      	mov	r5, r0
 8004d0a:	f001 f9d7 	bl	80060bc <_localeconv_r>
 8004d0e:	f8d0 b000 	ldr.w	fp, [r0]
 8004d12:	4658      	mov	r0, fp
 8004d14:	f7fb fa94 	bl	8000240 <strlen>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	9308      	str	r3, [sp, #32]
 8004d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d20:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004d24:	6822      	ldr	r2, [r4, #0]
 8004d26:	3307      	adds	r3, #7
 8004d28:	f023 0307 	bic.w	r3, r3, #7
 8004d2c:	f103 0108 	add.w	r1, r3, #8
 8004d30:	f8c8 1000 	str.w	r1, [r8]
 8004d34:	4682      	mov	sl, r0
 8004d36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d3a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8004d3e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8004fa0 <_printf_float+0x2a8>
 8004d42:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8004d46:	eeb0 6bc0 	vabs.f64	d6, d0
 8004d4a:	eeb4 6b47 	vcmp.f64	d6, d7
 8004d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d52:	dd24      	ble.n	8004d9e <_printf_float+0xa6>
 8004d54:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5c:	d502      	bpl.n	8004d64 <_printf_float+0x6c>
 8004d5e:	232d      	movs	r3, #45	; 0x2d
 8004d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d64:	4b90      	ldr	r3, [pc, #576]	; (8004fa8 <_printf_float+0x2b0>)
 8004d66:	4891      	ldr	r0, [pc, #580]	; (8004fac <_printf_float+0x2b4>)
 8004d68:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004d6c:	bf94      	ite	ls
 8004d6e:	4698      	movls	r8, r3
 8004d70:	4680      	movhi	r8, r0
 8004d72:	2303      	movs	r3, #3
 8004d74:	6123      	str	r3, [r4, #16]
 8004d76:	f022 0204 	bic.w	r2, r2, #4
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	6022      	str	r2, [r4, #0]
 8004d7e:	9304      	str	r3, [sp, #16]
 8004d80:	9700      	str	r7, [sp, #0]
 8004d82:	4633      	mov	r3, r6
 8004d84:	aa09      	add	r2, sp, #36	; 0x24
 8004d86:	4621      	mov	r1, r4
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f000 f9d3 	bl	8005134 <_printf_common>
 8004d8e:	3001      	adds	r0, #1
 8004d90:	f040 808a 	bne.w	8004ea8 <_printf_float+0x1b0>
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295
 8004d98:	b00b      	add	sp, #44	; 0x2c
 8004d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d9e:	eeb4 0b40 	vcmp.f64	d0, d0
 8004da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da6:	d709      	bvc.n	8004dbc <_printf_float+0xc4>
 8004da8:	ee10 3a90 	vmov	r3, s1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	bfbc      	itt	lt
 8004db0:	232d      	movlt	r3, #45	; 0x2d
 8004db2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004db6:	487e      	ldr	r0, [pc, #504]	; (8004fb0 <_printf_float+0x2b8>)
 8004db8:	4b7e      	ldr	r3, [pc, #504]	; (8004fb4 <_printf_float+0x2bc>)
 8004dba:	e7d5      	b.n	8004d68 <_printf_float+0x70>
 8004dbc:	6863      	ldr	r3, [r4, #4]
 8004dbe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004dc2:	9104      	str	r1, [sp, #16]
 8004dc4:	1c59      	adds	r1, r3, #1
 8004dc6:	d13c      	bne.n	8004e42 <_printf_float+0x14a>
 8004dc8:	2306      	movs	r3, #6
 8004dca:	6063      	str	r3, [r4, #4]
 8004dcc:	2300      	movs	r3, #0
 8004dce:	9303      	str	r3, [sp, #12]
 8004dd0:	ab08      	add	r3, sp, #32
 8004dd2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004dd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dda:	ab07      	add	r3, sp, #28
 8004ddc:	6861      	ldr	r1, [r4, #4]
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	6022      	str	r2, [r4, #0]
 8004de2:	f10d 031b 	add.w	r3, sp, #27
 8004de6:	4628      	mov	r0, r5
 8004de8:	f7ff fef6 	bl	8004bd8 <__cvt>
 8004dec:	9b04      	ldr	r3, [sp, #16]
 8004dee:	9907      	ldr	r1, [sp, #28]
 8004df0:	2b47      	cmp	r3, #71	; 0x47
 8004df2:	4680      	mov	r8, r0
 8004df4:	d108      	bne.n	8004e08 <_printf_float+0x110>
 8004df6:	1cc8      	adds	r0, r1, #3
 8004df8:	db02      	blt.n	8004e00 <_printf_float+0x108>
 8004dfa:	6863      	ldr	r3, [r4, #4]
 8004dfc:	4299      	cmp	r1, r3
 8004dfe:	dd41      	ble.n	8004e84 <_printf_float+0x18c>
 8004e00:	f1a9 0902 	sub.w	r9, r9, #2
 8004e04:	fa5f f989 	uxtb.w	r9, r9
 8004e08:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004e0c:	d820      	bhi.n	8004e50 <_printf_float+0x158>
 8004e0e:	3901      	subs	r1, #1
 8004e10:	464a      	mov	r2, r9
 8004e12:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e16:	9107      	str	r1, [sp, #28]
 8004e18:	f7ff ff30 	bl	8004c7c <__exponent>
 8004e1c:	9a08      	ldr	r2, [sp, #32]
 8004e1e:	9004      	str	r0, [sp, #16]
 8004e20:	1813      	adds	r3, r2, r0
 8004e22:	2a01      	cmp	r2, #1
 8004e24:	6123      	str	r3, [r4, #16]
 8004e26:	dc02      	bgt.n	8004e2e <_printf_float+0x136>
 8004e28:	6822      	ldr	r2, [r4, #0]
 8004e2a:	07d2      	lsls	r2, r2, #31
 8004e2c:	d501      	bpl.n	8004e32 <_printf_float+0x13a>
 8004e2e:	3301      	adds	r3, #1
 8004e30:	6123      	str	r3, [r4, #16]
 8004e32:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0a2      	beq.n	8004d80 <_printf_float+0x88>
 8004e3a:	232d      	movs	r3, #45	; 0x2d
 8004e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e40:	e79e      	b.n	8004d80 <_printf_float+0x88>
 8004e42:	9904      	ldr	r1, [sp, #16]
 8004e44:	2947      	cmp	r1, #71	; 0x47
 8004e46:	d1c1      	bne.n	8004dcc <_printf_float+0xd4>
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1bf      	bne.n	8004dcc <_printf_float+0xd4>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e7bc      	b.n	8004dca <_printf_float+0xd2>
 8004e50:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004e54:	d118      	bne.n	8004e88 <_printf_float+0x190>
 8004e56:	2900      	cmp	r1, #0
 8004e58:	6863      	ldr	r3, [r4, #4]
 8004e5a:	dd0b      	ble.n	8004e74 <_printf_float+0x17c>
 8004e5c:	6121      	str	r1, [r4, #16]
 8004e5e:	b913      	cbnz	r3, 8004e66 <_printf_float+0x16e>
 8004e60:	6822      	ldr	r2, [r4, #0]
 8004e62:	07d0      	lsls	r0, r2, #31
 8004e64:	d502      	bpl.n	8004e6c <_printf_float+0x174>
 8004e66:	3301      	adds	r3, #1
 8004e68:	440b      	add	r3, r1
 8004e6a:	6123      	str	r3, [r4, #16]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e70:	9304      	str	r3, [sp, #16]
 8004e72:	e7de      	b.n	8004e32 <_printf_float+0x13a>
 8004e74:	b913      	cbnz	r3, 8004e7c <_printf_float+0x184>
 8004e76:	6822      	ldr	r2, [r4, #0]
 8004e78:	07d2      	lsls	r2, r2, #31
 8004e7a:	d501      	bpl.n	8004e80 <_printf_float+0x188>
 8004e7c:	3302      	adds	r3, #2
 8004e7e:	e7f4      	b.n	8004e6a <_printf_float+0x172>
 8004e80:	2301      	movs	r3, #1
 8004e82:	e7f2      	b.n	8004e6a <_printf_float+0x172>
 8004e84:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004e88:	9b08      	ldr	r3, [sp, #32]
 8004e8a:	4299      	cmp	r1, r3
 8004e8c:	db05      	blt.n	8004e9a <_printf_float+0x1a2>
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	6121      	str	r1, [r4, #16]
 8004e92:	07d8      	lsls	r0, r3, #31
 8004e94:	d5ea      	bpl.n	8004e6c <_printf_float+0x174>
 8004e96:	1c4b      	adds	r3, r1, #1
 8004e98:	e7e7      	b.n	8004e6a <_printf_float+0x172>
 8004e9a:	2900      	cmp	r1, #0
 8004e9c:	bfd4      	ite	le
 8004e9e:	f1c1 0202 	rsble	r2, r1, #2
 8004ea2:	2201      	movgt	r2, #1
 8004ea4:	4413      	add	r3, r2
 8004ea6:	e7e0      	b.n	8004e6a <_printf_float+0x172>
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	055a      	lsls	r2, r3, #21
 8004eac:	d407      	bmi.n	8004ebe <_printf_float+0x1c6>
 8004eae:	6923      	ldr	r3, [r4, #16]
 8004eb0:	4642      	mov	r2, r8
 8004eb2:	4631      	mov	r1, r6
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	47b8      	blx	r7
 8004eb8:	3001      	adds	r0, #1
 8004eba:	d12a      	bne.n	8004f12 <_printf_float+0x21a>
 8004ebc:	e76a      	b.n	8004d94 <_printf_float+0x9c>
 8004ebe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004ec2:	f240 80e2 	bls.w	800508a <_printf_float+0x392>
 8004ec6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004eca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed2:	d133      	bne.n	8004f3c <_printf_float+0x244>
 8004ed4:	4a38      	ldr	r2, [pc, #224]	; (8004fb8 <_printf_float+0x2c0>)
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	4631      	mov	r1, r6
 8004eda:	4628      	mov	r0, r5
 8004edc:	47b8      	blx	r7
 8004ede:	3001      	adds	r0, #1
 8004ee0:	f43f af58 	beq.w	8004d94 <_printf_float+0x9c>
 8004ee4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	db02      	blt.n	8004ef2 <_printf_float+0x1fa>
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	07d8      	lsls	r0, r3, #31
 8004ef0:	d50f      	bpl.n	8004f12 <_printf_float+0x21a>
 8004ef2:	4653      	mov	r3, sl
 8004ef4:	465a      	mov	r2, fp
 8004ef6:	4631      	mov	r1, r6
 8004ef8:	4628      	mov	r0, r5
 8004efa:	47b8      	blx	r7
 8004efc:	3001      	adds	r0, #1
 8004efe:	f43f af49 	beq.w	8004d94 <_printf_float+0x9c>
 8004f02:	f04f 0800 	mov.w	r8, #0
 8004f06:	f104 091a 	add.w	r9, r4, #26
 8004f0a:	9b08      	ldr	r3, [sp, #32]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	4543      	cmp	r3, r8
 8004f10:	dc09      	bgt.n	8004f26 <_printf_float+0x22e>
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	079b      	lsls	r3, r3, #30
 8004f16:	f100 8108 	bmi.w	800512a <_printf_float+0x432>
 8004f1a:	68e0      	ldr	r0, [r4, #12]
 8004f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f1e:	4298      	cmp	r0, r3
 8004f20:	bfb8      	it	lt
 8004f22:	4618      	movlt	r0, r3
 8004f24:	e738      	b.n	8004d98 <_printf_float+0xa0>
 8004f26:	2301      	movs	r3, #1
 8004f28:	464a      	mov	r2, r9
 8004f2a:	4631      	mov	r1, r6
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	47b8      	blx	r7
 8004f30:	3001      	adds	r0, #1
 8004f32:	f43f af2f 	beq.w	8004d94 <_printf_float+0x9c>
 8004f36:	f108 0801 	add.w	r8, r8, #1
 8004f3a:	e7e6      	b.n	8004f0a <_printf_float+0x212>
 8004f3c:	9b07      	ldr	r3, [sp, #28]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	dc3c      	bgt.n	8004fbc <_printf_float+0x2c4>
 8004f42:	4a1d      	ldr	r2, [pc, #116]	; (8004fb8 <_printf_float+0x2c0>)
 8004f44:	2301      	movs	r3, #1
 8004f46:	4631      	mov	r1, r6
 8004f48:	4628      	mov	r0, r5
 8004f4a:	47b8      	blx	r7
 8004f4c:	3001      	adds	r0, #1
 8004f4e:	f43f af21 	beq.w	8004d94 <_printf_float+0x9c>
 8004f52:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	d102      	bne.n	8004f60 <_printf_float+0x268>
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	07d9      	lsls	r1, r3, #31
 8004f5e:	d5d8      	bpl.n	8004f12 <_printf_float+0x21a>
 8004f60:	4653      	mov	r3, sl
 8004f62:	465a      	mov	r2, fp
 8004f64:	4631      	mov	r1, r6
 8004f66:	4628      	mov	r0, r5
 8004f68:	47b8      	blx	r7
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	f43f af12 	beq.w	8004d94 <_printf_float+0x9c>
 8004f70:	f04f 0900 	mov.w	r9, #0
 8004f74:	f104 0a1a 	add.w	sl, r4, #26
 8004f78:	9b07      	ldr	r3, [sp, #28]
 8004f7a:	425b      	negs	r3, r3
 8004f7c:	454b      	cmp	r3, r9
 8004f7e:	dc01      	bgt.n	8004f84 <_printf_float+0x28c>
 8004f80:	9b08      	ldr	r3, [sp, #32]
 8004f82:	e795      	b.n	8004eb0 <_printf_float+0x1b8>
 8004f84:	2301      	movs	r3, #1
 8004f86:	4652      	mov	r2, sl
 8004f88:	4631      	mov	r1, r6
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	47b8      	blx	r7
 8004f8e:	3001      	adds	r0, #1
 8004f90:	f43f af00 	beq.w	8004d94 <_printf_float+0x9c>
 8004f94:	f109 0901 	add.w	r9, r9, #1
 8004f98:	e7ee      	b.n	8004f78 <_printf_float+0x280>
 8004f9a:	bf00      	nop
 8004f9c:	f3af 8000 	nop.w
 8004fa0:	ffffffff 	.word	0xffffffff
 8004fa4:	7fefffff 	.word	0x7fefffff
 8004fa8:	08007880 	.word	0x08007880
 8004fac:	08007884 	.word	0x08007884
 8004fb0:	0800788c 	.word	0x0800788c
 8004fb4:	08007888 	.word	0x08007888
 8004fb8:	08007890 	.word	0x08007890
 8004fbc:	9a08      	ldr	r2, [sp, #32]
 8004fbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	bfa8      	it	ge
 8004fc4:	461a      	movge	r2, r3
 8004fc6:	2a00      	cmp	r2, #0
 8004fc8:	4691      	mov	r9, r2
 8004fca:	dc38      	bgt.n	800503e <_printf_float+0x346>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	9305      	str	r3, [sp, #20]
 8004fd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fd4:	f104 021a 	add.w	r2, r4, #26
 8004fd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fda:	9905      	ldr	r1, [sp, #20]
 8004fdc:	9304      	str	r3, [sp, #16]
 8004fde:	eba3 0309 	sub.w	r3, r3, r9
 8004fe2:	428b      	cmp	r3, r1
 8004fe4:	dc33      	bgt.n	800504e <_printf_float+0x356>
 8004fe6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	db3c      	blt.n	8005068 <_printf_float+0x370>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	07da      	lsls	r2, r3, #31
 8004ff2:	d439      	bmi.n	8005068 <_printf_float+0x370>
 8004ff4:	9a08      	ldr	r2, [sp, #32]
 8004ff6:	9b04      	ldr	r3, [sp, #16]
 8004ff8:	9907      	ldr	r1, [sp, #28]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	eba2 0901 	sub.w	r9, r2, r1
 8005000:	4599      	cmp	r9, r3
 8005002:	bfa8      	it	ge
 8005004:	4699      	movge	r9, r3
 8005006:	f1b9 0f00 	cmp.w	r9, #0
 800500a:	dc35      	bgt.n	8005078 <_printf_float+0x380>
 800500c:	f04f 0800 	mov.w	r8, #0
 8005010:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005014:	f104 0a1a 	add.w	sl, r4, #26
 8005018:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800501c:	1a9b      	subs	r3, r3, r2
 800501e:	eba3 0309 	sub.w	r3, r3, r9
 8005022:	4543      	cmp	r3, r8
 8005024:	f77f af75 	ble.w	8004f12 <_printf_float+0x21a>
 8005028:	2301      	movs	r3, #1
 800502a:	4652      	mov	r2, sl
 800502c:	4631      	mov	r1, r6
 800502e:	4628      	mov	r0, r5
 8005030:	47b8      	blx	r7
 8005032:	3001      	adds	r0, #1
 8005034:	f43f aeae 	beq.w	8004d94 <_printf_float+0x9c>
 8005038:	f108 0801 	add.w	r8, r8, #1
 800503c:	e7ec      	b.n	8005018 <_printf_float+0x320>
 800503e:	4613      	mov	r3, r2
 8005040:	4631      	mov	r1, r6
 8005042:	4642      	mov	r2, r8
 8005044:	4628      	mov	r0, r5
 8005046:	47b8      	blx	r7
 8005048:	3001      	adds	r0, #1
 800504a:	d1bf      	bne.n	8004fcc <_printf_float+0x2d4>
 800504c:	e6a2      	b.n	8004d94 <_printf_float+0x9c>
 800504e:	2301      	movs	r3, #1
 8005050:	4631      	mov	r1, r6
 8005052:	4628      	mov	r0, r5
 8005054:	9204      	str	r2, [sp, #16]
 8005056:	47b8      	blx	r7
 8005058:	3001      	adds	r0, #1
 800505a:	f43f ae9b 	beq.w	8004d94 <_printf_float+0x9c>
 800505e:	9b05      	ldr	r3, [sp, #20]
 8005060:	9a04      	ldr	r2, [sp, #16]
 8005062:	3301      	adds	r3, #1
 8005064:	9305      	str	r3, [sp, #20]
 8005066:	e7b7      	b.n	8004fd8 <_printf_float+0x2e0>
 8005068:	4653      	mov	r3, sl
 800506a:	465a      	mov	r2, fp
 800506c:	4631      	mov	r1, r6
 800506e:	4628      	mov	r0, r5
 8005070:	47b8      	blx	r7
 8005072:	3001      	adds	r0, #1
 8005074:	d1be      	bne.n	8004ff4 <_printf_float+0x2fc>
 8005076:	e68d      	b.n	8004d94 <_printf_float+0x9c>
 8005078:	9a04      	ldr	r2, [sp, #16]
 800507a:	464b      	mov	r3, r9
 800507c:	4442      	add	r2, r8
 800507e:	4631      	mov	r1, r6
 8005080:	4628      	mov	r0, r5
 8005082:	47b8      	blx	r7
 8005084:	3001      	adds	r0, #1
 8005086:	d1c1      	bne.n	800500c <_printf_float+0x314>
 8005088:	e684      	b.n	8004d94 <_printf_float+0x9c>
 800508a:	9a08      	ldr	r2, [sp, #32]
 800508c:	2a01      	cmp	r2, #1
 800508e:	dc01      	bgt.n	8005094 <_printf_float+0x39c>
 8005090:	07db      	lsls	r3, r3, #31
 8005092:	d537      	bpl.n	8005104 <_printf_float+0x40c>
 8005094:	2301      	movs	r3, #1
 8005096:	4642      	mov	r2, r8
 8005098:	4631      	mov	r1, r6
 800509a:	4628      	mov	r0, r5
 800509c:	47b8      	blx	r7
 800509e:	3001      	adds	r0, #1
 80050a0:	f43f ae78 	beq.w	8004d94 <_printf_float+0x9c>
 80050a4:	4653      	mov	r3, sl
 80050a6:	465a      	mov	r2, fp
 80050a8:	4631      	mov	r1, r6
 80050aa:	4628      	mov	r0, r5
 80050ac:	47b8      	blx	r7
 80050ae:	3001      	adds	r0, #1
 80050b0:	f43f ae70 	beq.w	8004d94 <_printf_float+0x9c>
 80050b4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80050b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80050bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c0:	d01b      	beq.n	80050fa <_printf_float+0x402>
 80050c2:	9b08      	ldr	r3, [sp, #32]
 80050c4:	f108 0201 	add.w	r2, r8, #1
 80050c8:	3b01      	subs	r3, #1
 80050ca:	4631      	mov	r1, r6
 80050cc:	4628      	mov	r0, r5
 80050ce:	47b8      	blx	r7
 80050d0:	3001      	adds	r0, #1
 80050d2:	d10e      	bne.n	80050f2 <_printf_float+0x3fa>
 80050d4:	e65e      	b.n	8004d94 <_printf_float+0x9c>
 80050d6:	2301      	movs	r3, #1
 80050d8:	464a      	mov	r2, r9
 80050da:	4631      	mov	r1, r6
 80050dc:	4628      	mov	r0, r5
 80050de:	47b8      	blx	r7
 80050e0:	3001      	adds	r0, #1
 80050e2:	f43f ae57 	beq.w	8004d94 <_printf_float+0x9c>
 80050e6:	f108 0801 	add.w	r8, r8, #1
 80050ea:	9b08      	ldr	r3, [sp, #32]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	4543      	cmp	r3, r8
 80050f0:	dcf1      	bgt.n	80050d6 <_printf_float+0x3de>
 80050f2:	9b04      	ldr	r3, [sp, #16]
 80050f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050f8:	e6db      	b.n	8004eb2 <_printf_float+0x1ba>
 80050fa:	f04f 0800 	mov.w	r8, #0
 80050fe:	f104 091a 	add.w	r9, r4, #26
 8005102:	e7f2      	b.n	80050ea <_printf_float+0x3f2>
 8005104:	2301      	movs	r3, #1
 8005106:	4642      	mov	r2, r8
 8005108:	e7df      	b.n	80050ca <_printf_float+0x3d2>
 800510a:	2301      	movs	r3, #1
 800510c:	464a      	mov	r2, r9
 800510e:	4631      	mov	r1, r6
 8005110:	4628      	mov	r0, r5
 8005112:	47b8      	blx	r7
 8005114:	3001      	adds	r0, #1
 8005116:	f43f ae3d 	beq.w	8004d94 <_printf_float+0x9c>
 800511a:	f108 0801 	add.w	r8, r8, #1
 800511e:	68e3      	ldr	r3, [r4, #12]
 8005120:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005122:	1a5b      	subs	r3, r3, r1
 8005124:	4543      	cmp	r3, r8
 8005126:	dcf0      	bgt.n	800510a <_printf_float+0x412>
 8005128:	e6f7      	b.n	8004f1a <_printf_float+0x222>
 800512a:	f04f 0800 	mov.w	r8, #0
 800512e:	f104 0919 	add.w	r9, r4, #25
 8005132:	e7f4      	b.n	800511e <_printf_float+0x426>

08005134 <_printf_common>:
 8005134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005138:	4616      	mov	r6, r2
 800513a:	4699      	mov	r9, r3
 800513c:	688a      	ldr	r2, [r1, #8]
 800513e:	690b      	ldr	r3, [r1, #16]
 8005140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005144:	4293      	cmp	r3, r2
 8005146:	bfb8      	it	lt
 8005148:	4613      	movlt	r3, r2
 800514a:	6033      	str	r3, [r6, #0]
 800514c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005150:	4607      	mov	r7, r0
 8005152:	460c      	mov	r4, r1
 8005154:	b10a      	cbz	r2, 800515a <_printf_common+0x26>
 8005156:	3301      	adds	r3, #1
 8005158:	6033      	str	r3, [r6, #0]
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	0699      	lsls	r1, r3, #26
 800515e:	bf42      	ittt	mi
 8005160:	6833      	ldrmi	r3, [r6, #0]
 8005162:	3302      	addmi	r3, #2
 8005164:	6033      	strmi	r3, [r6, #0]
 8005166:	6825      	ldr	r5, [r4, #0]
 8005168:	f015 0506 	ands.w	r5, r5, #6
 800516c:	d106      	bne.n	800517c <_printf_common+0x48>
 800516e:	f104 0a19 	add.w	sl, r4, #25
 8005172:	68e3      	ldr	r3, [r4, #12]
 8005174:	6832      	ldr	r2, [r6, #0]
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	42ab      	cmp	r3, r5
 800517a:	dc26      	bgt.n	80051ca <_printf_common+0x96>
 800517c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005180:	1e13      	subs	r3, r2, #0
 8005182:	6822      	ldr	r2, [r4, #0]
 8005184:	bf18      	it	ne
 8005186:	2301      	movne	r3, #1
 8005188:	0692      	lsls	r2, r2, #26
 800518a:	d42b      	bmi.n	80051e4 <_printf_common+0xb0>
 800518c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005190:	4649      	mov	r1, r9
 8005192:	4638      	mov	r0, r7
 8005194:	47c0      	blx	r8
 8005196:	3001      	adds	r0, #1
 8005198:	d01e      	beq.n	80051d8 <_printf_common+0xa4>
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	68e5      	ldr	r5, [r4, #12]
 800519e:	6832      	ldr	r2, [r6, #0]
 80051a0:	f003 0306 	and.w	r3, r3, #6
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	bf08      	it	eq
 80051a8:	1aad      	subeq	r5, r5, r2
 80051aa:	68a3      	ldr	r3, [r4, #8]
 80051ac:	6922      	ldr	r2, [r4, #16]
 80051ae:	bf0c      	ite	eq
 80051b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051b4:	2500      	movne	r5, #0
 80051b6:	4293      	cmp	r3, r2
 80051b8:	bfc4      	itt	gt
 80051ba:	1a9b      	subgt	r3, r3, r2
 80051bc:	18ed      	addgt	r5, r5, r3
 80051be:	2600      	movs	r6, #0
 80051c0:	341a      	adds	r4, #26
 80051c2:	42b5      	cmp	r5, r6
 80051c4:	d11a      	bne.n	80051fc <_printf_common+0xc8>
 80051c6:	2000      	movs	r0, #0
 80051c8:	e008      	b.n	80051dc <_printf_common+0xa8>
 80051ca:	2301      	movs	r3, #1
 80051cc:	4652      	mov	r2, sl
 80051ce:	4649      	mov	r1, r9
 80051d0:	4638      	mov	r0, r7
 80051d2:	47c0      	blx	r8
 80051d4:	3001      	adds	r0, #1
 80051d6:	d103      	bne.n	80051e0 <_printf_common+0xac>
 80051d8:	f04f 30ff 	mov.w	r0, #4294967295
 80051dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e0:	3501      	adds	r5, #1
 80051e2:	e7c6      	b.n	8005172 <_printf_common+0x3e>
 80051e4:	18e1      	adds	r1, r4, r3
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	2030      	movs	r0, #48	; 0x30
 80051ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ee:	4422      	add	r2, r4
 80051f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051f8:	3302      	adds	r3, #2
 80051fa:	e7c7      	b.n	800518c <_printf_common+0x58>
 80051fc:	2301      	movs	r3, #1
 80051fe:	4622      	mov	r2, r4
 8005200:	4649      	mov	r1, r9
 8005202:	4638      	mov	r0, r7
 8005204:	47c0      	blx	r8
 8005206:	3001      	adds	r0, #1
 8005208:	d0e6      	beq.n	80051d8 <_printf_common+0xa4>
 800520a:	3601      	adds	r6, #1
 800520c:	e7d9      	b.n	80051c2 <_printf_common+0x8e>
	...

08005210 <_printf_i>:
 8005210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005214:	460c      	mov	r4, r1
 8005216:	4691      	mov	r9, r2
 8005218:	7e27      	ldrb	r7, [r4, #24]
 800521a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800521c:	2f78      	cmp	r7, #120	; 0x78
 800521e:	4680      	mov	r8, r0
 8005220:	469a      	mov	sl, r3
 8005222:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005226:	d807      	bhi.n	8005238 <_printf_i+0x28>
 8005228:	2f62      	cmp	r7, #98	; 0x62
 800522a:	d80a      	bhi.n	8005242 <_printf_i+0x32>
 800522c:	2f00      	cmp	r7, #0
 800522e:	f000 80d8 	beq.w	80053e2 <_printf_i+0x1d2>
 8005232:	2f58      	cmp	r7, #88	; 0x58
 8005234:	f000 80a3 	beq.w	800537e <_printf_i+0x16e>
 8005238:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800523c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005240:	e03a      	b.n	80052b8 <_printf_i+0xa8>
 8005242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005246:	2b15      	cmp	r3, #21
 8005248:	d8f6      	bhi.n	8005238 <_printf_i+0x28>
 800524a:	a001      	add	r0, pc, #4	; (adr r0, 8005250 <_printf_i+0x40>)
 800524c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005250:	080052a9 	.word	0x080052a9
 8005254:	080052bd 	.word	0x080052bd
 8005258:	08005239 	.word	0x08005239
 800525c:	08005239 	.word	0x08005239
 8005260:	08005239 	.word	0x08005239
 8005264:	08005239 	.word	0x08005239
 8005268:	080052bd 	.word	0x080052bd
 800526c:	08005239 	.word	0x08005239
 8005270:	08005239 	.word	0x08005239
 8005274:	08005239 	.word	0x08005239
 8005278:	08005239 	.word	0x08005239
 800527c:	080053c9 	.word	0x080053c9
 8005280:	080052ed 	.word	0x080052ed
 8005284:	080053ab 	.word	0x080053ab
 8005288:	08005239 	.word	0x08005239
 800528c:	08005239 	.word	0x08005239
 8005290:	080053eb 	.word	0x080053eb
 8005294:	08005239 	.word	0x08005239
 8005298:	080052ed 	.word	0x080052ed
 800529c:	08005239 	.word	0x08005239
 80052a0:	08005239 	.word	0x08005239
 80052a4:	080053b3 	.word	0x080053b3
 80052a8:	680b      	ldr	r3, [r1, #0]
 80052aa:	1d1a      	adds	r2, r3, #4
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	600a      	str	r2, [r1, #0]
 80052b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0a3      	b.n	8005404 <_printf_i+0x1f4>
 80052bc:	6825      	ldr	r5, [r4, #0]
 80052be:	6808      	ldr	r0, [r1, #0]
 80052c0:	062e      	lsls	r6, r5, #24
 80052c2:	f100 0304 	add.w	r3, r0, #4
 80052c6:	d50a      	bpl.n	80052de <_printf_i+0xce>
 80052c8:	6805      	ldr	r5, [r0, #0]
 80052ca:	600b      	str	r3, [r1, #0]
 80052cc:	2d00      	cmp	r5, #0
 80052ce:	da03      	bge.n	80052d8 <_printf_i+0xc8>
 80052d0:	232d      	movs	r3, #45	; 0x2d
 80052d2:	426d      	negs	r5, r5
 80052d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d8:	485e      	ldr	r0, [pc, #376]	; (8005454 <_printf_i+0x244>)
 80052da:	230a      	movs	r3, #10
 80052dc:	e019      	b.n	8005312 <_printf_i+0x102>
 80052de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80052e2:	6805      	ldr	r5, [r0, #0]
 80052e4:	600b      	str	r3, [r1, #0]
 80052e6:	bf18      	it	ne
 80052e8:	b22d      	sxthne	r5, r5
 80052ea:	e7ef      	b.n	80052cc <_printf_i+0xbc>
 80052ec:	680b      	ldr	r3, [r1, #0]
 80052ee:	6825      	ldr	r5, [r4, #0]
 80052f0:	1d18      	adds	r0, r3, #4
 80052f2:	6008      	str	r0, [r1, #0]
 80052f4:	0628      	lsls	r0, r5, #24
 80052f6:	d501      	bpl.n	80052fc <_printf_i+0xec>
 80052f8:	681d      	ldr	r5, [r3, #0]
 80052fa:	e002      	b.n	8005302 <_printf_i+0xf2>
 80052fc:	0669      	lsls	r1, r5, #25
 80052fe:	d5fb      	bpl.n	80052f8 <_printf_i+0xe8>
 8005300:	881d      	ldrh	r5, [r3, #0]
 8005302:	4854      	ldr	r0, [pc, #336]	; (8005454 <_printf_i+0x244>)
 8005304:	2f6f      	cmp	r7, #111	; 0x6f
 8005306:	bf0c      	ite	eq
 8005308:	2308      	moveq	r3, #8
 800530a:	230a      	movne	r3, #10
 800530c:	2100      	movs	r1, #0
 800530e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005312:	6866      	ldr	r6, [r4, #4]
 8005314:	60a6      	str	r6, [r4, #8]
 8005316:	2e00      	cmp	r6, #0
 8005318:	bfa2      	ittt	ge
 800531a:	6821      	ldrge	r1, [r4, #0]
 800531c:	f021 0104 	bicge.w	r1, r1, #4
 8005320:	6021      	strge	r1, [r4, #0]
 8005322:	b90d      	cbnz	r5, 8005328 <_printf_i+0x118>
 8005324:	2e00      	cmp	r6, #0
 8005326:	d04d      	beq.n	80053c4 <_printf_i+0x1b4>
 8005328:	4616      	mov	r6, r2
 800532a:	fbb5 f1f3 	udiv	r1, r5, r3
 800532e:	fb03 5711 	mls	r7, r3, r1, r5
 8005332:	5dc7      	ldrb	r7, [r0, r7]
 8005334:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005338:	462f      	mov	r7, r5
 800533a:	42bb      	cmp	r3, r7
 800533c:	460d      	mov	r5, r1
 800533e:	d9f4      	bls.n	800532a <_printf_i+0x11a>
 8005340:	2b08      	cmp	r3, #8
 8005342:	d10b      	bne.n	800535c <_printf_i+0x14c>
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	07df      	lsls	r7, r3, #31
 8005348:	d508      	bpl.n	800535c <_printf_i+0x14c>
 800534a:	6923      	ldr	r3, [r4, #16]
 800534c:	6861      	ldr	r1, [r4, #4]
 800534e:	4299      	cmp	r1, r3
 8005350:	bfde      	ittt	le
 8005352:	2330      	movle	r3, #48	; 0x30
 8005354:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005358:	f106 36ff 	addle.w	r6, r6, #4294967295
 800535c:	1b92      	subs	r2, r2, r6
 800535e:	6122      	str	r2, [r4, #16]
 8005360:	f8cd a000 	str.w	sl, [sp]
 8005364:	464b      	mov	r3, r9
 8005366:	aa03      	add	r2, sp, #12
 8005368:	4621      	mov	r1, r4
 800536a:	4640      	mov	r0, r8
 800536c:	f7ff fee2 	bl	8005134 <_printf_common>
 8005370:	3001      	adds	r0, #1
 8005372:	d14c      	bne.n	800540e <_printf_i+0x1fe>
 8005374:	f04f 30ff 	mov.w	r0, #4294967295
 8005378:	b004      	add	sp, #16
 800537a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800537e:	4835      	ldr	r0, [pc, #212]	; (8005454 <_printf_i+0x244>)
 8005380:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	680e      	ldr	r6, [r1, #0]
 8005388:	061f      	lsls	r7, r3, #24
 800538a:	f856 5b04 	ldr.w	r5, [r6], #4
 800538e:	600e      	str	r6, [r1, #0]
 8005390:	d514      	bpl.n	80053bc <_printf_i+0x1ac>
 8005392:	07d9      	lsls	r1, r3, #31
 8005394:	bf44      	itt	mi
 8005396:	f043 0320 	orrmi.w	r3, r3, #32
 800539a:	6023      	strmi	r3, [r4, #0]
 800539c:	b91d      	cbnz	r5, 80053a6 <_printf_i+0x196>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	f023 0320 	bic.w	r3, r3, #32
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	2310      	movs	r3, #16
 80053a8:	e7b0      	b.n	800530c <_printf_i+0xfc>
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	f043 0320 	orr.w	r3, r3, #32
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	2378      	movs	r3, #120	; 0x78
 80053b4:	4828      	ldr	r0, [pc, #160]	; (8005458 <_printf_i+0x248>)
 80053b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053ba:	e7e3      	b.n	8005384 <_printf_i+0x174>
 80053bc:	065e      	lsls	r6, r3, #25
 80053be:	bf48      	it	mi
 80053c0:	b2ad      	uxthmi	r5, r5
 80053c2:	e7e6      	b.n	8005392 <_printf_i+0x182>
 80053c4:	4616      	mov	r6, r2
 80053c6:	e7bb      	b.n	8005340 <_printf_i+0x130>
 80053c8:	680b      	ldr	r3, [r1, #0]
 80053ca:	6826      	ldr	r6, [r4, #0]
 80053cc:	6960      	ldr	r0, [r4, #20]
 80053ce:	1d1d      	adds	r5, r3, #4
 80053d0:	600d      	str	r5, [r1, #0]
 80053d2:	0635      	lsls	r5, r6, #24
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	d501      	bpl.n	80053dc <_printf_i+0x1cc>
 80053d8:	6018      	str	r0, [r3, #0]
 80053da:	e002      	b.n	80053e2 <_printf_i+0x1d2>
 80053dc:	0671      	lsls	r1, r6, #25
 80053de:	d5fb      	bpl.n	80053d8 <_printf_i+0x1c8>
 80053e0:	8018      	strh	r0, [r3, #0]
 80053e2:	2300      	movs	r3, #0
 80053e4:	6123      	str	r3, [r4, #16]
 80053e6:	4616      	mov	r6, r2
 80053e8:	e7ba      	b.n	8005360 <_printf_i+0x150>
 80053ea:	680b      	ldr	r3, [r1, #0]
 80053ec:	1d1a      	adds	r2, r3, #4
 80053ee:	600a      	str	r2, [r1, #0]
 80053f0:	681e      	ldr	r6, [r3, #0]
 80053f2:	6862      	ldr	r2, [r4, #4]
 80053f4:	2100      	movs	r1, #0
 80053f6:	4630      	mov	r0, r6
 80053f8:	f7fa ff2a 	bl	8000250 <memchr>
 80053fc:	b108      	cbz	r0, 8005402 <_printf_i+0x1f2>
 80053fe:	1b80      	subs	r0, r0, r6
 8005400:	6060      	str	r0, [r4, #4]
 8005402:	6863      	ldr	r3, [r4, #4]
 8005404:	6123      	str	r3, [r4, #16]
 8005406:	2300      	movs	r3, #0
 8005408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800540c:	e7a8      	b.n	8005360 <_printf_i+0x150>
 800540e:	6923      	ldr	r3, [r4, #16]
 8005410:	4632      	mov	r2, r6
 8005412:	4649      	mov	r1, r9
 8005414:	4640      	mov	r0, r8
 8005416:	47d0      	blx	sl
 8005418:	3001      	adds	r0, #1
 800541a:	d0ab      	beq.n	8005374 <_printf_i+0x164>
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	079b      	lsls	r3, r3, #30
 8005420:	d413      	bmi.n	800544a <_printf_i+0x23a>
 8005422:	68e0      	ldr	r0, [r4, #12]
 8005424:	9b03      	ldr	r3, [sp, #12]
 8005426:	4298      	cmp	r0, r3
 8005428:	bfb8      	it	lt
 800542a:	4618      	movlt	r0, r3
 800542c:	e7a4      	b.n	8005378 <_printf_i+0x168>
 800542e:	2301      	movs	r3, #1
 8005430:	4632      	mov	r2, r6
 8005432:	4649      	mov	r1, r9
 8005434:	4640      	mov	r0, r8
 8005436:	47d0      	blx	sl
 8005438:	3001      	adds	r0, #1
 800543a:	d09b      	beq.n	8005374 <_printf_i+0x164>
 800543c:	3501      	adds	r5, #1
 800543e:	68e3      	ldr	r3, [r4, #12]
 8005440:	9903      	ldr	r1, [sp, #12]
 8005442:	1a5b      	subs	r3, r3, r1
 8005444:	42ab      	cmp	r3, r5
 8005446:	dcf2      	bgt.n	800542e <_printf_i+0x21e>
 8005448:	e7eb      	b.n	8005422 <_printf_i+0x212>
 800544a:	2500      	movs	r5, #0
 800544c:	f104 0619 	add.w	r6, r4, #25
 8005450:	e7f5      	b.n	800543e <_printf_i+0x22e>
 8005452:	bf00      	nop
 8005454:	08007892 	.word	0x08007892
 8005458:	080078a3 	.word	0x080078a3

0800545c <siprintf>:
 800545c:	b40e      	push	{r1, r2, r3}
 800545e:	b500      	push	{lr}
 8005460:	b09c      	sub	sp, #112	; 0x70
 8005462:	ab1d      	add	r3, sp, #116	; 0x74
 8005464:	9002      	str	r0, [sp, #8]
 8005466:	9006      	str	r0, [sp, #24]
 8005468:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800546c:	4809      	ldr	r0, [pc, #36]	; (8005494 <siprintf+0x38>)
 800546e:	9107      	str	r1, [sp, #28]
 8005470:	9104      	str	r1, [sp, #16]
 8005472:	4909      	ldr	r1, [pc, #36]	; (8005498 <siprintf+0x3c>)
 8005474:	f853 2b04 	ldr.w	r2, [r3], #4
 8005478:	9105      	str	r1, [sp, #20]
 800547a:	6800      	ldr	r0, [r0, #0]
 800547c:	9301      	str	r3, [sp, #4]
 800547e:	a902      	add	r1, sp, #8
 8005480:	f001 faca 	bl	8006a18 <_svfiprintf_r>
 8005484:	9b02      	ldr	r3, [sp, #8]
 8005486:	2200      	movs	r2, #0
 8005488:	701a      	strb	r2, [r3, #0]
 800548a:	b01c      	add	sp, #112	; 0x70
 800548c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005490:	b003      	add	sp, #12
 8005492:	4770      	bx	lr
 8005494:	2000000c 	.word	0x2000000c
 8005498:	ffff0208 	.word	0xffff0208

0800549c <quorem>:
 800549c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a0:	6903      	ldr	r3, [r0, #16]
 80054a2:	690c      	ldr	r4, [r1, #16]
 80054a4:	42a3      	cmp	r3, r4
 80054a6:	4607      	mov	r7, r0
 80054a8:	f2c0 8081 	blt.w	80055ae <quorem+0x112>
 80054ac:	3c01      	subs	r4, #1
 80054ae:	f101 0814 	add.w	r8, r1, #20
 80054b2:	f100 0514 	add.w	r5, r0, #20
 80054b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054ba:	9301      	str	r3, [sp, #4]
 80054bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054c4:	3301      	adds	r3, #1
 80054c6:	429a      	cmp	r2, r3
 80054c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80054cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80054d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80054d4:	d331      	bcc.n	800553a <quorem+0x9e>
 80054d6:	f04f 0e00 	mov.w	lr, #0
 80054da:	4640      	mov	r0, r8
 80054dc:	46ac      	mov	ip, r5
 80054de:	46f2      	mov	sl, lr
 80054e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80054e4:	b293      	uxth	r3, r2
 80054e6:	fb06 e303 	mla	r3, r6, r3, lr
 80054ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	ebaa 0303 	sub.w	r3, sl, r3
 80054f4:	0c12      	lsrs	r2, r2, #16
 80054f6:	f8dc a000 	ldr.w	sl, [ip]
 80054fa:	fb06 e202 	mla	r2, r6, r2, lr
 80054fe:	fa13 f38a 	uxtah	r3, r3, sl
 8005502:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005506:	fa1f fa82 	uxth.w	sl, r2
 800550a:	f8dc 2000 	ldr.w	r2, [ip]
 800550e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005512:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005516:	b29b      	uxth	r3, r3
 8005518:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800551c:	4581      	cmp	r9, r0
 800551e:	f84c 3b04 	str.w	r3, [ip], #4
 8005522:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005526:	d2db      	bcs.n	80054e0 <quorem+0x44>
 8005528:	f855 300b 	ldr.w	r3, [r5, fp]
 800552c:	b92b      	cbnz	r3, 800553a <quorem+0x9e>
 800552e:	9b01      	ldr	r3, [sp, #4]
 8005530:	3b04      	subs	r3, #4
 8005532:	429d      	cmp	r5, r3
 8005534:	461a      	mov	r2, r3
 8005536:	d32e      	bcc.n	8005596 <quorem+0xfa>
 8005538:	613c      	str	r4, [r7, #16]
 800553a:	4638      	mov	r0, r7
 800553c:	f001 f856 	bl	80065ec <__mcmp>
 8005540:	2800      	cmp	r0, #0
 8005542:	db24      	blt.n	800558e <quorem+0xf2>
 8005544:	3601      	adds	r6, #1
 8005546:	4628      	mov	r0, r5
 8005548:	f04f 0c00 	mov.w	ip, #0
 800554c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005550:	f8d0 e000 	ldr.w	lr, [r0]
 8005554:	b293      	uxth	r3, r2
 8005556:	ebac 0303 	sub.w	r3, ip, r3
 800555a:	0c12      	lsrs	r2, r2, #16
 800555c:	fa13 f38e 	uxtah	r3, r3, lr
 8005560:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005564:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005568:	b29b      	uxth	r3, r3
 800556a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800556e:	45c1      	cmp	r9, r8
 8005570:	f840 3b04 	str.w	r3, [r0], #4
 8005574:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005578:	d2e8      	bcs.n	800554c <quorem+0xb0>
 800557a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800557e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005582:	b922      	cbnz	r2, 800558e <quorem+0xf2>
 8005584:	3b04      	subs	r3, #4
 8005586:	429d      	cmp	r5, r3
 8005588:	461a      	mov	r2, r3
 800558a:	d30a      	bcc.n	80055a2 <quorem+0x106>
 800558c:	613c      	str	r4, [r7, #16]
 800558e:	4630      	mov	r0, r6
 8005590:	b003      	add	sp, #12
 8005592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005596:	6812      	ldr	r2, [r2, #0]
 8005598:	3b04      	subs	r3, #4
 800559a:	2a00      	cmp	r2, #0
 800559c:	d1cc      	bne.n	8005538 <quorem+0x9c>
 800559e:	3c01      	subs	r4, #1
 80055a0:	e7c7      	b.n	8005532 <quorem+0x96>
 80055a2:	6812      	ldr	r2, [r2, #0]
 80055a4:	3b04      	subs	r3, #4
 80055a6:	2a00      	cmp	r2, #0
 80055a8:	d1f0      	bne.n	800558c <quorem+0xf0>
 80055aa:	3c01      	subs	r4, #1
 80055ac:	e7eb      	b.n	8005586 <quorem+0xea>
 80055ae:	2000      	movs	r0, #0
 80055b0:	e7ee      	b.n	8005590 <quorem+0xf4>
 80055b2:	0000      	movs	r0, r0
 80055b4:	0000      	movs	r0, r0
	...

080055b8 <_dtoa_r>:
 80055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	ec59 8b10 	vmov	r8, r9, d0
 80055c0:	b095      	sub	sp, #84	; 0x54
 80055c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80055c4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80055c6:	9107      	str	r1, [sp, #28]
 80055c8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80055cc:	4606      	mov	r6, r0
 80055ce:	9209      	str	r2, [sp, #36]	; 0x24
 80055d0:	9310      	str	r3, [sp, #64]	; 0x40
 80055d2:	b975      	cbnz	r5, 80055f2 <_dtoa_r+0x3a>
 80055d4:	2010      	movs	r0, #16
 80055d6:	f000 fd75 	bl	80060c4 <malloc>
 80055da:	4602      	mov	r2, r0
 80055dc:	6270      	str	r0, [r6, #36]	; 0x24
 80055de:	b920      	cbnz	r0, 80055ea <_dtoa_r+0x32>
 80055e0:	4bab      	ldr	r3, [pc, #684]	; (8005890 <_dtoa_r+0x2d8>)
 80055e2:	21ea      	movs	r1, #234	; 0xea
 80055e4:	48ab      	ldr	r0, [pc, #684]	; (8005894 <_dtoa_r+0x2dc>)
 80055e6:	f001 fb27 	bl	8006c38 <__assert_func>
 80055ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80055ee:	6005      	str	r5, [r0, #0]
 80055f0:	60c5      	str	r5, [r0, #12]
 80055f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80055f4:	6819      	ldr	r1, [r3, #0]
 80055f6:	b151      	cbz	r1, 800560e <_dtoa_r+0x56>
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	604a      	str	r2, [r1, #4]
 80055fc:	2301      	movs	r3, #1
 80055fe:	4093      	lsls	r3, r2
 8005600:	608b      	str	r3, [r1, #8]
 8005602:	4630      	mov	r0, r6
 8005604:	f000 fdb4 	bl	8006170 <_Bfree>
 8005608:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	f1b9 0300 	subs.w	r3, r9, #0
 8005612:	bfbb      	ittet	lt
 8005614:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005618:	9303      	strlt	r3, [sp, #12]
 800561a:	2300      	movge	r3, #0
 800561c:	2201      	movlt	r2, #1
 800561e:	bfac      	ite	ge
 8005620:	6023      	strge	r3, [r4, #0]
 8005622:	6022      	strlt	r2, [r4, #0]
 8005624:	4b9c      	ldr	r3, [pc, #624]	; (8005898 <_dtoa_r+0x2e0>)
 8005626:	9c03      	ldr	r4, [sp, #12]
 8005628:	43a3      	bics	r3, r4
 800562a:	d11a      	bne.n	8005662 <_dtoa_r+0xaa>
 800562c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800562e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005638:	ea53 0308 	orrs.w	r3, r3, r8
 800563c:	f000 8512 	beq.w	8006064 <_dtoa_r+0xaac>
 8005640:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005642:	b953      	cbnz	r3, 800565a <_dtoa_r+0xa2>
 8005644:	4b95      	ldr	r3, [pc, #596]	; (800589c <_dtoa_r+0x2e4>)
 8005646:	e01f      	b.n	8005688 <_dtoa_r+0xd0>
 8005648:	4b95      	ldr	r3, [pc, #596]	; (80058a0 <_dtoa_r+0x2e8>)
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	3308      	adds	r3, #8
 800564e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	9800      	ldr	r0, [sp, #0]
 8005654:	b015      	add	sp, #84	; 0x54
 8005656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800565a:	4b90      	ldr	r3, [pc, #576]	; (800589c <_dtoa_r+0x2e4>)
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	3303      	adds	r3, #3
 8005660:	e7f5      	b.n	800564e <_dtoa_r+0x96>
 8005662:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005666:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800566a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005672:	d10b      	bne.n	800568c <_dtoa_r+0xd4>
 8005674:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005676:	2301      	movs	r3, #1
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 84ee 	beq.w	800605e <_dtoa_r+0xaa6>
 8005682:	4888      	ldr	r0, [pc, #544]	; (80058a4 <_dtoa_r+0x2ec>)
 8005684:	6018      	str	r0, [r3, #0]
 8005686:	1e43      	subs	r3, r0, #1
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	e7e2      	b.n	8005652 <_dtoa_r+0x9a>
 800568c:	a913      	add	r1, sp, #76	; 0x4c
 800568e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005692:	aa12      	add	r2, sp, #72	; 0x48
 8005694:	4630      	mov	r0, r6
 8005696:	f001 f84d 	bl	8006734 <__d2b>
 800569a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800569e:	4605      	mov	r5, r0
 80056a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80056a2:	2900      	cmp	r1, #0
 80056a4:	d047      	beq.n	8005736 <_dtoa_r+0x17e>
 80056a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80056a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80056ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056b0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80056b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80056b8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80056bc:	2400      	movs	r4, #0
 80056be:	ec43 2b16 	vmov	d6, r2, r3
 80056c2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80056c6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8005878 <_dtoa_r+0x2c0>
 80056ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80056ce:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8005880 <_dtoa_r+0x2c8>
 80056d2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80056d6:	eeb0 7b46 	vmov.f64	d7, d6
 80056da:	ee06 1a90 	vmov	s13, r1
 80056de:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80056e2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8005888 <_dtoa_r+0x2d0>
 80056e6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80056ea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80056ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80056f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f6:	ee16 ba90 	vmov	fp, s13
 80056fa:	9411      	str	r4, [sp, #68]	; 0x44
 80056fc:	d508      	bpl.n	8005710 <_dtoa_r+0x158>
 80056fe:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005702:	eeb4 6b47 	vcmp.f64	d6, d7
 8005706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570a:	bf18      	it	ne
 800570c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005710:	f1bb 0f16 	cmp.w	fp, #22
 8005714:	d832      	bhi.n	800577c <_dtoa_r+0x1c4>
 8005716:	4b64      	ldr	r3, [pc, #400]	; (80058a8 <_dtoa_r+0x2f0>)
 8005718:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800571c:	ed93 7b00 	vldr	d7, [r3]
 8005720:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8005724:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800572c:	d501      	bpl.n	8005732 <_dtoa_r+0x17a>
 800572e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005732:	2300      	movs	r3, #0
 8005734:	e023      	b.n	800577e <_dtoa_r+0x1c6>
 8005736:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005738:	4401      	add	r1, r0
 800573a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800573e:	2b20      	cmp	r3, #32
 8005740:	bfc3      	ittte	gt
 8005742:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005746:	fa04 f303 	lslgt.w	r3, r4, r3
 800574a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800574e:	f1c3 0320 	rsble	r3, r3, #32
 8005752:	bfc6      	itte	gt
 8005754:	fa28 f804 	lsrgt.w	r8, r8, r4
 8005758:	ea43 0308 	orrgt.w	r3, r3, r8
 800575c:	fa08 f303 	lslle.w	r3, r8, r3
 8005760:	ee07 3a90 	vmov	s15, r3
 8005764:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005768:	3901      	subs	r1, #1
 800576a:	ed8d 7b00 	vstr	d7, [sp]
 800576e:	9c01      	ldr	r4, [sp, #4]
 8005770:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005774:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8005778:	2401      	movs	r4, #1
 800577a:	e7a0      	b.n	80056be <_dtoa_r+0x106>
 800577c:	2301      	movs	r3, #1
 800577e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005780:	1a43      	subs	r3, r0, r1
 8005782:	1e5a      	subs	r2, r3, #1
 8005784:	bf45      	ittet	mi
 8005786:	f1c3 0301 	rsbmi	r3, r3, #1
 800578a:	9305      	strmi	r3, [sp, #20]
 800578c:	2300      	movpl	r3, #0
 800578e:	2300      	movmi	r3, #0
 8005790:	9206      	str	r2, [sp, #24]
 8005792:	bf54      	ite	pl
 8005794:	9305      	strpl	r3, [sp, #20]
 8005796:	9306      	strmi	r3, [sp, #24]
 8005798:	f1bb 0f00 	cmp.w	fp, #0
 800579c:	db18      	blt.n	80057d0 <_dtoa_r+0x218>
 800579e:	9b06      	ldr	r3, [sp, #24]
 80057a0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80057a4:	445b      	add	r3, fp
 80057a6:	9306      	str	r3, [sp, #24]
 80057a8:	2300      	movs	r3, #0
 80057aa:	9a07      	ldr	r2, [sp, #28]
 80057ac:	2a09      	cmp	r2, #9
 80057ae:	d849      	bhi.n	8005844 <_dtoa_r+0x28c>
 80057b0:	2a05      	cmp	r2, #5
 80057b2:	bfc4      	itt	gt
 80057b4:	3a04      	subgt	r2, #4
 80057b6:	9207      	strgt	r2, [sp, #28]
 80057b8:	9a07      	ldr	r2, [sp, #28]
 80057ba:	f1a2 0202 	sub.w	r2, r2, #2
 80057be:	bfcc      	ite	gt
 80057c0:	2400      	movgt	r4, #0
 80057c2:	2401      	movle	r4, #1
 80057c4:	2a03      	cmp	r2, #3
 80057c6:	d848      	bhi.n	800585a <_dtoa_r+0x2a2>
 80057c8:	e8df f002 	tbb	[pc, r2]
 80057cc:	3a2c2e0b 	.word	0x3a2c2e0b
 80057d0:	9b05      	ldr	r3, [sp, #20]
 80057d2:	2200      	movs	r2, #0
 80057d4:	eba3 030b 	sub.w	r3, r3, fp
 80057d8:	9305      	str	r3, [sp, #20]
 80057da:	920e      	str	r2, [sp, #56]	; 0x38
 80057dc:	f1cb 0300 	rsb	r3, fp, #0
 80057e0:	e7e3      	b.n	80057aa <_dtoa_r+0x1f2>
 80057e2:	2200      	movs	r2, #0
 80057e4:	9208      	str	r2, [sp, #32]
 80057e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057e8:	2a00      	cmp	r2, #0
 80057ea:	dc39      	bgt.n	8005860 <_dtoa_r+0x2a8>
 80057ec:	f04f 0a01 	mov.w	sl, #1
 80057f0:	46d1      	mov	r9, sl
 80057f2:	4652      	mov	r2, sl
 80057f4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80057f8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80057fa:	2100      	movs	r1, #0
 80057fc:	6079      	str	r1, [r7, #4]
 80057fe:	2004      	movs	r0, #4
 8005800:	f100 0c14 	add.w	ip, r0, #20
 8005804:	4594      	cmp	ip, r2
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	d92f      	bls.n	800586a <_dtoa_r+0x2b2>
 800580a:	4630      	mov	r0, r6
 800580c:	930c      	str	r3, [sp, #48]	; 0x30
 800580e:	f000 fc6f 	bl	80060f0 <_Balloc>
 8005812:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005814:	9000      	str	r0, [sp, #0]
 8005816:	4602      	mov	r2, r0
 8005818:	2800      	cmp	r0, #0
 800581a:	d149      	bne.n	80058b0 <_dtoa_r+0x2f8>
 800581c:	4b23      	ldr	r3, [pc, #140]	; (80058ac <_dtoa_r+0x2f4>)
 800581e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005822:	e6df      	b.n	80055e4 <_dtoa_r+0x2c>
 8005824:	2201      	movs	r2, #1
 8005826:	e7dd      	b.n	80057e4 <_dtoa_r+0x22c>
 8005828:	2200      	movs	r2, #0
 800582a:	9208      	str	r2, [sp, #32]
 800582c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800582e:	eb0b 0a02 	add.w	sl, fp, r2
 8005832:	f10a 0901 	add.w	r9, sl, #1
 8005836:	464a      	mov	r2, r9
 8005838:	2a01      	cmp	r2, #1
 800583a:	bfb8      	it	lt
 800583c:	2201      	movlt	r2, #1
 800583e:	e7db      	b.n	80057f8 <_dtoa_r+0x240>
 8005840:	2201      	movs	r2, #1
 8005842:	e7f2      	b.n	800582a <_dtoa_r+0x272>
 8005844:	2401      	movs	r4, #1
 8005846:	2200      	movs	r2, #0
 8005848:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800584c:	f04f 3aff 	mov.w	sl, #4294967295
 8005850:	2100      	movs	r1, #0
 8005852:	46d1      	mov	r9, sl
 8005854:	2212      	movs	r2, #18
 8005856:	9109      	str	r1, [sp, #36]	; 0x24
 8005858:	e7ce      	b.n	80057f8 <_dtoa_r+0x240>
 800585a:	2201      	movs	r2, #1
 800585c:	9208      	str	r2, [sp, #32]
 800585e:	e7f5      	b.n	800584c <_dtoa_r+0x294>
 8005860:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8005864:	46d1      	mov	r9, sl
 8005866:	4652      	mov	r2, sl
 8005868:	e7c6      	b.n	80057f8 <_dtoa_r+0x240>
 800586a:	3101      	adds	r1, #1
 800586c:	6079      	str	r1, [r7, #4]
 800586e:	0040      	lsls	r0, r0, #1
 8005870:	e7c6      	b.n	8005800 <_dtoa_r+0x248>
 8005872:	bf00      	nop
 8005874:	f3af 8000 	nop.w
 8005878:	636f4361 	.word	0x636f4361
 800587c:	3fd287a7 	.word	0x3fd287a7
 8005880:	8b60c8b3 	.word	0x8b60c8b3
 8005884:	3fc68a28 	.word	0x3fc68a28
 8005888:	509f79fb 	.word	0x509f79fb
 800588c:	3fd34413 	.word	0x3fd34413
 8005890:	080078c1 	.word	0x080078c1
 8005894:	080078d8 	.word	0x080078d8
 8005898:	7ff00000 	.word	0x7ff00000
 800589c:	080078bd 	.word	0x080078bd
 80058a0:	080078b4 	.word	0x080078b4
 80058a4:	08007891 	.word	0x08007891
 80058a8:	080079d0 	.word	0x080079d0
 80058ac:	08007937 	.word	0x08007937
 80058b0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80058b2:	9900      	ldr	r1, [sp, #0]
 80058b4:	6011      	str	r1, [r2, #0]
 80058b6:	f1b9 0f0e 	cmp.w	r9, #14
 80058ba:	d872      	bhi.n	80059a2 <_dtoa_r+0x3ea>
 80058bc:	2c00      	cmp	r4, #0
 80058be:	d070      	beq.n	80059a2 <_dtoa_r+0x3ea>
 80058c0:	f1bb 0f00 	cmp.w	fp, #0
 80058c4:	f340 80a6 	ble.w	8005a14 <_dtoa_r+0x45c>
 80058c8:	49ca      	ldr	r1, [pc, #808]	; (8005bf4 <_dtoa_r+0x63c>)
 80058ca:	f00b 020f 	and.w	r2, fp, #15
 80058ce:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80058d2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80058d6:	ed92 7b00 	vldr	d7, [r2]
 80058da:	ea4f 112b 	mov.w	r1, fp, asr #4
 80058de:	f000 808d 	beq.w	80059fc <_dtoa_r+0x444>
 80058e2:	4ac5      	ldr	r2, [pc, #788]	; (8005bf8 <_dtoa_r+0x640>)
 80058e4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80058e8:	ed92 6b08 	vldr	d6, [r2, #32]
 80058ec:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80058f0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80058f4:	f001 010f 	and.w	r1, r1, #15
 80058f8:	2203      	movs	r2, #3
 80058fa:	48bf      	ldr	r0, [pc, #764]	; (8005bf8 <_dtoa_r+0x640>)
 80058fc:	2900      	cmp	r1, #0
 80058fe:	d17f      	bne.n	8005a00 <_dtoa_r+0x448>
 8005900:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005904:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005908:	ed8d 7b02 	vstr	d7, [sp, #8]
 800590c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800590e:	2900      	cmp	r1, #0
 8005910:	f000 80b2 	beq.w	8005a78 <_dtoa_r+0x4c0>
 8005914:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005918:	ed9d 7b02 	vldr	d7, [sp, #8]
 800591c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005924:	f140 80a8 	bpl.w	8005a78 <_dtoa_r+0x4c0>
 8005928:	f1b9 0f00 	cmp.w	r9, #0
 800592c:	f000 80a4 	beq.w	8005a78 <_dtoa_r+0x4c0>
 8005930:	f1ba 0f00 	cmp.w	sl, #0
 8005934:	dd31      	ble.n	800599a <_dtoa_r+0x3e2>
 8005936:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800593a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800593e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005942:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005946:	3201      	adds	r2, #1
 8005948:	4650      	mov	r0, sl
 800594a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800594e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005952:	ee07 2a90 	vmov	s15, r2
 8005956:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800595a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800595e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8005962:	9c03      	ldr	r4, [sp, #12]
 8005964:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005968:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800596c:	2800      	cmp	r0, #0
 800596e:	f040 8086 	bne.w	8005a7e <_dtoa_r+0x4c6>
 8005972:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005976:	ee36 6b47 	vsub.f64	d6, d6, d7
 800597a:	ec42 1b17 	vmov	d7, r1, r2
 800597e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005986:	f300 8272 	bgt.w	8005e6e <_dtoa_r+0x8b6>
 800598a:	eeb1 7b47 	vneg.f64	d7, d7
 800598e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005996:	f100 8267 	bmi.w	8005e68 <_dtoa_r+0x8b0>
 800599a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800599e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80059a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80059a4:	2a00      	cmp	r2, #0
 80059a6:	f2c0 8129 	blt.w	8005bfc <_dtoa_r+0x644>
 80059aa:	f1bb 0f0e 	cmp.w	fp, #14
 80059ae:	f300 8125 	bgt.w	8005bfc <_dtoa_r+0x644>
 80059b2:	4b90      	ldr	r3, [pc, #576]	; (8005bf4 <_dtoa_r+0x63c>)
 80059b4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80059b8:	ed93 6b00 	vldr	d6, [r3]
 80059bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f280 80c3 	bge.w	8005b4a <_dtoa_r+0x592>
 80059c4:	f1b9 0f00 	cmp.w	r9, #0
 80059c8:	f300 80bf 	bgt.w	8005b4a <_dtoa_r+0x592>
 80059cc:	f040 824c 	bne.w	8005e68 <_dtoa_r+0x8b0>
 80059d0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80059d4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80059d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80059e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e4:	464c      	mov	r4, r9
 80059e6:	464f      	mov	r7, r9
 80059e8:	f280 8222 	bge.w	8005e30 <_dtoa_r+0x878>
 80059ec:	f8dd 8000 	ldr.w	r8, [sp]
 80059f0:	2331      	movs	r3, #49	; 0x31
 80059f2:	f808 3b01 	strb.w	r3, [r8], #1
 80059f6:	f10b 0b01 	add.w	fp, fp, #1
 80059fa:	e21e      	b.n	8005e3a <_dtoa_r+0x882>
 80059fc:	2202      	movs	r2, #2
 80059fe:	e77c      	b.n	80058fa <_dtoa_r+0x342>
 8005a00:	07cc      	lsls	r4, r1, #31
 8005a02:	d504      	bpl.n	8005a0e <_dtoa_r+0x456>
 8005a04:	ed90 6b00 	vldr	d6, [r0]
 8005a08:	3201      	adds	r2, #1
 8005a0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005a0e:	1049      	asrs	r1, r1, #1
 8005a10:	3008      	adds	r0, #8
 8005a12:	e773      	b.n	80058fc <_dtoa_r+0x344>
 8005a14:	d02e      	beq.n	8005a74 <_dtoa_r+0x4bc>
 8005a16:	f1cb 0100 	rsb	r1, fp, #0
 8005a1a:	4a76      	ldr	r2, [pc, #472]	; (8005bf4 <_dtoa_r+0x63c>)
 8005a1c:	f001 000f 	and.w	r0, r1, #15
 8005a20:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005a24:	ed92 7b00 	vldr	d7, [r2]
 8005a28:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8005a2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005a30:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005a34:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8005a38:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8005a3c:	486e      	ldr	r0, [pc, #440]	; (8005bf8 <_dtoa_r+0x640>)
 8005a3e:	1109      	asrs	r1, r1, #4
 8005a40:	2400      	movs	r4, #0
 8005a42:	2202      	movs	r2, #2
 8005a44:	b939      	cbnz	r1, 8005a56 <_dtoa_r+0x49e>
 8005a46:	2c00      	cmp	r4, #0
 8005a48:	f43f af60 	beq.w	800590c <_dtoa_r+0x354>
 8005a4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a54:	e75a      	b.n	800590c <_dtoa_r+0x354>
 8005a56:	07cf      	lsls	r7, r1, #31
 8005a58:	d509      	bpl.n	8005a6e <_dtoa_r+0x4b6>
 8005a5a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8005a5e:	ed90 7b00 	vldr	d7, [r0]
 8005a62:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005a66:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005a6a:	3201      	adds	r2, #1
 8005a6c:	2401      	movs	r4, #1
 8005a6e:	1049      	asrs	r1, r1, #1
 8005a70:	3008      	adds	r0, #8
 8005a72:	e7e7      	b.n	8005a44 <_dtoa_r+0x48c>
 8005a74:	2202      	movs	r2, #2
 8005a76:	e749      	b.n	800590c <_dtoa_r+0x354>
 8005a78:	465f      	mov	r7, fp
 8005a7a:	4648      	mov	r0, r9
 8005a7c:	e765      	b.n	800594a <_dtoa_r+0x392>
 8005a7e:	ec42 1b17 	vmov	d7, r1, r2
 8005a82:	4a5c      	ldr	r2, [pc, #368]	; (8005bf4 <_dtoa_r+0x63c>)
 8005a84:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005a88:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005a8c:	9a00      	ldr	r2, [sp, #0]
 8005a8e:	1814      	adds	r4, r2, r0
 8005a90:	9a08      	ldr	r2, [sp, #32]
 8005a92:	b352      	cbz	r2, 8005aea <_dtoa_r+0x532>
 8005a94:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005a98:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005a9c:	f8dd 8000 	ldr.w	r8, [sp]
 8005aa0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005aa4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005aa8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005aac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005ab0:	ee14 2a90 	vmov	r2, s9
 8005ab4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005ab8:	3230      	adds	r2, #48	; 0x30
 8005aba:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005abe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac6:	f808 2b01 	strb.w	r2, [r8], #1
 8005aca:	d439      	bmi.n	8005b40 <_dtoa_r+0x588>
 8005acc:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005ad0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad8:	d472      	bmi.n	8005bc0 <_dtoa_r+0x608>
 8005ada:	45a0      	cmp	r8, r4
 8005adc:	f43f af5d 	beq.w	800599a <_dtoa_r+0x3e2>
 8005ae0:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005ae4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005ae8:	e7e0      	b.n	8005aac <_dtoa_r+0x4f4>
 8005aea:	f8dd 8000 	ldr.w	r8, [sp]
 8005aee:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005af2:	4621      	mov	r1, r4
 8005af4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005af8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005afc:	ee14 2a90 	vmov	r2, s9
 8005b00:	3230      	adds	r2, #48	; 0x30
 8005b02:	f808 2b01 	strb.w	r2, [r8], #1
 8005b06:	45a0      	cmp	r8, r4
 8005b08:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005b0c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005b10:	d118      	bne.n	8005b44 <_dtoa_r+0x58c>
 8005b12:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005b16:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005b1a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b22:	dc4d      	bgt.n	8005bc0 <_dtoa_r+0x608>
 8005b24:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005b28:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b30:	f57f af33 	bpl.w	800599a <_dtoa_r+0x3e2>
 8005b34:	4688      	mov	r8, r1
 8005b36:	3901      	subs	r1, #1
 8005b38:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005b3c:	2b30      	cmp	r3, #48	; 0x30
 8005b3e:	d0f9      	beq.n	8005b34 <_dtoa_r+0x57c>
 8005b40:	46bb      	mov	fp, r7
 8005b42:	e02a      	b.n	8005b9a <_dtoa_r+0x5e2>
 8005b44:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005b48:	e7d6      	b.n	8005af8 <_dtoa_r+0x540>
 8005b4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b4e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005b52:	f8dd 8000 	ldr.w	r8, [sp]
 8005b56:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005b5a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005b5e:	ee15 3a10 	vmov	r3, s10
 8005b62:	3330      	adds	r3, #48	; 0x30
 8005b64:	f808 3b01 	strb.w	r3, [r8], #1
 8005b68:	9b00      	ldr	r3, [sp, #0]
 8005b6a:	eba8 0303 	sub.w	r3, r8, r3
 8005b6e:	4599      	cmp	r9, r3
 8005b70:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005b74:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005b78:	d133      	bne.n	8005be2 <_dtoa_r+0x62a>
 8005b7a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b7e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b86:	dc1a      	bgt.n	8005bbe <_dtoa_r+0x606>
 8005b88:	eeb4 7b46 	vcmp.f64	d7, d6
 8005b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b90:	d103      	bne.n	8005b9a <_dtoa_r+0x5e2>
 8005b92:	ee15 3a10 	vmov	r3, s10
 8005b96:	07d9      	lsls	r1, r3, #31
 8005b98:	d411      	bmi.n	8005bbe <_dtoa_r+0x606>
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	f000 fae7 	bl	8006170 <_Bfree>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ba6:	f888 3000 	strb.w	r3, [r8]
 8005baa:	f10b 0301 	add.w	r3, fp, #1
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f43f ad4d 	beq.w	8005652 <_dtoa_r+0x9a>
 8005bb8:	f8c3 8000 	str.w	r8, [r3]
 8005bbc:	e549      	b.n	8005652 <_dtoa_r+0x9a>
 8005bbe:	465f      	mov	r7, fp
 8005bc0:	4643      	mov	r3, r8
 8005bc2:	4698      	mov	r8, r3
 8005bc4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005bc8:	2a39      	cmp	r2, #57	; 0x39
 8005bca:	d106      	bne.n	8005bda <_dtoa_r+0x622>
 8005bcc:	9a00      	ldr	r2, [sp, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d1f7      	bne.n	8005bc2 <_dtoa_r+0x60a>
 8005bd2:	9900      	ldr	r1, [sp, #0]
 8005bd4:	2230      	movs	r2, #48	; 0x30
 8005bd6:	3701      	adds	r7, #1
 8005bd8:	700a      	strb	r2, [r1, #0]
 8005bda:	781a      	ldrb	r2, [r3, #0]
 8005bdc:	3201      	adds	r2, #1
 8005bde:	701a      	strb	r2, [r3, #0]
 8005be0:	e7ae      	b.n	8005b40 <_dtoa_r+0x588>
 8005be2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005be6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bee:	d1b2      	bne.n	8005b56 <_dtoa_r+0x59e>
 8005bf0:	e7d3      	b.n	8005b9a <_dtoa_r+0x5e2>
 8005bf2:	bf00      	nop
 8005bf4:	080079d0 	.word	0x080079d0
 8005bf8:	080079a8 	.word	0x080079a8
 8005bfc:	9908      	ldr	r1, [sp, #32]
 8005bfe:	2900      	cmp	r1, #0
 8005c00:	f000 80d1 	beq.w	8005da6 <_dtoa_r+0x7ee>
 8005c04:	9907      	ldr	r1, [sp, #28]
 8005c06:	2901      	cmp	r1, #1
 8005c08:	f300 80b4 	bgt.w	8005d74 <_dtoa_r+0x7bc>
 8005c0c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005c0e:	2900      	cmp	r1, #0
 8005c10:	f000 80ac 	beq.w	8005d6c <_dtoa_r+0x7b4>
 8005c14:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005c18:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8005c1c:	461c      	mov	r4, r3
 8005c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8005c20:	9b05      	ldr	r3, [sp, #20]
 8005c22:	4413      	add	r3, r2
 8005c24:	9305      	str	r3, [sp, #20]
 8005c26:	9b06      	ldr	r3, [sp, #24]
 8005c28:	2101      	movs	r1, #1
 8005c2a:	4413      	add	r3, r2
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	9306      	str	r3, [sp, #24]
 8005c30:	f000 fb5a 	bl	80062e8 <__i2b>
 8005c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c36:	4607      	mov	r7, r0
 8005c38:	f1b8 0f00 	cmp.w	r8, #0
 8005c3c:	dd0d      	ble.n	8005c5a <_dtoa_r+0x6a2>
 8005c3e:	9a06      	ldr	r2, [sp, #24]
 8005c40:	2a00      	cmp	r2, #0
 8005c42:	dd0a      	ble.n	8005c5a <_dtoa_r+0x6a2>
 8005c44:	4542      	cmp	r2, r8
 8005c46:	9905      	ldr	r1, [sp, #20]
 8005c48:	bfa8      	it	ge
 8005c4a:	4642      	movge	r2, r8
 8005c4c:	1a89      	subs	r1, r1, r2
 8005c4e:	9105      	str	r1, [sp, #20]
 8005c50:	9906      	ldr	r1, [sp, #24]
 8005c52:	eba8 0802 	sub.w	r8, r8, r2
 8005c56:	1a8a      	subs	r2, r1, r2
 8005c58:	9206      	str	r2, [sp, #24]
 8005c5a:	b303      	cbz	r3, 8005c9e <_dtoa_r+0x6e6>
 8005c5c:	9a08      	ldr	r2, [sp, #32]
 8005c5e:	2a00      	cmp	r2, #0
 8005c60:	f000 80a6 	beq.w	8005db0 <_dtoa_r+0x7f8>
 8005c64:	2c00      	cmp	r4, #0
 8005c66:	dd13      	ble.n	8005c90 <_dtoa_r+0x6d8>
 8005c68:	4639      	mov	r1, r7
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	930c      	str	r3, [sp, #48]	; 0x30
 8005c70:	f000 fbf6 	bl	8006460 <__pow5mult>
 8005c74:	462a      	mov	r2, r5
 8005c76:	4601      	mov	r1, r0
 8005c78:	4607      	mov	r7, r0
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f000 fb4a 	bl	8006314 <__multiply>
 8005c80:	4629      	mov	r1, r5
 8005c82:	900a      	str	r0, [sp, #40]	; 0x28
 8005c84:	4630      	mov	r0, r6
 8005c86:	f000 fa73 	bl	8006170 <_Bfree>
 8005c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c8e:	4615      	mov	r5, r2
 8005c90:	1b1a      	subs	r2, r3, r4
 8005c92:	d004      	beq.n	8005c9e <_dtoa_r+0x6e6>
 8005c94:	4629      	mov	r1, r5
 8005c96:	4630      	mov	r0, r6
 8005c98:	f000 fbe2 	bl	8006460 <__pow5mult>
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	f000 fb21 	bl	80062e8 <__i2b>
 8005ca6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	4604      	mov	r4, r0
 8005cac:	f340 8082 	ble.w	8005db4 <_dtoa_r+0x7fc>
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	4601      	mov	r1, r0
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	f000 fbd3 	bl	8006460 <__pow5mult>
 8005cba:	9b07      	ldr	r3, [sp, #28]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	dd7b      	ble.n	8005dba <_dtoa_r+0x802>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	930a      	str	r3, [sp, #40]	; 0x28
 8005cc6:	6922      	ldr	r2, [r4, #16]
 8005cc8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005ccc:	6910      	ldr	r0, [r2, #16]
 8005cce:	f000 fabb 	bl	8006248 <__hi0bits>
 8005cd2:	f1c0 0020 	rsb	r0, r0, #32
 8005cd6:	9b06      	ldr	r3, [sp, #24]
 8005cd8:	4418      	add	r0, r3
 8005cda:	f010 001f 	ands.w	r0, r0, #31
 8005cde:	f000 808d 	beq.w	8005dfc <_dtoa_r+0x844>
 8005ce2:	f1c0 0220 	rsb	r2, r0, #32
 8005ce6:	2a04      	cmp	r2, #4
 8005ce8:	f340 8086 	ble.w	8005df8 <_dtoa_r+0x840>
 8005cec:	f1c0 001c 	rsb	r0, r0, #28
 8005cf0:	9b05      	ldr	r3, [sp, #20]
 8005cf2:	4403      	add	r3, r0
 8005cf4:	9305      	str	r3, [sp, #20]
 8005cf6:	9b06      	ldr	r3, [sp, #24]
 8005cf8:	4403      	add	r3, r0
 8005cfa:	4480      	add	r8, r0
 8005cfc:	9306      	str	r3, [sp, #24]
 8005cfe:	9b05      	ldr	r3, [sp, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	dd05      	ble.n	8005d10 <_dtoa_r+0x758>
 8005d04:	4629      	mov	r1, r5
 8005d06:	461a      	mov	r2, r3
 8005d08:	4630      	mov	r0, r6
 8005d0a:	f000 fc03 	bl	8006514 <__lshift>
 8005d0e:	4605      	mov	r5, r0
 8005d10:	9b06      	ldr	r3, [sp, #24]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	dd05      	ble.n	8005d22 <_dtoa_r+0x76a>
 8005d16:	4621      	mov	r1, r4
 8005d18:	461a      	mov	r2, r3
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f000 fbfa 	bl	8006514 <__lshift>
 8005d20:	4604      	mov	r4, r0
 8005d22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d06b      	beq.n	8005e00 <_dtoa_r+0x848>
 8005d28:	4621      	mov	r1, r4
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	f000 fc5e 	bl	80065ec <__mcmp>
 8005d30:	2800      	cmp	r0, #0
 8005d32:	da65      	bge.n	8005e00 <_dtoa_r+0x848>
 8005d34:	2300      	movs	r3, #0
 8005d36:	4629      	mov	r1, r5
 8005d38:	220a      	movs	r2, #10
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f000 fa3a 	bl	80061b4 <__multadd>
 8005d40:	9b08      	ldr	r3, [sp, #32]
 8005d42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d46:	4605      	mov	r5, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 8192 	beq.w	8006072 <_dtoa_r+0xaba>
 8005d4e:	4639      	mov	r1, r7
 8005d50:	2300      	movs	r3, #0
 8005d52:	220a      	movs	r2, #10
 8005d54:	4630      	mov	r0, r6
 8005d56:	f000 fa2d 	bl	80061b4 <__multadd>
 8005d5a:	f1ba 0f00 	cmp.w	sl, #0
 8005d5e:	4607      	mov	r7, r0
 8005d60:	f300 808e 	bgt.w	8005e80 <_dtoa_r+0x8c8>
 8005d64:	9b07      	ldr	r3, [sp, #28]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	dc51      	bgt.n	8005e0e <_dtoa_r+0x856>
 8005d6a:	e089      	b.n	8005e80 <_dtoa_r+0x8c8>
 8005d6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005d72:	e751      	b.n	8005c18 <_dtoa_r+0x660>
 8005d74:	f109 34ff 	add.w	r4, r9, #4294967295
 8005d78:	42a3      	cmp	r3, r4
 8005d7a:	bfbf      	itttt	lt
 8005d7c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005d7e:	1ae3      	sublt	r3, r4, r3
 8005d80:	18d2      	addlt	r2, r2, r3
 8005d82:	4613      	movlt	r3, r2
 8005d84:	bfb7      	itett	lt
 8005d86:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005d88:	1b1c      	subge	r4, r3, r4
 8005d8a:	4623      	movlt	r3, r4
 8005d8c:	2400      	movlt	r4, #0
 8005d8e:	f1b9 0f00 	cmp.w	r9, #0
 8005d92:	bfb5      	itete	lt
 8005d94:	9a05      	ldrlt	r2, [sp, #20]
 8005d96:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8005d9a:	eba2 0809 	sublt.w	r8, r2, r9
 8005d9e:	464a      	movge	r2, r9
 8005da0:	bfb8      	it	lt
 8005da2:	2200      	movlt	r2, #0
 8005da4:	e73b      	b.n	8005c1e <_dtoa_r+0x666>
 8005da6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8005daa:	9f08      	ldr	r7, [sp, #32]
 8005dac:	461c      	mov	r4, r3
 8005dae:	e743      	b.n	8005c38 <_dtoa_r+0x680>
 8005db0:	461a      	mov	r2, r3
 8005db2:	e76f      	b.n	8005c94 <_dtoa_r+0x6dc>
 8005db4:	9b07      	ldr	r3, [sp, #28]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	dc18      	bgt.n	8005dec <_dtoa_r+0x834>
 8005dba:	9b02      	ldr	r3, [sp, #8]
 8005dbc:	b9b3      	cbnz	r3, 8005dec <_dtoa_r+0x834>
 8005dbe:	9b03      	ldr	r3, [sp, #12]
 8005dc0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005dc4:	b9a2      	cbnz	r2, 8005df0 <_dtoa_r+0x838>
 8005dc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005dca:	0d12      	lsrs	r2, r2, #20
 8005dcc:	0512      	lsls	r2, r2, #20
 8005dce:	b18a      	cbz	r2, 8005df4 <_dtoa_r+0x83c>
 8005dd0:	9b05      	ldr	r3, [sp, #20]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	9305      	str	r3, [sp, #20]
 8005dd6:	9b06      	ldr	r3, [sp, #24]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	9306      	str	r3, [sp, #24]
 8005ddc:	2301      	movs	r3, #1
 8005dde:	930a      	str	r3, [sp, #40]	; 0x28
 8005de0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f47f af6f 	bne.w	8005cc6 <_dtoa_r+0x70e>
 8005de8:	2001      	movs	r0, #1
 8005dea:	e774      	b.n	8005cd6 <_dtoa_r+0x71e>
 8005dec:	2300      	movs	r3, #0
 8005dee:	e7f6      	b.n	8005dde <_dtoa_r+0x826>
 8005df0:	9b02      	ldr	r3, [sp, #8]
 8005df2:	e7f4      	b.n	8005dde <_dtoa_r+0x826>
 8005df4:	920a      	str	r2, [sp, #40]	; 0x28
 8005df6:	e7f3      	b.n	8005de0 <_dtoa_r+0x828>
 8005df8:	d081      	beq.n	8005cfe <_dtoa_r+0x746>
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	301c      	adds	r0, #28
 8005dfe:	e777      	b.n	8005cf0 <_dtoa_r+0x738>
 8005e00:	f1b9 0f00 	cmp.w	r9, #0
 8005e04:	dc37      	bgt.n	8005e76 <_dtoa_r+0x8be>
 8005e06:	9b07      	ldr	r3, [sp, #28]
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	dd34      	ble.n	8005e76 <_dtoa_r+0x8be>
 8005e0c:	46ca      	mov	sl, r9
 8005e0e:	f1ba 0f00 	cmp.w	sl, #0
 8005e12:	d10d      	bne.n	8005e30 <_dtoa_r+0x878>
 8005e14:	4621      	mov	r1, r4
 8005e16:	4653      	mov	r3, sl
 8005e18:	2205      	movs	r2, #5
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	f000 f9ca 	bl	80061b4 <__multadd>
 8005e20:	4601      	mov	r1, r0
 8005e22:	4604      	mov	r4, r0
 8005e24:	4628      	mov	r0, r5
 8005e26:	f000 fbe1 	bl	80065ec <__mcmp>
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	f73f adde 	bgt.w	80059ec <_dtoa_r+0x434>
 8005e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e32:	f8dd 8000 	ldr.w	r8, [sp]
 8005e36:	ea6f 0b03 	mvn.w	fp, r3
 8005e3a:	f04f 0900 	mov.w	r9, #0
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4630      	mov	r0, r6
 8005e42:	f000 f995 	bl	8006170 <_Bfree>
 8005e46:	2f00      	cmp	r7, #0
 8005e48:	f43f aea7 	beq.w	8005b9a <_dtoa_r+0x5e2>
 8005e4c:	f1b9 0f00 	cmp.w	r9, #0
 8005e50:	d005      	beq.n	8005e5e <_dtoa_r+0x8a6>
 8005e52:	45b9      	cmp	r9, r7
 8005e54:	d003      	beq.n	8005e5e <_dtoa_r+0x8a6>
 8005e56:	4649      	mov	r1, r9
 8005e58:	4630      	mov	r0, r6
 8005e5a:	f000 f989 	bl	8006170 <_Bfree>
 8005e5e:	4639      	mov	r1, r7
 8005e60:	4630      	mov	r0, r6
 8005e62:	f000 f985 	bl	8006170 <_Bfree>
 8005e66:	e698      	b.n	8005b9a <_dtoa_r+0x5e2>
 8005e68:	2400      	movs	r4, #0
 8005e6a:	4627      	mov	r7, r4
 8005e6c:	e7e0      	b.n	8005e30 <_dtoa_r+0x878>
 8005e6e:	46bb      	mov	fp, r7
 8005e70:	4604      	mov	r4, r0
 8005e72:	4607      	mov	r7, r0
 8005e74:	e5ba      	b.n	80059ec <_dtoa_r+0x434>
 8005e76:	9b08      	ldr	r3, [sp, #32]
 8005e78:	46ca      	mov	sl, r9
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 8100 	beq.w	8006080 <_dtoa_r+0xac8>
 8005e80:	f1b8 0f00 	cmp.w	r8, #0
 8005e84:	dd05      	ble.n	8005e92 <_dtoa_r+0x8da>
 8005e86:	4639      	mov	r1, r7
 8005e88:	4642      	mov	r2, r8
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	f000 fb42 	bl	8006514 <__lshift>
 8005e90:	4607      	mov	r7, r0
 8005e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d05d      	beq.n	8005f54 <_dtoa_r+0x99c>
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f000 f928 	bl	80060f0 <_Balloc>
 8005ea0:	4680      	mov	r8, r0
 8005ea2:	b928      	cbnz	r0, 8005eb0 <_dtoa_r+0x8f8>
 8005ea4:	4b82      	ldr	r3, [pc, #520]	; (80060b0 <_dtoa_r+0xaf8>)
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005eac:	f7ff bb9a 	b.w	80055e4 <_dtoa_r+0x2c>
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	3202      	adds	r2, #2
 8005eb4:	0092      	lsls	r2, r2, #2
 8005eb6:	f107 010c 	add.w	r1, r7, #12
 8005eba:	300c      	adds	r0, #12
 8005ebc:	f000 f90a 	bl	80060d4 <memcpy>
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	4641      	mov	r1, r8
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	f000 fb25 	bl	8006514 <__lshift>
 8005eca:	9b00      	ldr	r3, [sp, #0]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	9305      	str	r3, [sp, #20]
 8005ed0:	9b00      	ldr	r3, [sp, #0]
 8005ed2:	4453      	add	r3, sl
 8005ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ed6:	9b02      	ldr	r3, [sp, #8]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	46b9      	mov	r9, r7
 8005ede:	9308      	str	r3, [sp, #32]
 8005ee0:	4607      	mov	r7, r0
 8005ee2:	9b05      	ldr	r3, [sp, #20]
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	4628      	mov	r0, r5
 8005eea:	9302      	str	r3, [sp, #8]
 8005eec:	f7ff fad6 	bl	800549c <quorem>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	3330      	adds	r3, #48	; 0x30
 8005ef4:	9006      	str	r0, [sp, #24]
 8005ef6:	4649      	mov	r1, r9
 8005ef8:	4628      	mov	r0, r5
 8005efa:	930a      	str	r3, [sp, #40]	; 0x28
 8005efc:	f000 fb76 	bl	80065ec <__mcmp>
 8005f00:	463a      	mov	r2, r7
 8005f02:	4682      	mov	sl, r0
 8005f04:	4621      	mov	r1, r4
 8005f06:	4630      	mov	r0, r6
 8005f08:	f000 fb8c 	bl	8006624 <__mdiff>
 8005f0c:	68c2      	ldr	r2, [r0, #12]
 8005f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f10:	4680      	mov	r8, r0
 8005f12:	bb0a      	cbnz	r2, 8005f58 <_dtoa_r+0x9a0>
 8005f14:	4601      	mov	r1, r0
 8005f16:	4628      	mov	r0, r5
 8005f18:	f000 fb68 	bl	80065ec <__mcmp>
 8005f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f1e:	4602      	mov	r2, r0
 8005f20:	4641      	mov	r1, r8
 8005f22:	4630      	mov	r0, r6
 8005f24:	920e      	str	r2, [sp, #56]	; 0x38
 8005f26:	930a      	str	r3, [sp, #40]	; 0x28
 8005f28:	f000 f922 	bl	8006170 <_Bfree>
 8005f2c:	9b07      	ldr	r3, [sp, #28]
 8005f2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f30:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8005f34:	ea43 0102 	orr.w	r1, r3, r2
 8005f38:	9b08      	ldr	r3, [sp, #32]
 8005f3a:	430b      	orrs	r3, r1
 8005f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f3e:	d10d      	bne.n	8005f5c <_dtoa_r+0x9a4>
 8005f40:	2b39      	cmp	r3, #57	; 0x39
 8005f42:	d029      	beq.n	8005f98 <_dtoa_r+0x9e0>
 8005f44:	f1ba 0f00 	cmp.w	sl, #0
 8005f48:	dd01      	ble.n	8005f4e <_dtoa_r+0x996>
 8005f4a:	9b06      	ldr	r3, [sp, #24]
 8005f4c:	3331      	adds	r3, #49	; 0x31
 8005f4e:	9a02      	ldr	r2, [sp, #8]
 8005f50:	7013      	strb	r3, [r2, #0]
 8005f52:	e774      	b.n	8005e3e <_dtoa_r+0x886>
 8005f54:	4638      	mov	r0, r7
 8005f56:	e7b8      	b.n	8005eca <_dtoa_r+0x912>
 8005f58:	2201      	movs	r2, #1
 8005f5a:	e7e1      	b.n	8005f20 <_dtoa_r+0x968>
 8005f5c:	f1ba 0f00 	cmp.w	sl, #0
 8005f60:	db06      	blt.n	8005f70 <_dtoa_r+0x9b8>
 8005f62:	9907      	ldr	r1, [sp, #28]
 8005f64:	ea41 0a0a 	orr.w	sl, r1, sl
 8005f68:	9908      	ldr	r1, [sp, #32]
 8005f6a:	ea5a 0101 	orrs.w	r1, sl, r1
 8005f6e:	d120      	bne.n	8005fb2 <_dtoa_r+0x9fa>
 8005f70:	2a00      	cmp	r2, #0
 8005f72:	ddec      	ble.n	8005f4e <_dtoa_r+0x996>
 8005f74:	4629      	mov	r1, r5
 8005f76:	2201      	movs	r2, #1
 8005f78:	4630      	mov	r0, r6
 8005f7a:	9305      	str	r3, [sp, #20]
 8005f7c:	f000 faca 	bl	8006514 <__lshift>
 8005f80:	4621      	mov	r1, r4
 8005f82:	4605      	mov	r5, r0
 8005f84:	f000 fb32 	bl	80065ec <__mcmp>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	9b05      	ldr	r3, [sp, #20]
 8005f8c:	dc02      	bgt.n	8005f94 <_dtoa_r+0x9dc>
 8005f8e:	d1de      	bne.n	8005f4e <_dtoa_r+0x996>
 8005f90:	07da      	lsls	r2, r3, #31
 8005f92:	d5dc      	bpl.n	8005f4e <_dtoa_r+0x996>
 8005f94:	2b39      	cmp	r3, #57	; 0x39
 8005f96:	d1d8      	bne.n	8005f4a <_dtoa_r+0x992>
 8005f98:	9a02      	ldr	r2, [sp, #8]
 8005f9a:	2339      	movs	r3, #57	; 0x39
 8005f9c:	7013      	strb	r3, [r2, #0]
 8005f9e:	4643      	mov	r3, r8
 8005fa0:	4698      	mov	r8, r3
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8005fa8:	2a39      	cmp	r2, #57	; 0x39
 8005faa:	d051      	beq.n	8006050 <_dtoa_r+0xa98>
 8005fac:	3201      	adds	r2, #1
 8005fae:	701a      	strb	r2, [r3, #0]
 8005fb0:	e745      	b.n	8005e3e <_dtoa_r+0x886>
 8005fb2:	2a00      	cmp	r2, #0
 8005fb4:	dd03      	ble.n	8005fbe <_dtoa_r+0xa06>
 8005fb6:	2b39      	cmp	r3, #57	; 0x39
 8005fb8:	d0ee      	beq.n	8005f98 <_dtoa_r+0x9e0>
 8005fba:	3301      	adds	r3, #1
 8005fbc:	e7c7      	b.n	8005f4e <_dtoa_r+0x996>
 8005fbe:	9a05      	ldr	r2, [sp, #20]
 8005fc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fc2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005fc6:	428a      	cmp	r2, r1
 8005fc8:	d02b      	beq.n	8006022 <_dtoa_r+0xa6a>
 8005fca:	4629      	mov	r1, r5
 8005fcc:	2300      	movs	r3, #0
 8005fce:	220a      	movs	r2, #10
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f000 f8ef 	bl	80061b4 <__multadd>
 8005fd6:	45b9      	cmp	r9, r7
 8005fd8:	4605      	mov	r5, r0
 8005fda:	f04f 0300 	mov.w	r3, #0
 8005fde:	f04f 020a 	mov.w	r2, #10
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	d107      	bne.n	8005ff8 <_dtoa_r+0xa40>
 8005fe8:	f000 f8e4 	bl	80061b4 <__multadd>
 8005fec:	4681      	mov	r9, r0
 8005fee:	4607      	mov	r7, r0
 8005ff0:	9b05      	ldr	r3, [sp, #20]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	9305      	str	r3, [sp, #20]
 8005ff6:	e774      	b.n	8005ee2 <_dtoa_r+0x92a>
 8005ff8:	f000 f8dc 	bl	80061b4 <__multadd>
 8005ffc:	4639      	mov	r1, r7
 8005ffe:	4681      	mov	r9, r0
 8006000:	2300      	movs	r3, #0
 8006002:	220a      	movs	r2, #10
 8006004:	4630      	mov	r0, r6
 8006006:	f000 f8d5 	bl	80061b4 <__multadd>
 800600a:	4607      	mov	r7, r0
 800600c:	e7f0      	b.n	8005ff0 <_dtoa_r+0xa38>
 800600e:	f1ba 0f00 	cmp.w	sl, #0
 8006012:	9a00      	ldr	r2, [sp, #0]
 8006014:	bfcc      	ite	gt
 8006016:	46d0      	movgt	r8, sl
 8006018:	f04f 0801 	movle.w	r8, #1
 800601c:	4490      	add	r8, r2
 800601e:	f04f 0900 	mov.w	r9, #0
 8006022:	4629      	mov	r1, r5
 8006024:	2201      	movs	r2, #1
 8006026:	4630      	mov	r0, r6
 8006028:	9302      	str	r3, [sp, #8]
 800602a:	f000 fa73 	bl	8006514 <__lshift>
 800602e:	4621      	mov	r1, r4
 8006030:	4605      	mov	r5, r0
 8006032:	f000 fadb 	bl	80065ec <__mcmp>
 8006036:	2800      	cmp	r0, #0
 8006038:	dcb1      	bgt.n	8005f9e <_dtoa_r+0x9e6>
 800603a:	d102      	bne.n	8006042 <_dtoa_r+0xa8a>
 800603c:	9b02      	ldr	r3, [sp, #8]
 800603e:	07db      	lsls	r3, r3, #31
 8006040:	d4ad      	bmi.n	8005f9e <_dtoa_r+0x9e6>
 8006042:	4643      	mov	r3, r8
 8006044:	4698      	mov	r8, r3
 8006046:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800604a:	2a30      	cmp	r2, #48	; 0x30
 800604c:	d0fa      	beq.n	8006044 <_dtoa_r+0xa8c>
 800604e:	e6f6      	b.n	8005e3e <_dtoa_r+0x886>
 8006050:	9a00      	ldr	r2, [sp, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	d1a4      	bne.n	8005fa0 <_dtoa_r+0x9e8>
 8006056:	f10b 0b01 	add.w	fp, fp, #1
 800605a:	2331      	movs	r3, #49	; 0x31
 800605c:	e778      	b.n	8005f50 <_dtoa_r+0x998>
 800605e:	4b15      	ldr	r3, [pc, #84]	; (80060b4 <_dtoa_r+0xafc>)
 8006060:	f7ff bb12 	b.w	8005688 <_dtoa_r+0xd0>
 8006064:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006066:	2b00      	cmp	r3, #0
 8006068:	f47f aaee 	bne.w	8005648 <_dtoa_r+0x90>
 800606c:	4b12      	ldr	r3, [pc, #72]	; (80060b8 <_dtoa_r+0xb00>)
 800606e:	f7ff bb0b 	b.w	8005688 <_dtoa_r+0xd0>
 8006072:	f1ba 0f00 	cmp.w	sl, #0
 8006076:	dc03      	bgt.n	8006080 <_dtoa_r+0xac8>
 8006078:	9b07      	ldr	r3, [sp, #28]
 800607a:	2b02      	cmp	r3, #2
 800607c:	f73f aec7 	bgt.w	8005e0e <_dtoa_r+0x856>
 8006080:	f8dd 8000 	ldr.w	r8, [sp]
 8006084:	4621      	mov	r1, r4
 8006086:	4628      	mov	r0, r5
 8006088:	f7ff fa08 	bl	800549c <quorem>
 800608c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006090:	f808 3b01 	strb.w	r3, [r8], #1
 8006094:	9a00      	ldr	r2, [sp, #0]
 8006096:	eba8 0202 	sub.w	r2, r8, r2
 800609a:	4592      	cmp	sl, r2
 800609c:	ddb7      	ble.n	800600e <_dtoa_r+0xa56>
 800609e:	4629      	mov	r1, r5
 80060a0:	2300      	movs	r3, #0
 80060a2:	220a      	movs	r2, #10
 80060a4:	4630      	mov	r0, r6
 80060a6:	f000 f885 	bl	80061b4 <__multadd>
 80060aa:	4605      	mov	r5, r0
 80060ac:	e7ea      	b.n	8006084 <_dtoa_r+0xacc>
 80060ae:	bf00      	nop
 80060b0:	08007937 	.word	0x08007937
 80060b4:	08007890 	.word	0x08007890
 80060b8:	080078b4 	.word	0x080078b4

080060bc <_localeconv_r>:
 80060bc:	4800      	ldr	r0, [pc, #0]	; (80060c0 <_localeconv_r+0x4>)
 80060be:	4770      	bx	lr
 80060c0:	20000160 	.word	0x20000160

080060c4 <malloc>:
 80060c4:	4b02      	ldr	r3, [pc, #8]	; (80060d0 <malloc+0xc>)
 80060c6:	4601      	mov	r1, r0
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	f000 bbef 	b.w	80068ac <_malloc_r>
 80060ce:	bf00      	nop
 80060d0:	2000000c 	.word	0x2000000c

080060d4 <memcpy>:
 80060d4:	440a      	add	r2, r1
 80060d6:	4291      	cmp	r1, r2
 80060d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80060dc:	d100      	bne.n	80060e0 <memcpy+0xc>
 80060de:	4770      	bx	lr
 80060e0:	b510      	push	{r4, lr}
 80060e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060ea:	4291      	cmp	r1, r2
 80060ec:	d1f9      	bne.n	80060e2 <memcpy+0xe>
 80060ee:	bd10      	pop	{r4, pc}

080060f0 <_Balloc>:
 80060f0:	b570      	push	{r4, r5, r6, lr}
 80060f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060f4:	4604      	mov	r4, r0
 80060f6:	460d      	mov	r5, r1
 80060f8:	b976      	cbnz	r6, 8006118 <_Balloc+0x28>
 80060fa:	2010      	movs	r0, #16
 80060fc:	f7ff ffe2 	bl	80060c4 <malloc>
 8006100:	4602      	mov	r2, r0
 8006102:	6260      	str	r0, [r4, #36]	; 0x24
 8006104:	b920      	cbnz	r0, 8006110 <_Balloc+0x20>
 8006106:	4b18      	ldr	r3, [pc, #96]	; (8006168 <_Balloc+0x78>)
 8006108:	4818      	ldr	r0, [pc, #96]	; (800616c <_Balloc+0x7c>)
 800610a:	2166      	movs	r1, #102	; 0x66
 800610c:	f000 fd94 	bl	8006c38 <__assert_func>
 8006110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006114:	6006      	str	r6, [r0, #0]
 8006116:	60c6      	str	r6, [r0, #12]
 8006118:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800611a:	68f3      	ldr	r3, [r6, #12]
 800611c:	b183      	cbz	r3, 8006140 <_Balloc+0x50>
 800611e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006126:	b9b8      	cbnz	r0, 8006158 <_Balloc+0x68>
 8006128:	2101      	movs	r1, #1
 800612a:	fa01 f605 	lsl.w	r6, r1, r5
 800612e:	1d72      	adds	r2, r6, #5
 8006130:	0092      	lsls	r2, r2, #2
 8006132:	4620      	mov	r0, r4
 8006134:	f000 fb5a 	bl	80067ec <_calloc_r>
 8006138:	b160      	cbz	r0, 8006154 <_Balloc+0x64>
 800613a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800613e:	e00e      	b.n	800615e <_Balloc+0x6e>
 8006140:	2221      	movs	r2, #33	; 0x21
 8006142:	2104      	movs	r1, #4
 8006144:	4620      	mov	r0, r4
 8006146:	f000 fb51 	bl	80067ec <_calloc_r>
 800614a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800614c:	60f0      	str	r0, [r6, #12]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e4      	bne.n	800611e <_Balloc+0x2e>
 8006154:	2000      	movs	r0, #0
 8006156:	bd70      	pop	{r4, r5, r6, pc}
 8006158:	6802      	ldr	r2, [r0, #0]
 800615a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800615e:	2300      	movs	r3, #0
 8006160:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006164:	e7f7      	b.n	8006156 <_Balloc+0x66>
 8006166:	bf00      	nop
 8006168:	080078c1 	.word	0x080078c1
 800616c:	08007948 	.word	0x08007948

08006170 <_Bfree>:
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006174:	4605      	mov	r5, r0
 8006176:	460c      	mov	r4, r1
 8006178:	b976      	cbnz	r6, 8006198 <_Bfree+0x28>
 800617a:	2010      	movs	r0, #16
 800617c:	f7ff ffa2 	bl	80060c4 <malloc>
 8006180:	4602      	mov	r2, r0
 8006182:	6268      	str	r0, [r5, #36]	; 0x24
 8006184:	b920      	cbnz	r0, 8006190 <_Bfree+0x20>
 8006186:	4b09      	ldr	r3, [pc, #36]	; (80061ac <_Bfree+0x3c>)
 8006188:	4809      	ldr	r0, [pc, #36]	; (80061b0 <_Bfree+0x40>)
 800618a:	218a      	movs	r1, #138	; 0x8a
 800618c:	f000 fd54 	bl	8006c38 <__assert_func>
 8006190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006194:	6006      	str	r6, [r0, #0]
 8006196:	60c6      	str	r6, [r0, #12]
 8006198:	b13c      	cbz	r4, 80061aa <_Bfree+0x3a>
 800619a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800619c:	6862      	ldr	r2, [r4, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061a4:	6021      	str	r1, [r4, #0]
 80061a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80061aa:	bd70      	pop	{r4, r5, r6, pc}
 80061ac:	080078c1 	.word	0x080078c1
 80061b0:	08007948 	.word	0x08007948

080061b4 <__multadd>:
 80061b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b8:	690e      	ldr	r6, [r1, #16]
 80061ba:	4607      	mov	r7, r0
 80061bc:	4698      	mov	r8, r3
 80061be:	460c      	mov	r4, r1
 80061c0:	f101 0014 	add.w	r0, r1, #20
 80061c4:	2300      	movs	r3, #0
 80061c6:	6805      	ldr	r5, [r0, #0]
 80061c8:	b2a9      	uxth	r1, r5
 80061ca:	fb02 8101 	mla	r1, r2, r1, r8
 80061ce:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80061d2:	0c2d      	lsrs	r5, r5, #16
 80061d4:	fb02 c505 	mla	r5, r2, r5, ip
 80061d8:	b289      	uxth	r1, r1
 80061da:	3301      	adds	r3, #1
 80061dc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80061e0:	429e      	cmp	r6, r3
 80061e2:	f840 1b04 	str.w	r1, [r0], #4
 80061e6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80061ea:	dcec      	bgt.n	80061c6 <__multadd+0x12>
 80061ec:	f1b8 0f00 	cmp.w	r8, #0
 80061f0:	d022      	beq.n	8006238 <__multadd+0x84>
 80061f2:	68a3      	ldr	r3, [r4, #8]
 80061f4:	42b3      	cmp	r3, r6
 80061f6:	dc19      	bgt.n	800622c <__multadd+0x78>
 80061f8:	6861      	ldr	r1, [r4, #4]
 80061fa:	4638      	mov	r0, r7
 80061fc:	3101      	adds	r1, #1
 80061fe:	f7ff ff77 	bl	80060f0 <_Balloc>
 8006202:	4605      	mov	r5, r0
 8006204:	b928      	cbnz	r0, 8006212 <__multadd+0x5e>
 8006206:	4602      	mov	r2, r0
 8006208:	4b0d      	ldr	r3, [pc, #52]	; (8006240 <__multadd+0x8c>)
 800620a:	480e      	ldr	r0, [pc, #56]	; (8006244 <__multadd+0x90>)
 800620c:	21b5      	movs	r1, #181	; 0xb5
 800620e:	f000 fd13 	bl	8006c38 <__assert_func>
 8006212:	6922      	ldr	r2, [r4, #16]
 8006214:	3202      	adds	r2, #2
 8006216:	f104 010c 	add.w	r1, r4, #12
 800621a:	0092      	lsls	r2, r2, #2
 800621c:	300c      	adds	r0, #12
 800621e:	f7ff ff59 	bl	80060d4 <memcpy>
 8006222:	4621      	mov	r1, r4
 8006224:	4638      	mov	r0, r7
 8006226:	f7ff ffa3 	bl	8006170 <_Bfree>
 800622a:	462c      	mov	r4, r5
 800622c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006230:	3601      	adds	r6, #1
 8006232:	f8c3 8014 	str.w	r8, [r3, #20]
 8006236:	6126      	str	r6, [r4, #16]
 8006238:	4620      	mov	r0, r4
 800623a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800623e:	bf00      	nop
 8006240:	08007937 	.word	0x08007937
 8006244:	08007948 	.word	0x08007948

08006248 <__hi0bits>:
 8006248:	0c03      	lsrs	r3, r0, #16
 800624a:	041b      	lsls	r3, r3, #16
 800624c:	b9d3      	cbnz	r3, 8006284 <__hi0bits+0x3c>
 800624e:	0400      	lsls	r0, r0, #16
 8006250:	2310      	movs	r3, #16
 8006252:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006256:	bf04      	itt	eq
 8006258:	0200      	lsleq	r0, r0, #8
 800625a:	3308      	addeq	r3, #8
 800625c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006260:	bf04      	itt	eq
 8006262:	0100      	lsleq	r0, r0, #4
 8006264:	3304      	addeq	r3, #4
 8006266:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800626a:	bf04      	itt	eq
 800626c:	0080      	lsleq	r0, r0, #2
 800626e:	3302      	addeq	r3, #2
 8006270:	2800      	cmp	r0, #0
 8006272:	db05      	blt.n	8006280 <__hi0bits+0x38>
 8006274:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006278:	f103 0301 	add.w	r3, r3, #1
 800627c:	bf08      	it	eq
 800627e:	2320      	moveq	r3, #32
 8006280:	4618      	mov	r0, r3
 8006282:	4770      	bx	lr
 8006284:	2300      	movs	r3, #0
 8006286:	e7e4      	b.n	8006252 <__hi0bits+0xa>

08006288 <__lo0bits>:
 8006288:	6803      	ldr	r3, [r0, #0]
 800628a:	f013 0207 	ands.w	r2, r3, #7
 800628e:	4601      	mov	r1, r0
 8006290:	d00b      	beq.n	80062aa <__lo0bits+0x22>
 8006292:	07da      	lsls	r2, r3, #31
 8006294:	d424      	bmi.n	80062e0 <__lo0bits+0x58>
 8006296:	0798      	lsls	r0, r3, #30
 8006298:	bf49      	itett	mi
 800629a:	085b      	lsrmi	r3, r3, #1
 800629c:	089b      	lsrpl	r3, r3, #2
 800629e:	2001      	movmi	r0, #1
 80062a0:	600b      	strmi	r3, [r1, #0]
 80062a2:	bf5c      	itt	pl
 80062a4:	600b      	strpl	r3, [r1, #0]
 80062a6:	2002      	movpl	r0, #2
 80062a8:	4770      	bx	lr
 80062aa:	b298      	uxth	r0, r3
 80062ac:	b9b0      	cbnz	r0, 80062dc <__lo0bits+0x54>
 80062ae:	0c1b      	lsrs	r3, r3, #16
 80062b0:	2010      	movs	r0, #16
 80062b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80062b6:	bf04      	itt	eq
 80062b8:	0a1b      	lsreq	r3, r3, #8
 80062ba:	3008      	addeq	r0, #8
 80062bc:	071a      	lsls	r2, r3, #28
 80062be:	bf04      	itt	eq
 80062c0:	091b      	lsreq	r3, r3, #4
 80062c2:	3004      	addeq	r0, #4
 80062c4:	079a      	lsls	r2, r3, #30
 80062c6:	bf04      	itt	eq
 80062c8:	089b      	lsreq	r3, r3, #2
 80062ca:	3002      	addeq	r0, #2
 80062cc:	07da      	lsls	r2, r3, #31
 80062ce:	d403      	bmi.n	80062d8 <__lo0bits+0x50>
 80062d0:	085b      	lsrs	r3, r3, #1
 80062d2:	f100 0001 	add.w	r0, r0, #1
 80062d6:	d005      	beq.n	80062e4 <__lo0bits+0x5c>
 80062d8:	600b      	str	r3, [r1, #0]
 80062da:	4770      	bx	lr
 80062dc:	4610      	mov	r0, r2
 80062de:	e7e8      	b.n	80062b2 <__lo0bits+0x2a>
 80062e0:	2000      	movs	r0, #0
 80062e2:	4770      	bx	lr
 80062e4:	2020      	movs	r0, #32
 80062e6:	4770      	bx	lr

080062e8 <__i2b>:
 80062e8:	b510      	push	{r4, lr}
 80062ea:	460c      	mov	r4, r1
 80062ec:	2101      	movs	r1, #1
 80062ee:	f7ff feff 	bl	80060f0 <_Balloc>
 80062f2:	4602      	mov	r2, r0
 80062f4:	b928      	cbnz	r0, 8006302 <__i2b+0x1a>
 80062f6:	4b05      	ldr	r3, [pc, #20]	; (800630c <__i2b+0x24>)
 80062f8:	4805      	ldr	r0, [pc, #20]	; (8006310 <__i2b+0x28>)
 80062fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80062fe:	f000 fc9b 	bl	8006c38 <__assert_func>
 8006302:	2301      	movs	r3, #1
 8006304:	6144      	str	r4, [r0, #20]
 8006306:	6103      	str	r3, [r0, #16]
 8006308:	bd10      	pop	{r4, pc}
 800630a:	bf00      	nop
 800630c:	08007937 	.word	0x08007937
 8006310:	08007948 	.word	0x08007948

08006314 <__multiply>:
 8006314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006318:	4614      	mov	r4, r2
 800631a:	690a      	ldr	r2, [r1, #16]
 800631c:	6923      	ldr	r3, [r4, #16]
 800631e:	429a      	cmp	r2, r3
 8006320:	bfb8      	it	lt
 8006322:	460b      	movlt	r3, r1
 8006324:	460d      	mov	r5, r1
 8006326:	bfbc      	itt	lt
 8006328:	4625      	movlt	r5, r4
 800632a:	461c      	movlt	r4, r3
 800632c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006330:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006334:	68ab      	ldr	r3, [r5, #8]
 8006336:	6869      	ldr	r1, [r5, #4]
 8006338:	eb0a 0709 	add.w	r7, sl, r9
 800633c:	42bb      	cmp	r3, r7
 800633e:	b085      	sub	sp, #20
 8006340:	bfb8      	it	lt
 8006342:	3101      	addlt	r1, #1
 8006344:	f7ff fed4 	bl	80060f0 <_Balloc>
 8006348:	b930      	cbnz	r0, 8006358 <__multiply+0x44>
 800634a:	4602      	mov	r2, r0
 800634c:	4b42      	ldr	r3, [pc, #264]	; (8006458 <__multiply+0x144>)
 800634e:	4843      	ldr	r0, [pc, #268]	; (800645c <__multiply+0x148>)
 8006350:	f240 115d 	movw	r1, #349	; 0x15d
 8006354:	f000 fc70 	bl	8006c38 <__assert_func>
 8006358:	f100 0614 	add.w	r6, r0, #20
 800635c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006360:	4633      	mov	r3, r6
 8006362:	2200      	movs	r2, #0
 8006364:	4543      	cmp	r3, r8
 8006366:	d31e      	bcc.n	80063a6 <__multiply+0x92>
 8006368:	f105 0c14 	add.w	ip, r5, #20
 800636c:	f104 0314 	add.w	r3, r4, #20
 8006370:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006374:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006378:	9202      	str	r2, [sp, #8]
 800637a:	ebac 0205 	sub.w	r2, ip, r5
 800637e:	3a15      	subs	r2, #21
 8006380:	f022 0203 	bic.w	r2, r2, #3
 8006384:	3204      	adds	r2, #4
 8006386:	f105 0115 	add.w	r1, r5, #21
 800638a:	458c      	cmp	ip, r1
 800638c:	bf38      	it	cc
 800638e:	2204      	movcc	r2, #4
 8006390:	9201      	str	r2, [sp, #4]
 8006392:	9a02      	ldr	r2, [sp, #8]
 8006394:	9303      	str	r3, [sp, #12]
 8006396:	429a      	cmp	r2, r3
 8006398:	d808      	bhi.n	80063ac <__multiply+0x98>
 800639a:	2f00      	cmp	r7, #0
 800639c:	dc55      	bgt.n	800644a <__multiply+0x136>
 800639e:	6107      	str	r7, [r0, #16]
 80063a0:	b005      	add	sp, #20
 80063a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a6:	f843 2b04 	str.w	r2, [r3], #4
 80063aa:	e7db      	b.n	8006364 <__multiply+0x50>
 80063ac:	f8b3 a000 	ldrh.w	sl, [r3]
 80063b0:	f1ba 0f00 	cmp.w	sl, #0
 80063b4:	d020      	beq.n	80063f8 <__multiply+0xe4>
 80063b6:	f105 0e14 	add.w	lr, r5, #20
 80063ba:	46b1      	mov	r9, r6
 80063bc:	2200      	movs	r2, #0
 80063be:	f85e 4b04 	ldr.w	r4, [lr], #4
 80063c2:	f8d9 b000 	ldr.w	fp, [r9]
 80063c6:	b2a1      	uxth	r1, r4
 80063c8:	fa1f fb8b 	uxth.w	fp, fp
 80063cc:	fb0a b101 	mla	r1, sl, r1, fp
 80063d0:	4411      	add	r1, r2
 80063d2:	f8d9 2000 	ldr.w	r2, [r9]
 80063d6:	0c24      	lsrs	r4, r4, #16
 80063d8:	0c12      	lsrs	r2, r2, #16
 80063da:	fb0a 2404 	mla	r4, sl, r4, r2
 80063de:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80063e2:	b289      	uxth	r1, r1
 80063e4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80063e8:	45f4      	cmp	ip, lr
 80063ea:	f849 1b04 	str.w	r1, [r9], #4
 80063ee:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80063f2:	d8e4      	bhi.n	80063be <__multiply+0xaa>
 80063f4:	9901      	ldr	r1, [sp, #4]
 80063f6:	5072      	str	r2, [r6, r1]
 80063f8:	9a03      	ldr	r2, [sp, #12]
 80063fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80063fe:	3304      	adds	r3, #4
 8006400:	f1b9 0f00 	cmp.w	r9, #0
 8006404:	d01f      	beq.n	8006446 <__multiply+0x132>
 8006406:	6834      	ldr	r4, [r6, #0]
 8006408:	f105 0114 	add.w	r1, r5, #20
 800640c:	46b6      	mov	lr, r6
 800640e:	f04f 0a00 	mov.w	sl, #0
 8006412:	880a      	ldrh	r2, [r1, #0]
 8006414:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006418:	fb09 b202 	mla	r2, r9, r2, fp
 800641c:	4492      	add	sl, r2
 800641e:	b2a4      	uxth	r4, r4
 8006420:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006424:	f84e 4b04 	str.w	r4, [lr], #4
 8006428:	f851 4b04 	ldr.w	r4, [r1], #4
 800642c:	f8be 2000 	ldrh.w	r2, [lr]
 8006430:	0c24      	lsrs	r4, r4, #16
 8006432:	fb09 2404 	mla	r4, r9, r4, r2
 8006436:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800643a:	458c      	cmp	ip, r1
 800643c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006440:	d8e7      	bhi.n	8006412 <__multiply+0xfe>
 8006442:	9a01      	ldr	r2, [sp, #4]
 8006444:	50b4      	str	r4, [r6, r2]
 8006446:	3604      	adds	r6, #4
 8006448:	e7a3      	b.n	8006392 <__multiply+0x7e>
 800644a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1a5      	bne.n	800639e <__multiply+0x8a>
 8006452:	3f01      	subs	r7, #1
 8006454:	e7a1      	b.n	800639a <__multiply+0x86>
 8006456:	bf00      	nop
 8006458:	08007937 	.word	0x08007937
 800645c:	08007948 	.word	0x08007948

08006460 <__pow5mult>:
 8006460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006464:	4615      	mov	r5, r2
 8006466:	f012 0203 	ands.w	r2, r2, #3
 800646a:	4606      	mov	r6, r0
 800646c:	460f      	mov	r7, r1
 800646e:	d007      	beq.n	8006480 <__pow5mult+0x20>
 8006470:	4c25      	ldr	r4, [pc, #148]	; (8006508 <__pow5mult+0xa8>)
 8006472:	3a01      	subs	r2, #1
 8006474:	2300      	movs	r3, #0
 8006476:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800647a:	f7ff fe9b 	bl	80061b4 <__multadd>
 800647e:	4607      	mov	r7, r0
 8006480:	10ad      	asrs	r5, r5, #2
 8006482:	d03d      	beq.n	8006500 <__pow5mult+0xa0>
 8006484:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006486:	b97c      	cbnz	r4, 80064a8 <__pow5mult+0x48>
 8006488:	2010      	movs	r0, #16
 800648a:	f7ff fe1b 	bl	80060c4 <malloc>
 800648e:	4602      	mov	r2, r0
 8006490:	6270      	str	r0, [r6, #36]	; 0x24
 8006492:	b928      	cbnz	r0, 80064a0 <__pow5mult+0x40>
 8006494:	4b1d      	ldr	r3, [pc, #116]	; (800650c <__pow5mult+0xac>)
 8006496:	481e      	ldr	r0, [pc, #120]	; (8006510 <__pow5mult+0xb0>)
 8006498:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800649c:	f000 fbcc 	bl	8006c38 <__assert_func>
 80064a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064a4:	6004      	str	r4, [r0, #0]
 80064a6:	60c4      	str	r4, [r0, #12]
 80064a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80064ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064b0:	b94c      	cbnz	r4, 80064c6 <__pow5mult+0x66>
 80064b2:	f240 2171 	movw	r1, #625	; 0x271
 80064b6:	4630      	mov	r0, r6
 80064b8:	f7ff ff16 	bl	80062e8 <__i2b>
 80064bc:	2300      	movs	r3, #0
 80064be:	f8c8 0008 	str.w	r0, [r8, #8]
 80064c2:	4604      	mov	r4, r0
 80064c4:	6003      	str	r3, [r0, #0]
 80064c6:	f04f 0900 	mov.w	r9, #0
 80064ca:	07eb      	lsls	r3, r5, #31
 80064cc:	d50a      	bpl.n	80064e4 <__pow5mult+0x84>
 80064ce:	4639      	mov	r1, r7
 80064d0:	4622      	mov	r2, r4
 80064d2:	4630      	mov	r0, r6
 80064d4:	f7ff ff1e 	bl	8006314 <__multiply>
 80064d8:	4639      	mov	r1, r7
 80064da:	4680      	mov	r8, r0
 80064dc:	4630      	mov	r0, r6
 80064de:	f7ff fe47 	bl	8006170 <_Bfree>
 80064e2:	4647      	mov	r7, r8
 80064e4:	106d      	asrs	r5, r5, #1
 80064e6:	d00b      	beq.n	8006500 <__pow5mult+0xa0>
 80064e8:	6820      	ldr	r0, [r4, #0]
 80064ea:	b938      	cbnz	r0, 80064fc <__pow5mult+0x9c>
 80064ec:	4622      	mov	r2, r4
 80064ee:	4621      	mov	r1, r4
 80064f0:	4630      	mov	r0, r6
 80064f2:	f7ff ff0f 	bl	8006314 <__multiply>
 80064f6:	6020      	str	r0, [r4, #0]
 80064f8:	f8c0 9000 	str.w	r9, [r0]
 80064fc:	4604      	mov	r4, r0
 80064fe:	e7e4      	b.n	80064ca <__pow5mult+0x6a>
 8006500:	4638      	mov	r0, r7
 8006502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006506:	bf00      	nop
 8006508:	08007a98 	.word	0x08007a98
 800650c:	080078c1 	.word	0x080078c1
 8006510:	08007948 	.word	0x08007948

08006514 <__lshift>:
 8006514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006518:	460c      	mov	r4, r1
 800651a:	6849      	ldr	r1, [r1, #4]
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006522:	68a3      	ldr	r3, [r4, #8]
 8006524:	4607      	mov	r7, r0
 8006526:	4691      	mov	r9, r2
 8006528:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800652c:	f108 0601 	add.w	r6, r8, #1
 8006530:	42b3      	cmp	r3, r6
 8006532:	db0b      	blt.n	800654c <__lshift+0x38>
 8006534:	4638      	mov	r0, r7
 8006536:	f7ff fddb 	bl	80060f0 <_Balloc>
 800653a:	4605      	mov	r5, r0
 800653c:	b948      	cbnz	r0, 8006552 <__lshift+0x3e>
 800653e:	4602      	mov	r2, r0
 8006540:	4b28      	ldr	r3, [pc, #160]	; (80065e4 <__lshift+0xd0>)
 8006542:	4829      	ldr	r0, [pc, #164]	; (80065e8 <__lshift+0xd4>)
 8006544:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006548:	f000 fb76 	bl	8006c38 <__assert_func>
 800654c:	3101      	adds	r1, #1
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	e7ee      	b.n	8006530 <__lshift+0x1c>
 8006552:	2300      	movs	r3, #0
 8006554:	f100 0114 	add.w	r1, r0, #20
 8006558:	f100 0210 	add.w	r2, r0, #16
 800655c:	4618      	mov	r0, r3
 800655e:	4553      	cmp	r3, sl
 8006560:	db33      	blt.n	80065ca <__lshift+0xb6>
 8006562:	6920      	ldr	r0, [r4, #16]
 8006564:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006568:	f104 0314 	add.w	r3, r4, #20
 800656c:	f019 091f 	ands.w	r9, r9, #31
 8006570:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006574:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006578:	d02b      	beq.n	80065d2 <__lshift+0xbe>
 800657a:	f1c9 0e20 	rsb	lr, r9, #32
 800657e:	468a      	mov	sl, r1
 8006580:	2200      	movs	r2, #0
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	fa00 f009 	lsl.w	r0, r0, r9
 8006588:	4302      	orrs	r2, r0
 800658a:	f84a 2b04 	str.w	r2, [sl], #4
 800658e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006592:	459c      	cmp	ip, r3
 8006594:	fa22 f20e 	lsr.w	r2, r2, lr
 8006598:	d8f3      	bhi.n	8006582 <__lshift+0x6e>
 800659a:	ebac 0304 	sub.w	r3, ip, r4
 800659e:	3b15      	subs	r3, #21
 80065a0:	f023 0303 	bic.w	r3, r3, #3
 80065a4:	3304      	adds	r3, #4
 80065a6:	f104 0015 	add.w	r0, r4, #21
 80065aa:	4584      	cmp	ip, r0
 80065ac:	bf38      	it	cc
 80065ae:	2304      	movcc	r3, #4
 80065b0:	50ca      	str	r2, [r1, r3]
 80065b2:	b10a      	cbz	r2, 80065b8 <__lshift+0xa4>
 80065b4:	f108 0602 	add.w	r6, r8, #2
 80065b8:	3e01      	subs	r6, #1
 80065ba:	4638      	mov	r0, r7
 80065bc:	612e      	str	r6, [r5, #16]
 80065be:	4621      	mov	r1, r4
 80065c0:	f7ff fdd6 	bl	8006170 <_Bfree>
 80065c4:	4628      	mov	r0, r5
 80065c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80065ce:	3301      	adds	r3, #1
 80065d0:	e7c5      	b.n	800655e <__lshift+0x4a>
 80065d2:	3904      	subs	r1, #4
 80065d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80065dc:	459c      	cmp	ip, r3
 80065de:	d8f9      	bhi.n	80065d4 <__lshift+0xc0>
 80065e0:	e7ea      	b.n	80065b8 <__lshift+0xa4>
 80065e2:	bf00      	nop
 80065e4:	08007937 	.word	0x08007937
 80065e8:	08007948 	.word	0x08007948

080065ec <__mcmp>:
 80065ec:	b530      	push	{r4, r5, lr}
 80065ee:	6902      	ldr	r2, [r0, #16]
 80065f0:	690c      	ldr	r4, [r1, #16]
 80065f2:	1b12      	subs	r2, r2, r4
 80065f4:	d10e      	bne.n	8006614 <__mcmp+0x28>
 80065f6:	f100 0314 	add.w	r3, r0, #20
 80065fa:	3114      	adds	r1, #20
 80065fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006600:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006604:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006608:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800660c:	42a5      	cmp	r5, r4
 800660e:	d003      	beq.n	8006618 <__mcmp+0x2c>
 8006610:	d305      	bcc.n	800661e <__mcmp+0x32>
 8006612:	2201      	movs	r2, #1
 8006614:	4610      	mov	r0, r2
 8006616:	bd30      	pop	{r4, r5, pc}
 8006618:	4283      	cmp	r3, r0
 800661a:	d3f3      	bcc.n	8006604 <__mcmp+0x18>
 800661c:	e7fa      	b.n	8006614 <__mcmp+0x28>
 800661e:	f04f 32ff 	mov.w	r2, #4294967295
 8006622:	e7f7      	b.n	8006614 <__mcmp+0x28>

08006624 <__mdiff>:
 8006624:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006628:	460c      	mov	r4, r1
 800662a:	4606      	mov	r6, r0
 800662c:	4611      	mov	r1, r2
 800662e:	4620      	mov	r0, r4
 8006630:	4617      	mov	r7, r2
 8006632:	f7ff ffdb 	bl	80065ec <__mcmp>
 8006636:	1e05      	subs	r5, r0, #0
 8006638:	d110      	bne.n	800665c <__mdiff+0x38>
 800663a:	4629      	mov	r1, r5
 800663c:	4630      	mov	r0, r6
 800663e:	f7ff fd57 	bl	80060f0 <_Balloc>
 8006642:	b930      	cbnz	r0, 8006652 <__mdiff+0x2e>
 8006644:	4b39      	ldr	r3, [pc, #228]	; (800672c <__mdiff+0x108>)
 8006646:	4602      	mov	r2, r0
 8006648:	f240 2132 	movw	r1, #562	; 0x232
 800664c:	4838      	ldr	r0, [pc, #224]	; (8006730 <__mdiff+0x10c>)
 800664e:	f000 faf3 	bl	8006c38 <__assert_func>
 8006652:	2301      	movs	r3, #1
 8006654:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665c:	bfa4      	itt	ge
 800665e:	463b      	movge	r3, r7
 8006660:	4627      	movge	r7, r4
 8006662:	4630      	mov	r0, r6
 8006664:	6879      	ldr	r1, [r7, #4]
 8006666:	bfa6      	itte	ge
 8006668:	461c      	movge	r4, r3
 800666a:	2500      	movge	r5, #0
 800666c:	2501      	movlt	r5, #1
 800666e:	f7ff fd3f 	bl	80060f0 <_Balloc>
 8006672:	b920      	cbnz	r0, 800667e <__mdiff+0x5a>
 8006674:	4b2d      	ldr	r3, [pc, #180]	; (800672c <__mdiff+0x108>)
 8006676:	4602      	mov	r2, r0
 8006678:	f44f 7110 	mov.w	r1, #576	; 0x240
 800667c:	e7e6      	b.n	800664c <__mdiff+0x28>
 800667e:	693e      	ldr	r6, [r7, #16]
 8006680:	60c5      	str	r5, [r0, #12]
 8006682:	6925      	ldr	r5, [r4, #16]
 8006684:	f107 0114 	add.w	r1, r7, #20
 8006688:	f104 0914 	add.w	r9, r4, #20
 800668c:	f100 0e14 	add.w	lr, r0, #20
 8006690:	f107 0210 	add.w	r2, r7, #16
 8006694:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006698:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800669c:	46f2      	mov	sl, lr
 800669e:	2700      	movs	r7, #0
 80066a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80066a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80066a8:	fa1f f883 	uxth.w	r8, r3
 80066ac:	fa17 f78b 	uxtah	r7, r7, fp
 80066b0:	0c1b      	lsrs	r3, r3, #16
 80066b2:	eba7 0808 	sub.w	r8, r7, r8
 80066b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80066ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80066be:	fa1f f888 	uxth.w	r8, r8
 80066c2:	141f      	asrs	r7, r3, #16
 80066c4:	454d      	cmp	r5, r9
 80066c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80066ca:	f84a 3b04 	str.w	r3, [sl], #4
 80066ce:	d8e7      	bhi.n	80066a0 <__mdiff+0x7c>
 80066d0:	1b2b      	subs	r3, r5, r4
 80066d2:	3b15      	subs	r3, #21
 80066d4:	f023 0303 	bic.w	r3, r3, #3
 80066d8:	3304      	adds	r3, #4
 80066da:	3415      	adds	r4, #21
 80066dc:	42a5      	cmp	r5, r4
 80066de:	bf38      	it	cc
 80066e0:	2304      	movcc	r3, #4
 80066e2:	4419      	add	r1, r3
 80066e4:	4473      	add	r3, lr
 80066e6:	469e      	mov	lr, r3
 80066e8:	460d      	mov	r5, r1
 80066ea:	4565      	cmp	r5, ip
 80066ec:	d30e      	bcc.n	800670c <__mdiff+0xe8>
 80066ee:	f10c 0203 	add.w	r2, ip, #3
 80066f2:	1a52      	subs	r2, r2, r1
 80066f4:	f022 0203 	bic.w	r2, r2, #3
 80066f8:	3903      	subs	r1, #3
 80066fa:	458c      	cmp	ip, r1
 80066fc:	bf38      	it	cc
 80066fe:	2200      	movcc	r2, #0
 8006700:	441a      	add	r2, r3
 8006702:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006706:	b17b      	cbz	r3, 8006728 <__mdiff+0x104>
 8006708:	6106      	str	r6, [r0, #16]
 800670a:	e7a5      	b.n	8006658 <__mdiff+0x34>
 800670c:	f855 8b04 	ldr.w	r8, [r5], #4
 8006710:	fa17 f488 	uxtah	r4, r7, r8
 8006714:	1422      	asrs	r2, r4, #16
 8006716:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800671a:	b2a4      	uxth	r4, r4
 800671c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006720:	f84e 4b04 	str.w	r4, [lr], #4
 8006724:	1417      	asrs	r7, r2, #16
 8006726:	e7e0      	b.n	80066ea <__mdiff+0xc6>
 8006728:	3e01      	subs	r6, #1
 800672a:	e7ea      	b.n	8006702 <__mdiff+0xde>
 800672c:	08007937 	.word	0x08007937
 8006730:	08007948 	.word	0x08007948

08006734 <__d2b>:
 8006734:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006738:	4689      	mov	r9, r1
 800673a:	2101      	movs	r1, #1
 800673c:	ec57 6b10 	vmov	r6, r7, d0
 8006740:	4690      	mov	r8, r2
 8006742:	f7ff fcd5 	bl	80060f0 <_Balloc>
 8006746:	4604      	mov	r4, r0
 8006748:	b930      	cbnz	r0, 8006758 <__d2b+0x24>
 800674a:	4602      	mov	r2, r0
 800674c:	4b25      	ldr	r3, [pc, #148]	; (80067e4 <__d2b+0xb0>)
 800674e:	4826      	ldr	r0, [pc, #152]	; (80067e8 <__d2b+0xb4>)
 8006750:	f240 310a 	movw	r1, #778	; 0x30a
 8006754:	f000 fa70 	bl	8006c38 <__assert_func>
 8006758:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800675c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006760:	bb35      	cbnz	r5, 80067b0 <__d2b+0x7c>
 8006762:	2e00      	cmp	r6, #0
 8006764:	9301      	str	r3, [sp, #4]
 8006766:	d028      	beq.n	80067ba <__d2b+0x86>
 8006768:	4668      	mov	r0, sp
 800676a:	9600      	str	r6, [sp, #0]
 800676c:	f7ff fd8c 	bl	8006288 <__lo0bits>
 8006770:	9900      	ldr	r1, [sp, #0]
 8006772:	b300      	cbz	r0, 80067b6 <__d2b+0x82>
 8006774:	9a01      	ldr	r2, [sp, #4]
 8006776:	f1c0 0320 	rsb	r3, r0, #32
 800677a:	fa02 f303 	lsl.w	r3, r2, r3
 800677e:	430b      	orrs	r3, r1
 8006780:	40c2      	lsrs	r2, r0
 8006782:	6163      	str	r3, [r4, #20]
 8006784:	9201      	str	r2, [sp, #4]
 8006786:	9b01      	ldr	r3, [sp, #4]
 8006788:	61a3      	str	r3, [r4, #24]
 800678a:	2b00      	cmp	r3, #0
 800678c:	bf14      	ite	ne
 800678e:	2202      	movne	r2, #2
 8006790:	2201      	moveq	r2, #1
 8006792:	6122      	str	r2, [r4, #16]
 8006794:	b1d5      	cbz	r5, 80067cc <__d2b+0x98>
 8006796:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800679a:	4405      	add	r5, r0
 800679c:	f8c9 5000 	str.w	r5, [r9]
 80067a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80067a4:	f8c8 0000 	str.w	r0, [r8]
 80067a8:	4620      	mov	r0, r4
 80067aa:	b003      	add	sp, #12
 80067ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067b4:	e7d5      	b.n	8006762 <__d2b+0x2e>
 80067b6:	6161      	str	r1, [r4, #20]
 80067b8:	e7e5      	b.n	8006786 <__d2b+0x52>
 80067ba:	a801      	add	r0, sp, #4
 80067bc:	f7ff fd64 	bl	8006288 <__lo0bits>
 80067c0:	9b01      	ldr	r3, [sp, #4]
 80067c2:	6163      	str	r3, [r4, #20]
 80067c4:	2201      	movs	r2, #1
 80067c6:	6122      	str	r2, [r4, #16]
 80067c8:	3020      	adds	r0, #32
 80067ca:	e7e3      	b.n	8006794 <__d2b+0x60>
 80067cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80067d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80067d4:	f8c9 0000 	str.w	r0, [r9]
 80067d8:	6918      	ldr	r0, [r3, #16]
 80067da:	f7ff fd35 	bl	8006248 <__hi0bits>
 80067de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80067e2:	e7df      	b.n	80067a4 <__d2b+0x70>
 80067e4:	08007937 	.word	0x08007937
 80067e8:	08007948 	.word	0x08007948

080067ec <_calloc_r>:
 80067ec:	b513      	push	{r0, r1, r4, lr}
 80067ee:	434a      	muls	r2, r1
 80067f0:	4611      	mov	r1, r2
 80067f2:	9201      	str	r2, [sp, #4]
 80067f4:	f000 f85a 	bl	80068ac <_malloc_r>
 80067f8:	4604      	mov	r4, r0
 80067fa:	b118      	cbz	r0, 8006804 <_calloc_r+0x18>
 80067fc:	9a01      	ldr	r2, [sp, #4]
 80067fe:	2100      	movs	r1, #0
 8006800:	f7fe f9e2 	bl	8004bc8 <memset>
 8006804:	4620      	mov	r0, r4
 8006806:	b002      	add	sp, #8
 8006808:	bd10      	pop	{r4, pc}
	...

0800680c <_free_r>:
 800680c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800680e:	2900      	cmp	r1, #0
 8006810:	d048      	beq.n	80068a4 <_free_r+0x98>
 8006812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006816:	9001      	str	r0, [sp, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	f1a1 0404 	sub.w	r4, r1, #4
 800681e:	bfb8      	it	lt
 8006820:	18e4      	addlt	r4, r4, r3
 8006822:	f000 fa65 	bl	8006cf0 <__malloc_lock>
 8006826:	4a20      	ldr	r2, [pc, #128]	; (80068a8 <_free_r+0x9c>)
 8006828:	9801      	ldr	r0, [sp, #4]
 800682a:	6813      	ldr	r3, [r2, #0]
 800682c:	4615      	mov	r5, r2
 800682e:	b933      	cbnz	r3, 800683e <_free_r+0x32>
 8006830:	6063      	str	r3, [r4, #4]
 8006832:	6014      	str	r4, [r2, #0]
 8006834:	b003      	add	sp, #12
 8006836:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800683a:	f000 ba5f 	b.w	8006cfc <__malloc_unlock>
 800683e:	42a3      	cmp	r3, r4
 8006840:	d90b      	bls.n	800685a <_free_r+0x4e>
 8006842:	6821      	ldr	r1, [r4, #0]
 8006844:	1862      	adds	r2, r4, r1
 8006846:	4293      	cmp	r3, r2
 8006848:	bf04      	itt	eq
 800684a:	681a      	ldreq	r2, [r3, #0]
 800684c:	685b      	ldreq	r3, [r3, #4]
 800684e:	6063      	str	r3, [r4, #4]
 8006850:	bf04      	itt	eq
 8006852:	1852      	addeq	r2, r2, r1
 8006854:	6022      	streq	r2, [r4, #0]
 8006856:	602c      	str	r4, [r5, #0]
 8006858:	e7ec      	b.n	8006834 <_free_r+0x28>
 800685a:	461a      	mov	r2, r3
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	b10b      	cbz	r3, 8006864 <_free_r+0x58>
 8006860:	42a3      	cmp	r3, r4
 8006862:	d9fa      	bls.n	800685a <_free_r+0x4e>
 8006864:	6811      	ldr	r1, [r2, #0]
 8006866:	1855      	adds	r5, r2, r1
 8006868:	42a5      	cmp	r5, r4
 800686a:	d10b      	bne.n	8006884 <_free_r+0x78>
 800686c:	6824      	ldr	r4, [r4, #0]
 800686e:	4421      	add	r1, r4
 8006870:	1854      	adds	r4, r2, r1
 8006872:	42a3      	cmp	r3, r4
 8006874:	6011      	str	r1, [r2, #0]
 8006876:	d1dd      	bne.n	8006834 <_free_r+0x28>
 8006878:	681c      	ldr	r4, [r3, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	6053      	str	r3, [r2, #4]
 800687e:	4421      	add	r1, r4
 8006880:	6011      	str	r1, [r2, #0]
 8006882:	e7d7      	b.n	8006834 <_free_r+0x28>
 8006884:	d902      	bls.n	800688c <_free_r+0x80>
 8006886:	230c      	movs	r3, #12
 8006888:	6003      	str	r3, [r0, #0]
 800688a:	e7d3      	b.n	8006834 <_free_r+0x28>
 800688c:	6825      	ldr	r5, [r4, #0]
 800688e:	1961      	adds	r1, r4, r5
 8006890:	428b      	cmp	r3, r1
 8006892:	bf04      	itt	eq
 8006894:	6819      	ldreq	r1, [r3, #0]
 8006896:	685b      	ldreq	r3, [r3, #4]
 8006898:	6063      	str	r3, [r4, #4]
 800689a:	bf04      	itt	eq
 800689c:	1949      	addeq	r1, r1, r5
 800689e:	6021      	streq	r1, [r4, #0]
 80068a0:	6054      	str	r4, [r2, #4]
 80068a2:	e7c7      	b.n	8006834 <_free_r+0x28>
 80068a4:	b003      	add	sp, #12
 80068a6:	bd30      	pop	{r4, r5, pc}
 80068a8:	20000204 	.word	0x20000204

080068ac <_malloc_r>:
 80068ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ae:	1ccd      	adds	r5, r1, #3
 80068b0:	f025 0503 	bic.w	r5, r5, #3
 80068b4:	3508      	adds	r5, #8
 80068b6:	2d0c      	cmp	r5, #12
 80068b8:	bf38      	it	cc
 80068ba:	250c      	movcc	r5, #12
 80068bc:	2d00      	cmp	r5, #0
 80068be:	4606      	mov	r6, r0
 80068c0:	db01      	blt.n	80068c6 <_malloc_r+0x1a>
 80068c2:	42a9      	cmp	r1, r5
 80068c4:	d903      	bls.n	80068ce <_malloc_r+0x22>
 80068c6:	230c      	movs	r3, #12
 80068c8:	6033      	str	r3, [r6, #0]
 80068ca:	2000      	movs	r0, #0
 80068cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ce:	f000 fa0f 	bl	8006cf0 <__malloc_lock>
 80068d2:	4921      	ldr	r1, [pc, #132]	; (8006958 <_malloc_r+0xac>)
 80068d4:	680a      	ldr	r2, [r1, #0]
 80068d6:	4614      	mov	r4, r2
 80068d8:	b99c      	cbnz	r4, 8006902 <_malloc_r+0x56>
 80068da:	4f20      	ldr	r7, [pc, #128]	; (800695c <_malloc_r+0xb0>)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	b923      	cbnz	r3, 80068ea <_malloc_r+0x3e>
 80068e0:	4621      	mov	r1, r4
 80068e2:	4630      	mov	r0, r6
 80068e4:	f000 f998 	bl	8006c18 <_sbrk_r>
 80068e8:	6038      	str	r0, [r7, #0]
 80068ea:	4629      	mov	r1, r5
 80068ec:	4630      	mov	r0, r6
 80068ee:	f000 f993 	bl	8006c18 <_sbrk_r>
 80068f2:	1c43      	adds	r3, r0, #1
 80068f4:	d123      	bne.n	800693e <_malloc_r+0x92>
 80068f6:	230c      	movs	r3, #12
 80068f8:	6033      	str	r3, [r6, #0]
 80068fa:	4630      	mov	r0, r6
 80068fc:	f000 f9fe 	bl	8006cfc <__malloc_unlock>
 8006900:	e7e3      	b.n	80068ca <_malloc_r+0x1e>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	1b5b      	subs	r3, r3, r5
 8006906:	d417      	bmi.n	8006938 <_malloc_r+0x8c>
 8006908:	2b0b      	cmp	r3, #11
 800690a:	d903      	bls.n	8006914 <_malloc_r+0x68>
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	441c      	add	r4, r3
 8006910:	6025      	str	r5, [r4, #0]
 8006912:	e004      	b.n	800691e <_malloc_r+0x72>
 8006914:	6863      	ldr	r3, [r4, #4]
 8006916:	42a2      	cmp	r2, r4
 8006918:	bf0c      	ite	eq
 800691a:	600b      	streq	r3, [r1, #0]
 800691c:	6053      	strne	r3, [r2, #4]
 800691e:	4630      	mov	r0, r6
 8006920:	f000 f9ec 	bl	8006cfc <__malloc_unlock>
 8006924:	f104 000b 	add.w	r0, r4, #11
 8006928:	1d23      	adds	r3, r4, #4
 800692a:	f020 0007 	bic.w	r0, r0, #7
 800692e:	1ac2      	subs	r2, r0, r3
 8006930:	d0cc      	beq.n	80068cc <_malloc_r+0x20>
 8006932:	1a1b      	subs	r3, r3, r0
 8006934:	50a3      	str	r3, [r4, r2]
 8006936:	e7c9      	b.n	80068cc <_malloc_r+0x20>
 8006938:	4622      	mov	r2, r4
 800693a:	6864      	ldr	r4, [r4, #4]
 800693c:	e7cc      	b.n	80068d8 <_malloc_r+0x2c>
 800693e:	1cc4      	adds	r4, r0, #3
 8006940:	f024 0403 	bic.w	r4, r4, #3
 8006944:	42a0      	cmp	r0, r4
 8006946:	d0e3      	beq.n	8006910 <_malloc_r+0x64>
 8006948:	1a21      	subs	r1, r4, r0
 800694a:	4630      	mov	r0, r6
 800694c:	f000 f964 	bl	8006c18 <_sbrk_r>
 8006950:	3001      	adds	r0, #1
 8006952:	d1dd      	bne.n	8006910 <_malloc_r+0x64>
 8006954:	e7cf      	b.n	80068f6 <_malloc_r+0x4a>
 8006956:	bf00      	nop
 8006958:	20000204 	.word	0x20000204
 800695c:	20000208 	.word	0x20000208

08006960 <__ssputs_r>:
 8006960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006964:	688e      	ldr	r6, [r1, #8]
 8006966:	429e      	cmp	r6, r3
 8006968:	4682      	mov	sl, r0
 800696a:	460c      	mov	r4, r1
 800696c:	4690      	mov	r8, r2
 800696e:	461f      	mov	r7, r3
 8006970:	d838      	bhi.n	80069e4 <__ssputs_r+0x84>
 8006972:	898a      	ldrh	r2, [r1, #12]
 8006974:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006978:	d032      	beq.n	80069e0 <__ssputs_r+0x80>
 800697a:	6825      	ldr	r5, [r4, #0]
 800697c:	6909      	ldr	r1, [r1, #16]
 800697e:	eba5 0901 	sub.w	r9, r5, r1
 8006982:	6965      	ldr	r5, [r4, #20]
 8006984:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006988:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800698c:	3301      	adds	r3, #1
 800698e:	444b      	add	r3, r9
 8006990:	106d      	asrs	r5, r5, #1
 8006992:	429d      	cmp	r5, r3
 8006994:	bf38      	it	cc
 8006996:	461d      	movcc	r5, r3
 8006998:	0553      	lsls	r3, r2, #21
 800699a:	d531      	bpl.n	8006a00 <__ssputs_r+0xa0>
 800699c:	4629      	mov	r1, r5
 800699e:	f7ff ff85 	bl	80068ac <_malloc_r>
 80069a2:	4606      	mov	r6, r0
 80069a4:	b950      	cbnz	r0, 80069bc <__ssputs_r+0x5c>
 80069a6:	230c      	movs	r3, #12
 80069a8:	f8ca 3000 	str.w	r3, [sl]
 80069ac:	89a3      	ldrh	r3, [r4, #12]
 80069ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069b2:	81a3      	strh	r3, [r4, #12]
 80069b4:	f04f 30ff 	mov.w	r0, #4294967295
 80069b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069bc:	6921      	ldr	r1, [r4, #16]
 80069be:	464a      	mov	r2, r9
 80069c0:	f7ff fb88 	bl	80060d4 <memcpy>
 80069c4:	89a3      	ldrh	r3, [r4, #12]
 80069c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ce:	81a3      	strh	r3, [r4, #12]
 80069d0:	6126      	str	r6, [r4, #16]
 80069d2:	6165      	str	r5, [r4, #20]
 80069d4:	444e      	add	r6, r9
 80069d6:	eba5 0509 	sub.w	r5, r5, r9
 80069da:	6026      	str	r6, [r4, #0]
 80069dc:	60a5      	str	r5, [r4, #8]
 80069de:	463e      	mov	r6, r7
 80069e0:	42be      	cmp	r6, r7
 80069e2:	d900      	bls.n	80069e6 <__ssputs_r+0x86>
 80069e4:	463e      	mov	r6, r7
 80069e6:	4632      	mov	r2, r6
 80069e8:	6820      	ldr	r0, [r4, #0]
 80069ea:	4641      	mov	r1, r8
 80069ec:	f000 f966 	bl	8006cbc <memmove>
 80069f0:	68a3      	ldr	r3, [r4, #8]
 80069f2:	6822      	ldr	r2, [r4, #0]
 80069f4:	1b9b      	subs	r3, r3, r6
 80069f6:	4432      	add	r2, r6
 80069f8:	60a3      	str	r3, [r4, #8]
 80069fa:	6022      	str	r2, [r4, #0]
 80069fc:	2000      	movs	r0, #0
 80069fe:	e7db      	b.n	80069b8 <__ssputs_r+0x58>
 8006a00:	462a      	mov	r2, r5
 8006a02:	f000 f981 	bl	8006d08 <_realloc_r>
 8006a06:	4606      	mov	r6, r0
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d1e1      	bne.n	80069d0 <__ssputs_r+0x70>
 8006a0c:	6921      	ldr	r1, [r4, #16]
 8006a0e:	4650      	mov	r0, sl
 8006a10:	f7ff fefc 	bl	800680c <_free_r>
 8006a14:	e7c7      	b.n	80069a6 <__ssputs_r+0x46>
	...

08006a18 <_svfiprintf_r>:
 8006a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1c:	4698      	mov	r8, r3
 8006a1e:	898b      	ldrh	r3, [r1, #12]
 8006a20:	061b      	lsls	r3, r3, #24
 8006a22:	b09d      	sub	sp, #116	; 0x74
 8006a24:	4607      	mov	r7, r0
 8006a26:	460d      	mov	r5, r1
 8006a28:	4614      	mov	r4, r2
 8006a2a:	d50e      	bpl.n	8006a4a <_svfiprintf_r+0x32>
 8006a2c:	690b      	ldr	r3, [r1, #16]
 8006a2e:	b963      	cbnz	r3, 8006a4a <_svfiprintf_r+0x32>
 8006a30:	2140      	movs	r1, #64	; 0x40
 8006a32:	f7ff ff3b 	bl	80068ac <_malloc_r>
 8006a36:	6028      	str	r0, [r5, #0]
 8006a38:	6128      	str	r0, [r5, #16]
 8006a3a:	b920      	cbnz	r0, 8006a46 <_svfiprintf_r+0x2e>
 8006a3c:	230c      	movs	r3, #12
 8006a3e:	603b      	str	r3, [r7, #0]
 8006a40:	f04f 30ff 	mov.w	r0, #4294967295
 8006a44:	e0d1      	b.n	8006bea <_svfiprintf_r+0x1d2>
 8006a46:	2340      	movs	r3, #64	; 0x40
 8006a48:	616b      	str	r3, [r5, #20]
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a4e:	2320      	movs	r3, #32
 8006a50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a54:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a58:	2330      	movs	r3, #48	; 0x30
 8006a5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c04 <_svfiprintf_r+0x1ec>
 8006a5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a62:	f04f 0901 	mov.w	r9, #1
 8006a66:	4623      	mov	r3, r4
 8006a68:	469a      	mov	sl, r3
 8006a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a6e:	b10a      	cbz	r2, 8006a74 <_svfiprintf_r+0x5c>
 8006a70:	2a25      	cmp	r2, #37	; 0x25
 8006a72:	d1f9      	bne.n	8006a68 <_svfiprintf_r+0x50>
 8006a74:	ebba 0b04 	subs.w	fp, sl, r4
 8006a78:	d00b      	beq.n	8006a92 <_svfiprintf_r+0x7a>
 8006a7a:	465b      	mov	r3, fp
 8006a7c:	4622      	mov	r2, r4
 8006a7e:	4629      	mov	r1, r5
 8006a80:	4638      	mov	r0, r7
 8006a82:	f7ff ff6d 	bl	8006960 <__ssputs_r>
 8006a86:	3001      	adds	r0, #1
 8006a88:	f000 80aa 	beq.w	8006be0 <_svfiprintf_r+0x1c8>
 8006a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a8e:	445a      	add	r2, fp
 8006a90:	9209      	str	r2, [sp, #36]	; 0x24
 8006a92:	f89a 3000 	ldrb.w	r3, [sl]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f000 80a2 	beq.w	8006be0 <_svfiprintf_r+0x1c8>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aa6:	f10a 0a01 	add.w	sl, sl, #1
 8006aaa:	9304      	str	r3, [sp, #16]
 8006aac:	9307      	str	r3, [sp, #28]
 8006aae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ab2:	931a      	str	r3, [sp, #104]	; 0x68
 8006ab4:	4654      	mov	r4, sl
 8006ab6:	2205      	movs	r2, #5
 8006ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006abc:	4851      	ldr	r0, [pc, #324]	; (8006c04 <_svfiprintf_r+0x1ec>)
 8006abe:	f7f9 fbc7 	bl	8000250 <memchr>
 8006ac2:	9a04      	ldr	r2, [sp, #16]
 8006ac4:	b9d8      	cbnz	r0, 8006afe <_svfiprintf_r+0xe6>
 8006ac6:	06d0      	lsls	r0, r2, #27
 8006ac8:	bf44      	itt	mi
 8006aca:	2320      	movmi	r3, #32
 8006acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ad0:	0711      	lsls	r1, r2, #28
 8006ad2:	bf44      	itt	mi
 8006ad4:	232b      	movmi	r3, #43	; 0x2b
 8006ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ada:	f89a 3000 	ldrb.w	r3, [sl]
 8006ade:	2b2a      	cmp	r3, #42	; 0x2a
 8006ae0:	d015      	beq.n	8006b0e <_svfiprintf_r+0xf6>
 8006ae2:	9a07      	ldr	r2, [sp, #28]
 8006ae4:	4654      	mov	r4, sl
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	f04f 0c0a 	mov.w	ip, #10
 8006aec:	4621      	mov	r1, r4
 8006aee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006af2:	3b30      	subs	r3, #48	; 0x30
 8006af4:	2b09      	cmp	r3, #9
 8006af6:	d94e      	bls.n	8006b96 <_svfiprintf_r+0x17e>
 8006af8:	b1b0      	cbz	r0, 8006b28 <_svfiprintf_r+0x110>
 8006afa:	9207      	str	r2, [sp, #28]
 8006afc:	e014      	b.n	8006b28 <_svfiprintf_r+0x110>
 8006afe:	eba0 0308 	sub.w	r3, r0, r8
 8006b02:	fa09 f303 	lsl.w	r3, r9, r3
 8006b06:	4313      	orrs	r3, r2
 8006b08:	9304      	str	r3, [sp, #16]
 8006b0a:	46a2      	mov	sl, r4
 8006b0c:	e7d2      	b.n	8006ab4 <_svfiprintf_r+0x9c>
 8006b0e:	9b03      	ldr	r3, [sp, #12]
 8006b10:	1d19      	adds	r1, r3, #4
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	9103      	str	r1, [sp, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bfbb      	ittet	lt
 8006b1a:	425b      	neglt	r3, r3
 8006b1c:	f042 0202 	orrlt.w	r2, r2, #2
 8006b20:	9307      	strge	r3, [sp, #28]
 8006b22:	9307      	strlt	r3, [sp, #28]
 8006b24:	bfb8      	it	lt
 8006b26:	9204      	strlt	r2, [sp, #16]
 8006b28:	7823      	ldrb	r3, [r4, #0]
 8006b2a:	2b2e      	cmp	r3, #46	; 0x2e
 8006b2c:	d10c      	bne.n	8006b48 <_svfiprintf_r+0x130>
 8006b2e:	7863      	ldrb	r3, [r4, #1]
 8006b30:	2b2a      	cmp	r3, #42	; 0x2a
 8006b32:	d135      	bne.n	8006ba0 <_svfiprintf_r+0x188>
 8006b34:	9b03      	ldr	r3, [sp, #12]
 8006b36:	1d1a      	adds	r2, r3, #4
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	9203      	str	r2, [sp, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	bfb8      	it	lt
 8006b40:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b44:	3402      	adds	r4, #2
 8006b46:	9305      	str	r3, [sp, #20]
 8006b48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c14 <_svfiprintf_r+0x1fc>
 8006b4c:	7821      	ldrb	r1, [r4, #0]
 8006b4e:	2203      	movs	r2, #3
 8006b50:	4650      	mov	r0, sl
 8006b52:	f7f9 fb7d 	bl	8000250 <memchr>
 8006b56:	b140      	cbz	r0, 8006b6a <_svfiprintf_r+0x152>
 8006b58:	2340      	movs	r3, #64	; 0x40
 8006b5a:	eba0 000a 	sub.w	r0, r0, sl
 8006b5e:	fa03 f000 	lsl.w	r0, r3, r0
 8006b62:	9b04      	ldr	r3, [sp, #16]
 8006b64:	4303      	orrs	r3, r0
 8006b66:	3401      	adds	r4, #1
 8006b68:	9304      	str	r3, [sp, #16]
 8006b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b6e:	4826      	ldr	r0, [pc, #152]	; (8006c08 <_svfiprintf_r+0x1f0>)
 8006b70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b74:	2206      	movs	r2, #6
 8006b76:	f7f9 fb6b 	bl	8000250 <memchr>
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	d038      	beq.n	8006bf0 <_svfiprintf_r+0x1d8>
 8006b7e:	4b23      	ldr	r3, [pc, #140]	; (8006c0c <_svfiprintf_r+0x1f4>)
 8006b80:	bb1b      	cbnz	r3, 8006bca <_svfiprintf_r+0x1b2>
 8006b82:	9b03      	ldr	r3, [sp, #12]
 8006b84:	3307      	adds	r3, #7
 8006b86:	f023 0307 	bic.w	r3, r3, #7
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	9303      	str	r3, [sp, #12]
 8006b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b90:	4433      	add	r3, r6
 8006b92:	9309      	str	r3, [sp, #36]	; 0x24
 8006b94:	e767      	b.n	8006a66 <_svfiprintf_r+0x4e>
 8006b96:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	2001      	movs	r0, #1
 8006b9e:	e7a5      	b.n	8006aec <_svfiprintf_r+0xd4>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	3401      	adds	r4, #1
 8006ba4:	9305      	str	r3, [sp, #20]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	f04f 0c0a 	mov.w	ip, #10
 8006bac:	4620      	mov	r0, r4
 8006bae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bb2:	3a30      	subs	r2, #48	; 0x30
 8006bb4:	2a09      	cmp	r2, #9
 8006bb6:	d903      	bls.n	8006bc0 <_svfiprintf_r+0x1a8>
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0c5      	beq.n	8006b48 <_svfiprintf_r+0x130>
 8006bbc:	9105      	str	r1, [sp, #20]
 8006bbe:	e7c3      	b.n	8006b48 <_svfiprintf_r+0x130>
 8006bc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e7f0      	b.n	8006bac <_svfiprintf_r+0x194>
 8006bca:	ab03      	add	r3, sp, #12
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	462a      	mov	r2, r5
 8006bd0:	4b0f      	ldr	r3, [pc, #60]	; (8006c10 <_svfiprintf_r+0x1f8>)
 8006bd2:	a904      	add	r1, sp, #16
 8006bd4:	4638      	mov	r0, r7
 8006bd6:	f7fe f88f 	bl	8004cf8 <_printf_float>
 8006bda:	1c42      	adds	r2, r0, #1
 8006bdc:	4606      	mov	r6, r0
 8006bde:	d1d6      	bne.n	8006b8e <_svfiprintf_r+0x176>
 8006be0:	89ab      	ldrh	r3, [r5, #12]
 8006be2:	065b      	lsls	r3, r3, #25
 8006be4:	f53f af2c 	bmi.w	8006a40 <_svfiprintf_r+0x28>
 8006be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bea:	b01d      	add	sp, #116	; 0x74
 8006bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf0:	ab03      	add	r3, sp, #12
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	462a      	mov	r2, r5
 8006bf6:	4b06      	ldr	r3, [pc, #24]	; (8006c10 <_svfiprintf_r+0x1f8>)
 8006bf8:	a904      	add	r1, sp, #16
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	f7fe fb08 	bl	8005210 <_printf_i>
 8006c00:	e7eb      	b.n	8006bda <_svfiprintf_r+0x1c2>
 8006c02:	bf00      	nop
 8006c04:	08007aa4 	.word	0x08007aa4
 8006c08:	08007aae 	.word	0x08007aae
 8006c0c:	08004cf9 	.word	0x08004cf9
 8006c10:	08006961 	.word	0x08006961
 8006c14:	08007aaa 	.word	0x08007aaa

08006c18 <_sbrk_r>:
 8006c18:	b538      	push	{r3, r4, r5, lr}
 8006c1a:	4d06      	ldr	r5, [pc, #24]	; (8006c34 <_sbrk_r+0x1c>)
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	4604      	mov	r4, r0
 8006c20:	4608      	mov	r0, r1
 8006c22:	602b      	str	r3, [r5, #0]
 8006c24:	f7fa fab6 	bl	8001194 <_sbrk>
 8006c28:	1c43      	adds	r3, r0, #1
 8006c2a:	d102      	bne.n	8006c32 <_sbrk_r+0x1a>
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	b103      	cbz	r3, 8006c32 <_sbrk_r+0x1a>
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
 8006c34:	200003c4 	.word	0x200003c4

08006c38 <__assert_func>:
 8006c38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c3a:	4614      	mov	r4, r2
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	4b09      	ldr	r3, [pc, #36]	; (8006c64 <__assert_func+0x2c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4605      	mov	r5, r0
 8006c44:	68d8      	ldr	r0, [r3, #12]
 8006c46:	b14c      	cbz	r4, 8006c5c <__assert_func+0x24>
 8006c48:	4b07      	ldr	r3, [pc, #28]	; (8006c68 <__assert_func+0x30>)
 8006c4a:	9100      	str	r1, [sp, #0]
 8006c4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c50:	4906      	ldr	r1, [pc, #24]	; (8006c6c <__assert_func+0x34>)
 8006c52:	462b      	mov	r3, r5
 8006c54:	f000 f80e 	bl	8006c74 <fiprintf>
 8006c58:	f000 faa4 	bl	80071a4 <abort>
 8006c5c:	4b04      	ldr	r3, [pc, #16]	; (8006c70 <__assert_func+0x38>)
 8006c5e:	461c      	mov	r4, r3
 8006c60:	e7f3      	b.n	8006c4a <__assert_func+0x12>
 8006c62:	bf00      	nop
 8006c64:	2000000c 	.word	0x2000000c
 8006c68:	08007ab5 	.word	0x08007ab5
 8006c6c:	08007ac2 	.word	0x08007ac2
 8006c70:	08007af0 	.word	0x08007af0

08006c74 <fiprintf>:
 8006c74:	b40e      	push	{r1, r2, r3}
 8006c76:	b503      	push	{r0, r1, lr}
 8006c78:	4601      	mov	r1, r0
 8006c7a:	ab03      	add	r3, sp, #12
 8006c7c:	4805      	ldr	r0, [pc, #20]	; (8006c94 <fiprintf+0x20>)
 8006c7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c82:	6800      	ldr	r0, [r0, #0]
 8006c84:	9301      	str	r3, [sp, #4]
 8006c86:	f000 f88f 	bl	8006da8 <_vfiprintf_r>
 8006c8a:	b002      	add	sp, #8
 8006c8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c90:	b003      	add	sp, #12
 8006c92:	4770      	bx	lr
 8006c94:	2000000c 	.word	0x2000000c

08006c98 <__ascii_mbtowc>:
 8006c98:	b082      	sub	sp, #8
 8006c9a:	b901      	cbnz	r1, 8006c9e <__ascii_mbtowc+0x6>
 8006c9c:	a901      	add	r1, sp, #4
 8006c9e:	b142      	cbz	r2, 8006cb2 <__ascii_mbtowc+0x1a>
 8006ca0:	b14b      	cbz	r3, 8006cb6 <__ascii_mbtowc+0x1e>
 8006ca2:	7813      	ldrb	r3, [r2, #0]
 8006ca4:	600b      	str	r3, [r1, #0]
 8006ca6:	7812      	ldrb	r2, [r2, #0]
 8006ca8:	1e10      	subs	r0, r2, #0
 8006caa:	bf18      	it	ne
 8006cac:	2001      	movne	r0, #1
 8006cae:	b002      	add	sp, #8
 8006cb0:	4770      	bx	lr
 8006cb2:	4610      	mov	r0, r2
 8006cb4:	e7fb      	b.n	8006cae <__ascii_mbtowc+0x16>
 8006cb6:	f06f 0001 	mvn.w	r0, #1
 8006cba:	e7f8      	b.n	8006cae <__ascii_mbtowc+0x16>

08006cbc <memmove>:
 8006cbc:	4288      	cmp	r0, r1
 8006cbe:	b510      	push	{r4, lr}
 8006cc0:	eb01 0402 	add.w	r4, r1, r2
 8006cc4:	d902      	bls.n	8006ccc <memmove+0x10>
 8006cc6:	4284      	cmp	r4, r0
 8006cc8:	4623      	mov	r3, r4
 8006cca:	d807      	bhi.n	8006cdc <memmove+0x20>
 8006ccc:	1e43      	subs	r3, r0, #1
 8006cce:	42a1      	cmp	r1, r4
 8006cd0:	d008      	beq.n	8006ce4 <memmove+0x28>
 8006cd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cda:	e7f8      	b.n	8006cce <memmove+0x12>
 8006cdc:	4402      	add	r2, r0
 8006cde:	4601      	mov	r1, r0
 8006ce0:	428a      	cmp	r2, r1
 8006ce2:	d100      	bne.n	8006ce6 <memmove+0x2a>
 8006ce4:	bd10      	pop	{r4, pc}
 8006ce6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cee:	e7f7      	b.n	8006ce0 <memmove+0x24>

08006cf0 <__malloc_lock>:
 8006cf0:	4801      	ldr	r0, [pc, #4]	; (8006cf8 <__malloc_lock+0x8>)
 8006cf2:	f000 bc17 	b.w	8007524 <__retarget_lock_acquire_recursive>
 8006cf6:	bf00      	nop
 8006cf8:	200003cc 	.word	0x200003cc

08006cfc <__malloc_unlock>:
 8006cfc:	4801      	ldr	r0, [pc, #4]	; (8006d04 <__malloc_unlock+0x8>)
 8006cfe:	f000 bc12 	b.w	8007526 <__retarget_lock_release_recursive>
 8006d02:	bf00      	nop
 8006d04:	200003cc 	.word	0x200003cc

08006d08 <_realloc_r>:
 8006d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0a:	4607      	mov	r7, r0
 8006d0c:	4614      	mov	r4, r2
 8006d0e:	460e      	mov	r6, r1
 8006d10:	b921      	cbnz	r1, 8006d1c <_realloc_r+0x14>
 8006d12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d16:	4611      	mov	r1, r2
 8006d18:	f7ff bdc8 	b.w	80068ac <_malloc_r>
 8006d1c:	b922      	cbnz	r2, 8006d28 <_realloc_r+0x20>
 8006d1e:	f7ff fd75 	bl	800680c <_free_r>
 8006d22:	4625      	mov	r5, r4
 8006d24:	4628      	mov	r0, r5
 8006d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d28:	f000 fc62 	bl	80075f0 <_malloc_usable_size_r>
 8006d2c:	42a0      	cmp	r0, r4
 8006d2e:	d20f      	bcs.n	8006d50 <_realloc_r+0x48>
 8006d30:	4621      	mov	r1, r4
 8006d32:	4638      	mov	r0, r7
 8006d34:	f7ff fdba 	bl	80068ac <_malloc_r>
 8006d38:	4605      	mov	r5, r0
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d0f2      	beq.n	8006d24 <_realloc_r+0x1c>
 8006d3e:	4631      	mov	r1, r6
 8006d40:	4622      	mov	r2, r4
 8006d42:	f7ff f9c7 	bl	80060d4 <memcpy>
 8006d46:	4631      	mov	r1, r6
 8006d48:	4638      	mov	r0, r7
 8006d4a:	f7ff fd5f 	bl	800680c <_free_r>
 8006d4e:	e7e9      	b.n	8006d24 <_realloc_r+0x1c>
 8006d50:	4635      	mov	r5, r6
 8006d52:	e7e7      	b.n	8006d24 <_realloc_r+0x1c>

08006d54 <__sfputc_r>:
 8006d54:	6893      	ldr	r3, [r2, #8]
 8006d56:	3b01      	subs	r3, #1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	b410      	push	{r4}
 8006d5c:	6093      	str	r3, [r2, #8]
 8006d5e:	da08      	bge.n	8006d72 <__sfputc_r+0x1e>
 8006d60:	6994      	ldr	r4, [r2, #24]
 8006d62:	42a3      	cmp	r3, r4
 8006d64:	db01      	blt.n	8006d6a <__sfputc_r+0x16>
 8006d66:	290a      	cmp	r1, #10
 8006d68:	d103      	bne.n	8006d72 <__sfputc_r+0x1e>
 8006d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d6e:	f000 b94b 	b.w	8007008 <__swbuf_r>
 8006d72:	6813      	ldr	r3, [r2, #0]
 8006d74:	1c58      	adds	r0, r3, #1
 8006d76:	6010      	str	r0, [r2, #0]
 8006d78:	7019      	strb	r1, [r3, #0]
 8006d7a:	4608      	mov	r0, r1
 8006d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <__sfputs_r>:
 8006d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d84:	4606      	mov	r6, r0
 8006d86:	460f      	mov	r7, r1
 8006d88:	4614      	mov	r4, r2
 8006d8a:	18d5      	adds	r5, r2, r3
 8006d8c:	42ac      	cmp	r4, r5
 8006d8e:	d101      	bne.n	8006d94 <__sfputs_r+0x12>
 8006d90:	2000      	movs	r0, #0
 8006d92:	e007      	b.n	8006da4 <__sfputs_r+0x22>
 8006d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d98:	463a      	mov	r2, r7
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	f7ff ffda 	bl	8006d54 <__sfputc_r>
 8006da0:	1c43      	adds	r3, r0, #1
 8006da2:	d1f3      	bne.n	8006d8c <__sfputs_r+0xa>
 8006da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006da8 <_vfiprintf_r>:
 8006da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dac:	460d      	mov	r5, r1
 8006dae:	b09d      	sub	sp, #116	; 0x74
 8006db0:	4614      	mov	r4, r2
 8006db2:	4698      	mov	r8, r3
 8006db4:	4606      	mov	r6, r0
 8006db6:	b118      	cbz	r0, 8006dc0 <_vfiprintf_r+0x18>
 8006db8:	6983      	ldr	r3, [r0, #24]
 8006dba:	b90b      	cbnz	r3, 8006dc0 <_vfiprintf_r+0x18>
 8006dbc:	f000 fb14 	bl	80073e8 <__sinit>
 8006dc0:	4b89      	ldr	r3, [pc, #548]	; (8006fe8 <_vfiprintf_r+0x240>)
 8006dc2:	429d      	cmp	r5, r3
 8006dc4:	d11b      	bne.n	8006dfe <_vfiprintf_r+0x56>
 8006dc6:	6875      	ldr	r5, [r6, #4]
 8006dc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dca:	07d9      	lsls	r1, r3, #31
 8006dcc:	d405      	bmi.n	8006dda <_vfiprintf_r+0x32>
 8006dce:	89ab      	ldrh	r3, [r5, #12]
 8006dd0:	059a      	lsls	r2, r3, #22
 8006dd2:	d402      	bmi.n	8006dda <_vfiprintf_r+0x32>
 8006dd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dd6:	f000 fba5 	bl	8007524 <__retarget_lock_acquire_recursive>
 8006dda:	89ab      	ldrh	r3, [r5, #12]
 8006ddc:	071b      	lsls	r3, r3, #28
 8006dde:	d501      	bpl.n	8006de4 <_vfiprintf_r+0x3c>
 8006de0:	692b      	ldr	r3, [r5, #16]
 8006de2:	b9eb      	cbnz	r3, 8006e20 <_vfiprintf_r+0x78>
 8006de4:	4629      	mov	r1, r5
 8006de6:	4630      	mov	r0, r6
 8006de8:	f000 f96e 	bl	80070c8 <__swsetup_r>
 8006dec:	b1c0      	cbz	r0, 8006e20 <_vfiprintf_r+0x78>
 8006dee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006df0:	07dc      	lsls	r4, r3, #31
 8006df2:	d50e      	bpl.n	8006e12 <_vfiprintf_r+0x6a>
 8006df4:	f04f 30ff 	mov.w	r0, #4294967295
 8006df8:	b01d      	add	sp, #116	; 0x74
 8006dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfe:	4b7b      	ldr	r3, [pc, #492]	; (8006fec <_vfiprintf_r+0x244>)
 8006e00:	429d      	cmp	r5, r3
 8006e02:	d101      	bne.n	8006e08 <_vfiprintf_r+0x60>
 8006e04:	68b5      	ldr	r5, [r6, #8]
 8006e06:	e7df      	b.n	8006dc8 <_vfiprintf_r+0x20>
 8006e08:	4b79      	ldr	r3, [pc, #484]	; (8006ff0 <_vfiprintf_r+0x248>)
 8006e0a:	429d      	cmp	r5, r3
 8006e0c:	bf08      	it	eq
 8006e0e:	68f5      	ldreq	r5, [r6, #12]
 8006e10:	e7da      	b.n	8006dc8 <_vfiprintf_r+0x20>
 8006e12:	89ab      	ldrh	r3, [r5, #12]
 8006e14:	0598      	lsls	r0, r3, #22
 8006e16:	d4ed      	bmi.n	8006df4 <_vfiprintf_r+0x4c>
 8006e18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e1a:	f000 fb84 	bl	8007526 <__retarget_lock_release_recursive>
 8006e1e:	e7e9      	b.n	8006df4 <_vfiprintf_r+0x4c>
 8006e20:	2300      	movs	r3, #0
 8006e22:	9309      	str	r3, [sp, #36]	; 0x24
 8006e24:	2320      	movs	r3, #32
 8006e26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e2e:	2330      	movs	r3, #48	; 0x30
 8006e30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ff4 <_vfiprintf_r+0x24c>
 8006e34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e38:	f04f 0901 	mov.w	r9, #1
 8006e3c:	4623      	mov	r3, r4
 8006e3e:	469a      	mov	sl, r3
 8006e40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e44:	b10a      	cbz	r2, 8006e4a <_vfiprintf_r+0xa2>
 8006e46:	2a25      	cmp	r2, #37	; 0x25
 8006e48:	d1f9      	bne.n	8006e3e <_vfiprintf_r+0x96>
 8006e4a:	ebba 0b04 	subs.w	fp, sl, r4
 8006e4e:	d00b      	beq.n	8006e68 <_vfiprintf_r+0xc0>
 8006e50:	465b      	mov	r3, fp
 8006e52:	4622      	mov	r2, r4
 8006e54:	4629      	mov	r1, r5
 8006e56:	4630      	mov	r0, r6
 8006e58:	f7ff ff93 	bl	8006d82 <__sfputs_r>
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	f000 80aa 	beq.w	8006fb6 <_vfiprintf_r+0x20e>
 8006e62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e64:	445a      	add	r2, fp
 8006e66:	9209      	str	r2, [sp, #36]	; 0x24
 8006e68:	f89a 3000 	ldrb.w	r3, [sl]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 80a2 	beq.w	8006fb6 <_vfiprintf_r+0x20e>
 8006e72:	2300      	movs	r3, #0
 8006e74:	f04f 32ff 	mov.w	r2, #4294967295
 8006e78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e7c:	f10a 0a01 	add.w	sl, sl, #1
 8006e80:	9304      	str	r3, [sp, #16]
 8006e82:	9307      	str	r3, [sp, #28]
 8006e84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e88:	931a      	str	r3, [sp, #104]	; 0x68
 8006e8a:	4654      	mov	r4, sl
 8006e8c:	2205      	movs	r2, #5
 8006e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e92:	4858      	ldr	r0, [pc, #352]	; (8006ff4 <_vfiprintf_r+0x24c>)
 8006e94:	f7f9 f9dc 	bl	8000250 <memchr>
 8006e98:	9a04      	ldr	r2, [sp, #16]
 8006e9a:	b9d8      	cbnz	r0, 8006ed4 <_vfiprintf_r+0x12c>
 8006e9c:	06d1      	lsls	r1, r2, #27
 8006e9e:	bf44      	itt	mi
 8006ea0:	2320      	movmi	r3, #32
 8006ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ea6:	0713      	lsls	r3, r2, #28
 8006ea8:	bf44      	itt	mi
 8006eaa:	232b      	movmi	r3, #43	; 0x2b
 8006eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8006eb6:	d015      	beq.n	8006ee4 <_vfiprintf_r+0x13c>
 8006eb8:	9a07      	ldr	r2, [sp, #28]
 8006eba:	4654      	mov	r4, sl
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	f04f 0c0a 	mov.w	ip, #10
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ec8:	3b30      	subs	r3, #48	; 0x30
 8006eca:	2b09      	cmp	r3, #9
 8006ecc:	d94e      	bls.n	8006f6c <_vfiprintf_r+0x1c4>
 8006ece:	b1b0      	cbz	r0, 8006efe <_vfiprintf_r+0x156>
 8006ed0:	9207      	str	r2, [sp, #28]
 8006ed2:	e014      	b.n	8006efe <_vfiprintf_r+0x156>
 8006ed4:	eba0 0308 	sub.w	r3, r0, r8
 8006ed8:	fa09 f303 	lsl.w	r3, r9, r3
 8006edc:	4313      	orrs	r3, r2
 8006ede:	9304      	str	r3, [sp, #16]
 8006ee0:	46a2      	mov	sl, r4
 8006ee2:	e7d2      	b.n	8006e8a <_vfiprintf_r+0xe2>
 8006ee4:	9b03      	ldr	r3, [sp, #12]
 8006ee6:	1d19      	adds	r1, r3, #4
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	9103      	str	r1, [sp, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	bfbb      	ittet	lt
 8006ef0:	425b      	neglt	r3, r3
 8006ef2:	f042 0202 	orrlt.w	r2, r2, #2
 8006ef6:	9307      	strge	r3, [sp, #28]
 8006ef8:	9307      	strlt	r3, [sp, #28]
 8006efa:	bfb8      	it	lt
 8006efc:	9204      	strlt	r2, [sp, #16]
 8006efe:	7823      	ldrb	r3, [r4, #0]
 8006f00:	2b2e      	cmp	r3, #46	; 0x2e
 8006f02:	d10c      	bne.n	8006f1e <_vfiprintf_r+0x176>
 8006f04:	7863      	ldrb	r3, [r4, #1]
 8006f06:	2b2a      	cmp	r3, #42	; 0x2a
 8006f08:	d135      	bne.n	8006f76 <_vfiprintf_r+0x1ce>
 8006f0a:	9b03      	ldr	r3, [sp, #12]
 8006f0c:	1d1a      	adds	r2, r3, #4
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	9203      	str	r2, [sp, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	bfb8      	it	lt
 8006f16:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f1a:	3402      	adds	r4, #2
 8006f1c:	9305      	str	r3, [sp, #20]
 8006f1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007004 <_vfiprintf_r+0x25c>
 8006f22:	7821      	ldrb	r1, [r4, #0]
 8006f24:	2203      	movs	r2, #3
 8006f26:	4650      	mov	r0, sl
 8006f28:	f7f9 f992 	bl	8000250 <memchr>
 8006f2c:	b140      	cbz	r0, 8006f40 <_vfiprintf_r+0x198>
 8006f2e:	2340      	movs	r3, #64	; 0x40
 8006f30:	eba0 000a 	sub.w	r0, r0, sl
 8006f34:	fa03 f000 	lsl.w	r0, r3, r0
 8006f38:	9b04      	ldr	r3, [sp, #16]
 8006f3a:	4303      	orrs	r3, r0
 8006f3c:	3401      	adds	r4, #1
 8006f3e:	9304      	str	r3, [sp, #16]
 8006f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f44:	482c      	ldr	r0, [pc, #176]	; (8006ff8 <_vfiprintf_r+0x250>)
 8006f46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f4a:	2206      	movs	r2, #6
 8006f4c:	f7f9 f980 	bl	8000250 <memchr>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d03f      	beq.n	8006fd4 <_vfiprintf_r+0x22c>
 8006f54:	4b29      	ldr	r3, [pc, #164]	; (8006ffc <_vfiprintf_r+0x254>)
 8006f56:	bb1b      	cbnz	r3, 8006fa0 <_vfiprintf_r+0x1f8>
 8006f58:	9b03      	ldr	r3, [sp, #12]
 8006f5a:	3307      	adds	r3, #7
 8006f5c:	f023 0307 	bic.w	r3, r3, #7
 8006f60:	3308      	adds	r3, #8
 8006f62:	9303      	str	r3, [sp, #12]
 8006f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f66:	443b      	add	r3, r7
 8006f68:	9309      	str	r3, [sp, #36]	; 0x24
 8006f6a:	e767      	b.n	8006e3c <_vfiprintf_r+0x94>
 8006f6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f70:	460c      	mov	r4, r1
 8006f72:	2001      	movs	r0, #1
 8006f74:	e7a5      	b.n	8006ec2 <_vfiprintf_r+0x11a>
 8006f76:	2300      	movs	r3, #0
 8006f78:	3401      	adds	r4, #1
 8006f7a:	9305      	str	r3, [sp, #20]
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	f04f 0c0a 	mov.w	ip, #10
 8006f82:	4620      	mov	r0, r4
 8006f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f88:	3a30      	subs	r2, #48	; 0x30
 8006f8a:	2a09      	cmp	r2, #9
 8006f8c:	d903      	bls.n	8006f96 <_vfiprintf_r+0x1ee>
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d0c5      	beq.n	8006f1e <_vfiprintf_r+0x176>
 8006f92:	9105      	str	r1, [sp, #20]
 8006f94:	e7c3      	b.n	8006f1e <_vfiprintf_r+0x176>
 8006f96:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e7f0      	b.n	8006f82 <_vfiprintf_r+0x1da>
 8006fa0:	ab03      	add	r3, sp, #12
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	462a      	mov	r2, r5
 8006fa6:	4b16      	ldr	r3, [pc, #88]	; (8007000 <_vfiprintf_r+0x258>)
 8006fa8:	a904      	add	r1, sp, #16
 8006faa:	4630      	mov	r0, r6
 8006fac:	f7fd fea4 	bl	8004cf8 <_printf_float>
 8006fb0:	4607      	mov	r7, r0
 8006fb2:	1c78      	adds	r0, r7, #1
 8006fb4:	d1d6      	bne.n	8006f64 <_vfiprintf_r+0x1bc>
 8006fb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fb8:	07d9      	lsls	r1, r3, #31
 8006fba:	d405      	bmi.n	8006fc8 <_vfiprintf_r+0x220>
 8006fbc:	89ab      	ldrh	r3, [r5, #12]
 8006fbe:	059a      	lsls	r2, r3, #22
 8006fc0:	d402      	bmi.n	8006fc8 <_vfiprintf_r+0x220>
 8006fc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fc4:	f000 faaf 	bl	8007526 <__retarget_lock_release_recursive>
 8006fc8:	89ab      	ldrh	r3, [r5, #12]
 8006fca:	065b      	lsls	r3, r3, #25
 8006fcc:	f53f af12 	bmi.w	8006df4 <_vfiprintf_r+0x4c>
 8006fd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fd2:	e711      	b.n	8006df8 <_vfiprintf_r+0x50>
 8006fd4:	ab03      	add	r3, sp, #12
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	462a      	mov	r2, r5
 8006fda:	4b09      	ldr	r3, [pc, #36]	; (8007000 <_vfiprintf_r+0x258>)
 8006fdc:	a904      	add	r1, sp, #16
 8006fde:	4630      	mov	r0, r6
 8006fe0:	f7fe f916 	bl	8005210 <_printf_i>
 8006fe4:	e7e4      	b.n	8006fb0 <_vfiprintf_r+0x208>
 8006fe6:	bf00      	nop
 8006fe8:	08007c1c 	.word	0x08007c1c
 8006fec:	08007c3c 	.word	0x08007c3c
 8006ff0:	08007bfc 	.word	0x08007bfc
 8006ff4:	08007aa4 	.word	0x08007aa4
 8006ff8:	08007aae 	.word	0x08007aae
 8006ffc:	08004cf9 	.word	0x08004cf9
 8007000:	08006d83 	.word	0x08006d83
 8007004:	08007aaa 	.word	0x08007aaa

08007008 <__swbuf_r>:
 8007008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700a:	460e      	mov	r6, r1
 800700c:	4614      	mov	r4, r2
 800700e:	4605      	mov	r5, r0
 8007010:	b118      	cbz	r0, 800701a <__swbuf_r+0x12>
 8007012:	6983      	ldr	r3, [r0, #24]
 8007014:	b90b      	cbnz	r3, 800701a <__swbuf_r+0x12>
 8007016:	f000 f9e7 	bl	80073e8 <__sinit>
 800701a:	4b21      	ldr	r3, [pc, #132]	; (80070a0 <__swbuf_r+0x98>)
 800701c:	429c      	cmp	r4, r3
 800701e:	d12b      	bne.n	8007078 <__swbuf_r+0x70>
 8007020:	686c      	ldr	r4, [r5, #4]
 8007022:	69a3      	ldr	r3, [r4, #24]
 8007024:	60a3      	str	r3, [r4, #8]
 8007026:	89a3      	ldrh	r3, [r4, #12]
 8007028:	071a      	lsls	r2, r3, #28
 800702a:	d52f      	bpl.n	800708c <__swbuf_r+0x84>
 800702c:	6923      	ldr	r3, [r4, #16]
 800702e:	b36b      	cbz	r3, 800708c <__swbuf_r+0x84>
 8007030:	6923      	ldr	r3, [r4, #16]
 8007032:	6820      	ldr	r0, [r4, #0]
 8007034:	1ac0      	subs	r0, r0, r3
 8007036:	6963      	ldr	r3, [r4, #20]
 8007038:	b2f6      	uxtb	r6, r6
 800703a:	4283      	cmp	r3, r0
 800703c:	4637      	mov	r7, r6
 800703e:	dc04      	bgt.n	800704a <__swbuf_r+0x42>
 8007040:	4621      	mov	r1, r4
 8007042:	4628      	mov	r0, r5
 8007044:	f000 f93c 	bl	80072c0 <_fflush_r>
 8007048:	bb30      	cbnz	r0, 8007098 <__swbuf_r+0x90>
 800704a:	68a3      	ldr	r3, [r4, #8]
 800704c:	3b01      	subs	r3, #1
 800704e:	60a3      	str	r3, [r4, #8]
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	1c5a      	adds	r2, r3, #1
 8007054:	6022      	str	r2, [r4, #0]
 8007056:	701e      	strb	r6, [r3, #0]
 8007058:	6963      	ldr	r3, [r4, #20]
 800705a:	3001      	adds	r0, #1
 800705c:	4283      	cmp	r3, r0
 800705e:	d004      	beq.n	800706a <__swbuf_r+0x62>
 8007060:	89a3      	ldrh	r3, [r4, #12]
 8007062:	07db      	lsls	r3, r3, #31
 8007064:	d506      	bpl.n	8007074 <__swbuf_r+0x6c>
 8007066:	2e0a      	cmp	r6, #10
 8007068:	d104      	bne.n	8007074 <__swbuf_r+0x6c>
 800706a:	4621      	mov	r1, r4
 800706c:	4628      	mov	r0, r5
 800706e:	f000 f927 	bl	80072c0 <_fflush_r>
 8007072:	b988      	cbnz	r0, 8007098 <__swbuf_r+0x90>
 8007074:	4638      	mov	r0, r7
 8007076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007078:	4b0a      	ldr	r3, [pc, #40]	; (80070a4 <__swbuf_r+0x9c>)
 800707a:	429c      	cmp	r4, r3
 800707c:	d101      	bne.n	8007082 <__swbuf_r+0x7a>
 800707e:	68ac      	ldr	r4, [r5, #8]
 8007080:	e7cf      	b.n	8007022 <__swbuf_r+0x1a>
 8007082:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <__swbuf_r+0xa0>)
 8007084:	429c      	cmp	r4, r3
 8007086:	bf08      	it	eq
 8007088:	68ec      	ldreq	r4, [r5, #12]
 800708a:	e7ca      	b.n	8007022 <__swbuf_r+0x1a>
 800708c:	4621      	mov	r1, r4
 800708e:	4628      	mov	r0, r5
 8007090:	f000 f81a 	bl	80070c8 <__swsetup_r>
 8007094:	2800      	cmp	r0, #0
 8007096:	d0cb      	beq.n	8007030 <__swbuf_r+0x28>
 8007098:	f04f 37ff 	mov.w	r7, #4294967295
 800709c:	e7ea      	b.n	8007074 <__swbuf_r+0x6c>
 800709e:	bf00      	nop
 80070a0:	08007c1c 	.word	0x08007c1c
 80070a4:	08007c3c 	.word	0x08007c3c
 80070a8:	08007bfc 	.word	0x08007bfc

080070ac <__ascii_wctomb>:
 80070ac:	b149      	cbz	r1, 80070c2 <__ascii_wctomb+0x16>
 80070ae:	2aff      	cmp	r2, #255	; 0xff
 80070b0:	bf85      	ittet	hi
 80070b2:	238a      	movhi	r3, #138	; 0x8a
 80070b4:	6003      	strhi	r3, [r0, #0]
 80070b6:	700a      	strbls	r2, [r1, #0]
 80070b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80070bc:	bf98      	it	ls
 80070be:	2001      	movls	r0, #1
 80070c0:	4770      	bx	lr
 80070c2:	4608      	mov	r0, r1
 80070c4:	4770      	bx	lr
	...

080070c8 <__swsetup_r>:
 80070c8:	4b32      	ldr	r3, [pc, #200]	; (8007194 <__swsetup_r+0xcc>)
 80070ca:	b570      	push	{r4, r5, r6, lr}
 80070cc:	681d      	ldr	r5, [r3, #0]
 80070ce:	4606      	mov	r6, r0
 80070d0:	460c      	mov	r4, r1
 80070d2:	b125      	cbz	r5, 80070de <__swsetup_r+0x16>
 80070d4:	69ab      	ldr	r3, [r5, #24]
 80070d6:	b913      	cbnz	r3, 80070de <__swsetup_r+0x16>
 80070d8:	4628      	mov	r0, r5
 80070da:	f000 f985 	bl	80073e8 <__sinit>
 80070de:	4b2e      	ldr	r3, [pc, #184]	; (8007198 <__swsetup_r+0xd0>)
 80070e0:	429c      	cmp	r4, r3
 80070e2:	d10f      	bne.n	8007104 <__swsetup_r+0x3c>
 80070e4:	686c      	ldr	r4, [r5, #4]
 80070e6:	89a3      	ldrh	r3, [r4, #12]
 80070e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070ec:	0719      	lsls	r1, r3, #28
 80070ee:	d42c      	bmi.n	800714a <__swsetup_r+0x82>
 80070f0:	06dd      	lsls	r5, r3, #27
 80070f2:	d411      	bmi.n	8007118 <__swsetup_r+0x50>
 80070f4:	2309      	movs	r3, #9
 80070f6:	6033      	str	r3, [r6, #0]
 80070f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070fc:	81a3      	strh	r3, [r4, #12]
 80070fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007102:	e03e      	b.n	8007182 <__swsetup_r+0xba>
 8007104:	4b25      	ldr	r3, [pc, #148]	; (800719c <__swsetup_r+0xd4>)
 8007106:	429c      	cmp	r4, r3
 8007108:	d101      	bne.n	800710e <__swsetup_r+0x46>
 800710a:	68ac      	ldr	r4, [r5, #8]
 800710c:	e7eb      	b.n	80070e6 <__swsetup_r+0x1e>
 800710e:	4b24      	ldr	r3, [pc, #144]	; (80071a0 <__swsetup_r+0xd8>)
 8007110:	429c      	cmp	r4, r3
 8007112:	bf08      	it	eq
 8007114:	68ec      	ldreq	r4, [r5, #12]
 8007116:	e7e6      	b.n	80070e6 <__swsetup_r+0x1e>
 8007118:	0758      	lsls	r0, r3, #29
 800711a:	d512      	bpl.n	8007142 <__swsetup_r+0x7a>
 800711c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800711e:	b141      	cbz	r1, 8007132 <__swsetup_r+0x6a>
 8007120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007124:	4299      	cmp	r1, r3
 8007126:	d002      	beq.n	800712e <__swsetup_r+0x66>
 8007128:	4630      	mov	r0, r6
 800712a:	f7ff fb6f 	bl	800680c <_free_r>
 800712e:	2300      	movs	r3, #0
 8007130:	6363      	str	r3, [r4, #52]	; 0x34
 8007132:	89a3      	ldrh	r3, [r4, #12]
 8007134:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007138:	81a3      	strh	r3, [r4, #12]
 800713a:	2300      	movs	r3, #0
 800713c:	6063      	str	r3, [r4, #4]
 800713e:	6923      	ldr	r3, [r4, #16]
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	89a3      	ldrh	r3, [r4, #12]
 8007144:	f043 0308 	orr.w	r3, r3, #8
 8007148:	81a3      	strh	r3, [r4, #12]
 800714a:	6923      	ldr	r3, [r4, #16]
 800714c:	b94b      	cbnz	r3, 8007162 <__swsetup_r+0x9a>
 800714e:	89a3      	ldrh	r3, [r4, #12]
 8007150:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007158:	d003      	beq.n	8007162 <__swsetup_r+0x9a>
 800715a:	4621      	mov	r1, r4
 800715c:	4630      	mov	r0, r6
 800715e:	f000 fa07 	bl	8007570 <__smakebuf_r>
 8007162:	89a0      	ldrh	r0, [r4, #12]
 8007164:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007168:	f010 0301 	ands.w	r3, r0, #1
 800716c:	d00a      	beq.n	8007184 <__swsetup_r+0xbc>
 800716e:	2300      	movs	r3, #0
 8007170:	60a3      	str	r3, [r4, #8]
 8007172:	6963      	ldr	r3, [r4, #20]
 8007174:	425b      	negs	r3, r3
 8007176:	61a3      	str	r3, [r4, #24]
 8007178:	6923      	ldr	r3, [r4, #16]
 800717a:	b943      	cbnz	r3, 800718e <__swsetup_r+0xc6>
 800717c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007180:	d1ba      	bne.n	80070f8 <__swsetup_r+0x30>
 8007182:	bd70      	pop	{r4, r5, r6, pc}
 8007184:	0781      	lsls	r1, r0, #30
 8007186:	bf58      	it	pl
 8007188:	6963      	ldrpl	r3, [r4, #20]
 800718a:	60a3      	str	r3, [r4, #8]
 800718c:	e7f4      	b.n	8007178 <__swsetup_r+0xb0>
 800718e:	2000      	movs	r0, #0
 8007190:	e7f7      	b.n	8007182 <__swsetup_r+0xba>
 8007192:	bf00      	nop
 8007194:	2000000c 	.word	0x2000000c
 8007198:	08007c1c 	.word	0x08007c1c
 800719c:	08007c3c 	.word	0x08007c3c
 80071a0:	08007bfc 	.word	0x08007bfc

080071a4 <abort>:
 80071a4:	b508      	push	{r3, lr}
 80071a6:	2006      	movs	r0, #6
 80071a8:	f000 fa52 	bl	8007650 <raise>
 80071ac:	2001      	movs	r0, #1
 80071ae:	f7f9 ff79 	bl	80010a4 <_exit>
	...

080071b4 <__sflush_r>:
 80071b4:	898a      	ldrh	r2, [r1, #12]
 80071b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ba:	4605      	mov	r5, r0
 80071bc:	0710      	lsls	r0, r2, #28
 80071be:	460c      	mov	r4, r1
 80071c0:	d458      	bmi.n	8007274 <__sflush_r+0xc0>
 80071c2:	684b      	ldr	r3, [r1, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	dc05      	bgt.n	80071d4 <__sflush_r+0x20>
 80071c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	dc02      	bgt.n	80071d4 <__sflush_r+0x20>
 80071ce:	2000      	movs	r0, #0
 80071d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071d6:	2e00      	cmp	r6, #0
 80071d8:	d0f9      	beq.n	80071ce <__sflush_r+0x1a>
 80071da:	2300      	movs	r3, #0
 80071dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071e0:	682f      	ldr	r7, [r5, #0]
 80071e2:	602b      	str	r3, [r5, #0]
 80071e4:	d032      	beq.n	800724c <__sflush_r+0x98>
 80071e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	075a      	lsls	r2, r3, #29
 80071ec:	d505      	bpl.n	80071fa <__sflush_r+0x46>
 80071ee:	6863      	ldr	r3, [r4, #4]
 80071f0:	1ac0      	subs	r0, r0, r3
 80071f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071f4:	b10b      	cbz	r3, 80071fa <__sflush_r+0x46>
 80071f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071f8:	1ac0      	subs	r0, r0, r3
 80071fa:	2300      	movs	r3, #0
 80071fc:	4602      	mov	r2, r0
 80071fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007200:	6a21      	ldr	r1, [r4, #32]
 8007202:	4628      	mov	r0, r5
 8007204:	47b0      	blx	r6
 8007206:	1c43      	adds	r3, r0, #1
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	d106      	bne.n	800721a <__sflush_r+0x66>
 800720c:	6829      	ldr	r1, [r5, #0]
 800720e:	291d      	cmp	r1, #29
 8007210:	d82c      	bhi.n	800726c <__sflush_r+0xb8>
 8007212:	4a2a      	ldr	r2, [pc, #168]	; (80072bc <__sflush_r+0x108>)
 8007214:	40ca      	lsrs	r2, r1
 8007216:	07d6      	lsls	r6, r2, #31
 8007218:	d528      	bpl.n	800726c <__sflush_r+0xb8>
 800721a:	2200      	movs	r2, #0
 800721c:	6062      	str	r2, [r4, #4]
 800721e:	04d9      	lsls	r1, r3, #19
 8007220:	6922      	ldr	r2, [r4, #16]
 8007222:	6022      	str	r2, [r4, #0]
 8007224:	d504      	bpl.n	8007230 <__sflush_r+0x7c>
 8007226:	1c42      	adds	r2, r0, #1
 8007228:	d101      	bne.n	800722e <__sflush_r+0x7a>
 800722a:	682b      	ldr	r3, [r5, #0]
 800722c:	b903      	cbnz	r3, 8007230 <__sflush_r+0x7c>
 800722e:	6560      	str	r0, [r4, #84]	; 0x54
 8007230:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007232:	602f      	str	r7, [r5, #0]
 8007234:	2900      	cmp	r1, #0
 8007236:	d0ca      	beq.n	80071ce <__sflush_r+0x1a>
 8007238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800723c:	4299      	cmp	r1, r3
 800723e:	d002      	beq.n	8007246 <__sflush_r+0x92>
 8007240:	4628      	mov	r0, r5
 8007242:	f7ff fae3 	bl	800680c <_free_r>
 8007246:	2000      	movs	r0, #0
 8007248:	6360      	str	r0, [r4, #52]	; 0x34
 800724a:	e7c1      	b.n	80071d0 <__sflush_r+0x1c>
 800724c:	6a21      	ldr	r1, [r4, #32]
 800724e:	2301      	movs	r3, #1
 8007250:	4628      	mov	r0, r5
 8007252:	47b0      	blx	r6
 8007254:	1c41      	adds	r1, r0, #1
 8007256:	d1c7      	bne.n	80071e8 <__sflush_r+0x34>
 8007258:	682b      	ldr	r3, [r5, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0c4      	beq.n	80071e8 <__sflush_r+0x34>
 800725e:	2b1d      	cmp	r3, #29
 8007260:	d001      	beq.n	8007266 <__sflush_r+0xb2>
 8007262:	2b16      	cmp	r3, #22
 8007264:	d101      	bne.n	800726a <__sflush_r+0xb6>
 8007266:	602f      	str	r7, [r5, #0]
 8007268:	e7b1      	b.n	80071ce <__sflush_r+0x1a>
 800726a:	89a3      	ldrh	r3, [r4, #12]
 800726c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007270:	81a3      	strh	r3, [r4, #12]
 8007272:	e7ad      	b.n	80071d0 <__sflush_r+0x1c>
 8007274:	690f      	ldr	r7, [r1, #16]
 8007276:	2f00      	cmp	r7, #0
 8007278:	d0a9      	beq.n	80071ce <__sflush_r+0x1a>
 800727a:	0793      	lsls	r3, r2, #30
 800727c:	680e      	ldr	r6, [r1, #0]
 800727e:	bf08      	it	eq
 8007280:	694b      	ldreq	r3, [r1, #20]
 8007282:	600f      	str	r7, [r1, #0]
 8007284:	bf18      	it	ne
 8007286:	2300      	movne	r3, #0
 8007288:	eba6 0807 	sub.w	r8, r6, r7
 800728c:	608b      	str	r3, [r1, #8]
 800728e:	f1b8 0f00 	cmp.w	r8, #0
 8007292:	dd9c      	ble.n	80071ce <__sflush_r+0x1a>
 8007294:	6a21      	ldr	r1, [r4, #32]
 8007296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007298:	4643      	mov	r3, r8
 800729a:	463a      	mov	r2, r7
 800729c:	4628      	mov	r0, r5
 800729e:	47b0      	blx	r6
 80072a0:	2800      	cmp	r0, #0
 80072a2:	dc06      	bgt.n	80072b2 <__sflush_r+0xfe>
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072aa:	81a3      	strh	r3, [r4, #12]
 80072ac:	f04f 30ff 	mov.w	r0, #4294967295
 80072b0:	e78e      	b.n	80071d0 <__sflush_r+0x1c>
 80072b2:	4407      	add	r7, r0
 80072b4:	eba8 0800 	sub.w	r8, r8, r0
 80072b8:	e7e9      	b.n	800728e <__sflush_r+0xda>
 80072ba:	bf00      	nop
 80072bc:	20400001 	.word	0x20400001

080072c0 <_fflush_r>:
 80072c0:	b538      	push	{r3, r4, r5, lr}
 80072c2:	690b      	ldr	r3, [r1, #16]
 80072c4:	4605      	mov	r5, r0
 80072c6:	460c      	mov	r4, r1
 80072c8:	b913      	cbnz	r3, 80072d0 <_fflush_r+0x10>
 80072ca:	2500      	movs	r5, #0
 80072cc:	4628      	mov	r0, r5
 80072ce:	bd38      	pop	{r3, r4, r5, pc}
 80072d0:	b118      	cbz	r0, 80072da <_fflush_r+0x1a>
 80072d2:	6983      	ldr	r3, [r0, #24]
 80072d4:	b90b      	cbnz	r3, 80072da <_fflush_r+0x1a>
 80072d6:	f000 f887 	bl	80073e8 <__sinit>
 80072da:	4b14      	ldr	r3, [pc, #80]	; (800732c <_fflush_r+0x6c>)
 80072dc:	429c      	cmp	r4, r3
 80072de:	d11b      	bne.n	8007318 <_fflush_r+0x58>
 80072e0:	686c      	ldr	r4, [r5, #4]
 80072e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d0ef      	beq.n	80072ca <_fflush_r+0xa>
 80072ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072ec:	07d0      	lsls	r0, r2, #31
 80072ee:	d404      	bmi.n	80072fa <_fflush_r+0x3a>
 80072f0:	0599      	lsls	r1, r3, #22
 80072f2:	d402      	bmi.n	80072fa <_fflush_r+0x3a>
 80072f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072f6:	f000 f915 	bl	8007524 <__retarget_lock_acquire_recursive>
 80072fa:	4628      	mov	r0, r5
 80072fc:	4621      	mov	r1, r4
 80072fe:	f7ff ff59 	bl	80071b4 <__sflush_r>
 8007302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007304:	07da      	lsls	r2, r3, #31
 8007306:	4605      	mov	r5, r0
 8007308:	d4e0      	bmi.n	80072cc <_fflush_r+0xc>
 800730a:	89a3      	ldrh	r3, [r4, #12]
 800730c:	059b      	lsls	r3, r3, #22
 800730e:	d4dd      	bmi.n	80072cc <_fflush_r+0xc>
 8007310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007312:	f000 f908 	bl	8007526 <__retarget_lock_release_recursive>
 8007316:	e7d9      	b.n	80072cc <_fflush_r+0xc>
 8007318:	4b05      	ldr	r3, [pc, #20]	; (8007330 <_fflush_r+0x70>)
 800731a:	429c      	cmp	r4, r3
 800731c:	d101      	bne.n	8007322 <_fflush_r+0x62>
 800731e:	68ac      	ldr	r4, [r5, #8]
 8007320:	e7df      	b.n	80072e2 <_fflush_r+0x22>
 8007322:	4b04      	ldr	r3, [pc, #16]	; (8007334 <_fflush_r+0x74>)
 8007324:	429c      	cmp	r4, r3
 8007326:	bf08      	it	eq
 8007328:	68ec      	ldreq	r4, [r5, #12]
 800732a:	e7da      	b.n	80072e2 <_fflush_r+0x22>
 800732c:	08007c1c 	.word	0x08007c1c
 8007330:	08007c3c 	.word	0x08007c3c
 8007334:	08007bfc 	.word	0x08007bfc

08007338 <std>:
 8007338:	2300      	movs	r3, #0
 800733a:	b510      	push	{r4, lr}
 800733c:	4604      	mov	r4, r0
 800733e:	e9c0 3300 	strd	r3, r3, [r0]
 8007342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007346:	6083      	str	r3, [r0, #8]
 8007348:	8181      	strh	r1, [r0, #12]
 800734a:	6643      	str	r3, [r0, #100]	; 0x64
 800734c:	81c2      	strh	r2, [r0, #14]
 800734e:	6183      	str	r3, [r0, #24]
 8007350:	4619      	mov	r1, r3
 8007352:	2208      	movs	r2, #8
 8007354:	305c      	adds	r0, #92	; 0x5c
 8007356:	f7fd fc37 	bl	8004bc8 <memset>
 800735a:	4b05      	ldr	r3, [pc, #20]	; (8007370 <std+0x38>)
 800735c:	6263      	str	r3, [r4, #36]	; 0x24
 800735e:	4b05      	ldr	r3, [pc, #20]	; (8007374 <std+0x3c>)
 8007360:	62a3      	str	r3, [r4, #40]	; 0x28
 8007362:	4b05      	ldr	r3, [pc, #20]	; (8007378 <std+0x40>)
 8007364:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007366:	4b05      	ldr	r3, [pc, #20]	; (800737c <std+0x44>)
 8007368:	6224      	str	r4, [r4, #32]
 800736a:	6323      	str	r3, [r4, #48]	; 0x30
 800736c:	bd10      	pop	{r4, pc}
 800736e:	bf00      	nop
 8007370:	08007689 	.word	0x08007689
 8007374:	080076ab 	.word	0x080076ab
 8007378:	080076e3 	.word	0x080076e3
 800737c:	08007707 	.word	0x08007707

08007380 <_cleanup_r>:
 8007380:	4901      	ldr	r1, [pc, #4]	; (8007388 <_cleanup_r+0x8>)
 8007382:	f000 b8af 	b.w	80074e4 <_fwalk_reent>
 8007386:	bf00      	nop
 8007388:	080072c1 	.word	0x080072c1

0800738c <__sfmoreglue>:
 800738c:	b570      	push	{r4, r5, r6, lr}
 800738e:	1e4a      	subs	r2, r1, #1
 8007390:	2568      	movs	r5, #104	; 0x68
 8007392:	4355      	muls	r5, r2
 8007394:	460e      	mov	r6, r1
 8007396:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800739a:	f7ff fa87 	bl	80068ac <_malloc_r>
 800739e:	4604      	mov	r4, r0
 80073a0:	b140      	cbz	r0, 80073b4 <__sfmoreglue+0x28>
 80073a2:	2100      	movs	r1, #0
 80073a4:	e9c0 1600 	strd	r1, r6, [r0]
 80073a8:	300c      	adds	r0, #12
 80073aa:	60a0      	str	r0, [r4, #8]
 80073ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073b0:	f7fd fc0a 	bl	8004bc8 <memset>
 80073b4:	4620      	mov	r0, r4
 80073b6:	bd70      	pop	{r4, r5, r6, pc}

080073b8 <__sfp_lock_acquire>:
 80073b8:	4801      	ldr	r0, [pc, #4]	; (80073c0 <__sfp_lock_acquire+0x8>)
 80073ba:	f000 b8b3 	b.w	8007524 <__retarget_lock_acquire_recursive>
 80073be:	bf00      	nop
 80073c0:	200003d0 	.word	0x200003d0

080073c4 <__sfp_lock_release>:
 80073c4:	4801      	ldr	r0, [pc, #4]	; (80073cc <__sfp_lock_release+0x8>)
 80073c6:	f000 b8ae 	b.w	8007526 <__retarget_lock_release_recursive>
 80073ca:	bf00      	nop
 80073cc:	200003d0 	.word	0x200003d0

080073d0 <__sinit_lock_acquire>:
 80073d0:	4801      	ldr	r0, [pc, #4]	; (80073d8 <__sinit_lock_acquire+0x8>)
 80073d2:	f000 b8a7 	b.w	8007524 <__retarget_lock_acquire_recursive>
 80073d6:	bf00      	nop
 80073d8:	200003cb 	.word	0x200003cb

080073dc <__sinit_lock_release>:
 80073dc:	4801      	ldr	r0, [pc, #4]	; (80073e4 <__sinit_lock_release+0x8>)
 80073de:	f000 b8a2 	b.w	8007526 <__retarget_lock_release_recursive>
 80073e2:	bf00      	nop
 80073e4:	200003cb 	.word	0x200003cb

080073e8 <__sinit>:
 80073e8:	b510      	push	{r4, lr}
 80073ea:	4604      	mov	r4, r0
 80073ec:	f7ff fff0 	bl	80073d0 <__sinit_lock_acquire>
 80073f0:	69a3      	ldr	r3, [r4, #24]
 80073f2:	b11b      	cbz	r3, 80073fc <__sinit+0x14>
 80073f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f8:	f7ff bff0 	b.w	80073dc <__sinit_lock_release>
 80073fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007400:	6523      	str	r3, [r4, #80]	; 0x50
 8007402:	4b13      	ldr	r3, [pc, #76]	; (8007450 <__sinit+0x68>)
 8007404:	4a13      	ldr	r2, [pc, #76]	; (8007454 <__sinit+0x6c>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	62a2      	str	r2, [r4, #40]	; 0x28
 800740a:	42a3      	cmp	r3, r4
 800740c:	bf04      	itt	eq
 800740e:	2301      	moveq	r3, #1
 8007410:	61a3      	streq	r3, [r4, #24]
 8007412:	4620      	mov	r0, r4
 8007414:	f000 f820 	bl	8007458 <__sfp>
 8007418:	6060      	str	r0, [r4, #4]
 800741a:	4620      	mov	r0, r4
 800741c:	f000 f81c 	bl	8007458 <__sfp>
 8007420:	60a0      	str	r0, [r4, #8]
 8007422:	4620      	mov	r0, r4
 8007424:	f000 f818 	bl	8007458 <__sfp>
 8007428:	2200      	movs	r2, #0
 800742a:	60e0      	str	r0, [r4, #12]
 800742c:	2104      	movs	r1, #4
 800742e:	6860      	ldr	r0, [r4, #4]
 8007430:	f7ff ff82 	bl	8007338 <std>
 8007434:	68a0      	ldr	r0, [r4, #8]
 8007436:	2201      	movs	r2, #1
 8007438:	2109      	movs	r1, #9
 800743a:	f7ff ff7d 	bl	8007338 <std>
 800743e:	68e0      	ldr	r0, [r4, #12]
 8007440:	2202      	movs	r2, #2
 8007442:	2112      	movs	r1, #18
 8007444:	f7ff ff78 	bl	8007338 <std>
 8007448:	2301      	movs	r3, #1
 800744a:	61a3      	str	r3, [r4, #24]
 800744c:	e7d2      	b.n	80073f4 <__sinit+0xc>
 800744e:	bf00      	nop
 8007450:	0800787c 	.word	0x0800787c
 8007454:	08007381 	.word	0x08007381

08007458 <__sfp>:
 8007458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745a:	4607      	mov	r7, r0
 800745c:	f7ff ffac 	bl	80073b8 <__sfp_lock_acquire>
 8007460:	4b1e      	ldr	r3, [pc, #120]	; (80074dc <__sfp+0x84>)
 8007462:	681e      	ldr	r6, [r3, #0]
 8007464:	69b3      	ldr	r3, [r6, #24]
 8007466:	b913      	cbnz	r3, 800746e <__sfp+0x16>
 8007468:	4630      	mov	r0, r6
 800746a:	f7ff ffbd 	bl	80073e8 <__sinit>
 800746e:	3648      	adds	r6, #72	; 0x48
 8007470:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007474:	3b01      	subs	r3, #1
 8007476:	d503      	bpl.n	8007480 <__sfp+0x28>
 8007478:	6833      	ldr	r3, [r6, #0]
 800747a:	b30b      	cbz	r3, 80074c0 <__sfp+0x68>
 800747c:	6836      	ldr	r6, [r6, #0]
 800747e:	e7f7      	b.n	8007470 <__sfp+0x18>
 8007480:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007484:	b9d5      	cbnz	r5, 80074bc <__sfp+0x64>
 8007486:	4b16      	ldr	r3, [pc, #88]	; (80074e0 <__sfp+0x88>)
 8007488:	60e3      	str	r3, [r4, #12]
 800748a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800748e:	6665      	str	r5, [r4, #100]	; 0x64
 8007490:	f000 f847 	bl	8007522 <__retarget_lock_init_recursive>
 8007494:	f7ff ff96 	bl	80073c4 <__sfp_lock_release>
 8007498:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800749c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074a0:	6025      	str	r5, [r4, #0]
 80074a2:	61a5      	str	r5, [r4, #24]
 80074a4:	2208      	movs	r2, #8
 80074a6:	4629      	mov	r1, r5
 80074a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074ac:	f7fd fb8c 	bl	8004bc8 <memset>
 80074b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074b8:	4620      	mov	r0, r4
 80074ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074bc:	3468      	adds	r4, #104	; 0x68
 80074be:	e7d9      	b.n	8007474 <__sfp+0x1c>
 80074c0:	2104      	movs	r1, #4
 80074c2:	4638      	mov	r0, r7
 80074c4:	f7ff ff62 	bl	800738c <__sfmoreglue>
 80074c8:	4604      	mov	r4, r0
 80074ca:	6030      	str	r0, [r6, #0]
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d1d5      	bne.n	800747c <__sfp+0x24>
 80074d0:	f7ff ff78 	bl	80073c4 <__sfp_lock_release>
 80074d4:	230c      	movs	r3, #12
 80074d6:	603b      	str	r3, [r7, #0]
 80074d8:	e7ee      	b.n	80074b8 <__sfp+0x60>
 80074da:	bf00      	nop
 80074dc:	0800787c 	.word	0x0800787c
 80074e0:	ffff0001 	.word	0xffff0001

080074e4 <_fwalk_reent>:
 80074e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e8:	4606      	mov	r6, r0
 80074ea:	4688      	mov	r8, r1
 80074ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80074f0:	2700      	movs	r7, #0
 80074f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074f6:	f1b9 0901 	subs.w	r9, r9, #1
 80074fa:	d505      	bpl.n	8007508 <_fwalk_reent+0x24>
 80074fc:	6824      	ldr	r4, [r4, #0]
 80074fe:	2c00      	cmp	r4, #0
 8007500:	d1f7      	bne.n	80074f2 <_fwalk_reent+0xe>
 8007502:	4638      	mov	r0, r7
 8007504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007508:	89ab      	ldrh	r3, [r5, #12]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d907      	bls.n	800751e <_fwalk_reent+0x3a>
 800750e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007512:	3301      	adds	r3, #1
 8007514:	d003      	beq.n	800751e <_fwalk_reent+0x3a>
 8007516:	4629      	mov	r1, r5
 8007518:	4630      	mov	r0, r6
 800751a:	47c0      	blx	r8
 800751c:	4307      	orrs	r7, r0
 800751e:	3568      	adds	r5, #104	; 0x68
 8007520:	e7e9      	b.n	80074f6 <_fwalk_reent+0x12>

08007522 <__retarget_lock_init_recursive>:
 8007522:	4770      	bx	lr

08007524 <__retarget_lock_acquire_recursive>:
 8007524:	4770      	bx	lr

08007526 <__retarget_lock_release_recursive>:
 8007526:	4770      	bx	lr

08007528 <__swhatbuf_r>:
 8007528:	b570      	push	{r4, r5, r6, lr}
 800752a:	460e      	mov	r6, r1
 800752c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007530:	2900      	cmp	r1, #0
 8007532:	b096      	sub	sp, #88	; 0x58
 8007534:	4614      	mov	r4, r2
 8007536:	461d      	mov	r5, r3
 8007538:	da07      	bge.n	800754a <__swhatbuf_r+0x22>
 800753a:	2300      	movs	r3, #0
 800753c:	602b      	str	r3, [r5, #0]
 800753e:	89b3      	ldrh	r3, [r6, #12]
 8007540:	061a      	lsls	r2, r3, #24
 8007542:	d410      	bmi.n	8007566 <__swhatbuf_r+0x3e>
 8007544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007548:	e00e      	b.n	8007568 <__swhatbuf_r+0x40>
 800754a:	466a      	mov	r2, sp
 800754c:	f000 f902 	bl	8007754 <_fstat_r>
 8007550:	2800      	cmp	r0, #0
 8007552:	dbf2      	blt.n	800753a <__swhatbuf_r+0x12>
 8007554:	9a01      	ldr	r2, [sp, #4]
 8007556:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800755a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800755e:	425a      	negs	r2, r3
 8007560:	415a      	adcs	r2, r3
 8007562:	602a      	str	r2, [r5, #0]
 8007564:	e7ee      	b.n	8007544 <__swhatbuf_r+0x1c>
 8007566:	2340      	movs	r3, #64	; 0x40
 8007568:	2000      	movs	r0, #0
 800756a:	6023      	str	r3, [r4, #0]
 800756c:	b016      	add	sp, #88	; 0x58
 800756e:	bd70      	pop	{r4, r5, r6, pc}

08007570 <__smakebuf_r>:
 8007570:	898b      	ldrh	r3, [r1, #12]
 8007572:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007574:	079d      	lsls	r5, r3, #30
 8007576:	4606      	mov	r6, r0
 8007578:	460c      	mov	r4, r1
 800757a:	d507      	bpl.n	800758c <__smakebuf_r+0x1c>
 800757c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	6123      	str	r3, [r4, #16]
 8007584:	2301      	movs	r3, #1
 8007586:	6163      	str	r3, [r4, #20]
 8007588:	b002      	add	sp, #8
 800758a:	bd70      	pop	{r4, r5, r6, pc}
 800758c:	ab01      	add	r3, sp, #4
 800758e:	466a      	mov	r2, sp
 8007590:	f7ff ffca 	bl	8007528 <__swhatbuf_r>
 8007594:	9900      	ldr	r1, [sp, #0]
 8007596:	4605      	mov	r5, r0
 8007598:	4630      	mov	r0, r6
 800759a:	f7ff f987 	bl	80068ac <_malloc_r>
 800759e:	b948      	cbnz	r0, 80075b4 <__smakebuf_r+0x44>
 80075a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075a4:	059a      	lsls	r2, r3, #22
 80075a6:	d4ef      	bmi.n	8007588 <__smakebuf_r+0x18>
 80075a8:	f023 0303 	bic.w	r3, r3, #3
 80075ac:	f043 0302 	orr.w	r3, r3, #2
 80075b0:	81a3      	strh	r3, [r4, #12]
 80075b2:	e7e3      	b.n	800757c <__smakebuf_r+0xc>
 80075b4:	4b0d      	ldr	r3, [pc, #52]	; (80075ec <__smakebuf_r+0x7c>)
 80075b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	6020      	str	r0, [r4, #0]
 80075bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c0:	81a3      	strh	r3, [r4, #12]
 80075c2:	9b00      	ldr	r3, [sp, #0]
 80075c4:	6163      	str	r3, [r4, #20]
 80075c6:	9b01      	ldr	r3, [sp, #4]
 80075c8:	6120      	str	r0, [r4, #16]
 80075ca:	b15b      	cbz	r3, 80075e4 <__smakebuf_r+0x74>
 80075cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075d0:	4630      	mov	r0, r6
 80075d2:	f000 f8d1 	bl	8007778 <_isatty_r>
 80075d6:	b128      	cbz	r0, 80075e4 <__smakebuf_r+0x74>
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	f023 0303 	bic.w	r3, r3, #3
 80075de:	f043 0301 	orr.w	r3, r3, #1
 80075e2:	81a3      	strh	r3, [r4, #12]
 80075e4:	89a0      	ldrh	r0, [r4, #12]
 80075e6:	4305      	orrs	r5, r0
 80075e8:	81a5      	strh	r5, [r4, #12]
 80075ea:	e7cd      	b.n	8007588 <__smakebuf_r+0x18>
 80075ec:	08007381 	.word	0x08007381

080075f0 <_malloc_usable_size_r>:
 80075f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075f4:	1f18      	subs	r0, r3, #4
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	bfbc      	itt	lt
 80075fa:	580b      	ldrlt	r3, [r1, r0]
 80075fc:	18c0      	addlt	r0, r0, r3
 80075fe:	4770      	bx	lr

08007600 <_raise_r>:
 8007600:	291f      	cmp	r1, #31
 8007602:	b538      	push	{r3, r4, r5, lr}
 8007604:	4604      	mov	r4, r0
 8007606:	460d      	mov	r5, r1
 8007608:	d904      	bls.n	8007614 <_raise_r+0x14>
 800760a:	2316      	movs	r3, #22
 800760c:	6003      	str	r3, [r0, #0]
 800760e:	f04f 30ff 	mov.w	r0, #4294967295
 8007612:	bd38      	pop	{r3, r4, r5, pc}
 8007614:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007616:	b112      	cbz	r2, 800761e <_raise_r+0x1e>
 8007618:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800761c:	b94b      	cbnz	r3, 8007632 <_raise_r+0x32>
 800761e:	4620      	mov	r0, r4
 8007620:	f000 f830 	bl	8007684 <_getpid_r>
 8007624:	462a      	mov	r2, r5
 8007626:	4601      	mov	r1, r0
 8007628:	4620      	mov	r0, r4
 800762a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800762e:	f000 b817 	b.w	8007660 <_kill_r>
 8007632:	2b01      	cmp	r3, #1
 8007634:	d00a      	beq.n	800764c <_raise_r+0x4c>
 8007636:	1c59      	adds	r1, r3, #1
 8007638:	d103      	bne.n	8007642 <_raise_r+0x42>
 800763a:	2316      	movs	r3, #22
 800763c:	6003      	str	r3, [r0, #0]
 800763e:	2001      	movs	r0, #1
 8007640:	e7e7      	b.n	8007612 <_raise_r+0x12>
 8007642:	2400      	movs	r4, #0
 8007644:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007648:	4628      	mov	r0, r5
 800764a:	4798      	blx	r3
 800764c:	2000      	movs	r0, #0
 800764e:	e7e0      	b.n	8007612 <_raise_r+0x12>

08007650 <raise>:
 8007650:	4b02      	ldr	r3, [pc, #8]	; (800765c <raise+0xc>)
 8007652:	4601      	mov	r1, r0
 8007654:	6818      	ldr	r0, [r3, #0]
 8007656:	f7ff bfd3 	b.w	8007600 <_raise_r>
 800765a:	bf00      	nop
 800765c:	2000000c 	.word	0x2000000c

08007660 <_kill_r>:
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	4d07      	ldr	r5, [pc, #28]	; (8007680 <_kill_r+0x20>)
 8007664:	2300      	movs	r3, #0
 8007666:	4604      	mov	r4, r0
 8007668:	4608      	mov	r0, r1
 800766a:	4611      	mov	r1, r2
 800766c:	602b      	str	r3, [r5, #0]
 800766e:	f7f9 fd09 	bl	8001084 <_kill>
 8007672:	1c43      	adds	r3, r0, #1
 8007674:	d102      	bne.n	800767c <_kill_r+0x1c>
 8007676:	682b      	ldr	r3, [r5, #0]
 8007678:	b103      	cbz	r3, 800767c <_kill_r+0x1c>
 800767a:	6023      	str	r3, [r4, #0]
 800767c:	bd38      	pop	{r3, r4, r5, pc}
 800767e:	bf00      	nop
 8007680:	200003c4 	.word	0x200003c4

08007684 <_getpid_r>:
 8007684:	f7f9 bcf6 	b.w	8001074 <_getpid>

08007688 <__sread>:
 8007688:	b510      	push	{r4, lr}
 800768a:	460c      	mov	r4, r1
 800768c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007690:	f000 f894 	bl	80077bc <_read_r>
 8007694:	2800      	cmp	r0, #0
 8007696:	bfab      	itete	ge
 8007698:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800769a:	89a3      	ldrhlt	r3, [r4, #12]
 800769c:	181b      	addge	r3, r3, r0
 800769e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076a2:	bfac      	ite	ge
 80076a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80076a6:	81a3      	strhlt	r3, [r4, #12]
 80076a8:	bd10      	pop	{r4, pc}

080076aa <__swrite>:
 80076aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ae:	461f      	mov	r7, r3
 80076b0:	898b      	ldrh	r3, [r1, #12]
 80076b2:	05db      	lsls	r3, r3, #23
 80076b4:	4605      	mov	r5, r0
 80076b6:	460c      	mov	r4, r1
 80076b8:	4616      	mov	r6, r2
 80076ba:	d505      	bpl.n	80076c8 <__swrite+0x1e>
 80076bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076c0:	2302      	movs	r3, #2
 80076c2:	2200      	movs	r2, #0
 80076c4:	f000 f868 	bl	8007798 <_lseek_r>
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076d2:	81a3      	strh	r3, [r4, #12]
 80076d4:	4632      	mov	r2, r6
 80076d6:	463b      	mov	r3, r7
 80076d8:	4628      	mov	r0, r5
 80076da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076de:	f000 b817 	b.w	8007710 <_write_r>

080076e2 <__sseek>:
 80076e2:	b510      	push	{r4, lr}
 80076e4:	460c      	mov	r4, r1
 80076e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ea:	f000 f855 	bl	8007798 <_lseek_r>
 80076ee:	1c43      	adds	r3, r0, #1
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	bf15      	itete	ne
 80076f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80076f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076fe:	81a3      	strheq	r3, [r4, #12]
 8007700:	bf18      	it	ne
 8007702:	81a3      	strhne	r3, [r4, #12]
 8007704:	bd10      	pop	{r4, pc}

08007706 <__sclose>:
 8007706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800770a:	f000 b813 	b.w	8007734 <_close_r>
	...

08007710 <_write_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	4d07      	ldr	r5, [pc, #28]	; (8007730 <_write_r+0x20>)
 8007714:	4604      	mov	r4, r0
 8007716:	4608      	mov	r0, r1
 8007718:	4611      	mov	r1, r2
 800771a:	2200      	movs	r2, #0
 800771c:	602a      	str	r2, [r5, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	f7f9 fce7 	bl	80010f2 <_write>
 8007724:	1c43      	adds	r3, r0, #1
 8007726:	d102      	bne.n	800772e <_write_r+0x1e>
 8007728:	682b      	ldr	r3, [r5, #0]
 800772a:	b103      	cbz	r3, 800772e <_write_r+0x1e>
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	bd38      	pop	{r3, r4, r5, pc}
 8007730:	200003c4 	.word	0x200003c4

08007734 <_close_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4d06      	ldr	r5, [pc, #24]	; (8007750 <_close_r+0x1c>)
 8007738:	2300      	movs	r3, #0
 800773a:	4604      	mov	r4, r0
 800773c:	4608      	mov	r0, r1
 800773e:	602b      	str	r3, [r5, #0]
 8007740:	f7f9 fcf3 	bl	800112a <_close>
 8007744:	1c43      	adds	r3, r0, #1
 8007746:	d102      	bne.n	800774e <_close_r+0x1a>
 8007748:	682b      	ldr	r3, [r5, #0]
 800774a:	b103      	cbz	r3, 800774e <_close_r+0x1a>
 800774c:	6023      	str	r3, [r4, #0]
 800774e:	bd38      	pop	{r3, r4, r5, pc}
 8007750:	200003c4 	.word	0x200003c4

08007754 <_fstat_r>:
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	4d07      	ldr	r5, [pc, #28]	; (8007774 <_fstat_r+0x20>)
 8007758:	2300      	movs	r3, #0
 800775a:	4604      	mov	r4, r0
 800775c:	4608      	mov	r0, r1
 800775e:	4611      	mov	r1, r2
 8007760:	602b      	str	r3, [r5, #0]
 8007762:	f7f9 fcee 	bl	8001142 <_fstat>
 8007766:	1c43      	adds	r3, r0, #1
 8007768:	d102      	bne.n	8007770 <_fstat_r+0x1c>
 800776a:	682b      	ldr	r3, [r5, #0]
 800776c:	b103      	cbz	r3, 8007770 <_fstat_r+0x1c>
 800776e:	6023      	str	r3, [r4, #0]
 8007770:	bd38      	pop	{r3, r4, r5, pc}
 8007772:	bf00      	nop
 8007774:	200003c4 	.word	0x200003c4

08007778 <_isatty_r>:
 8007778:	b538      	push	{r3, r4, r5, lr}
 800777a:	4d06      	ldr	r5, [pc, #24]	; (8007794 <_isatty_r+0x1c>)
 800777c:	2300      	movs	r3, #0
 800777e:	4604      	mov	r4, r0
 8007780:	4608      	mov	r0, r1
 8007782:	602b      	str	r3, [r5, #0]
 8007784:	f7f9 fced 	bl	8001162 <_isatty>
 8007788:	1c43      	adds	r3, r0, #1
 800778a:	d102      	bne.n	8007792 <_isatty_r+0x1a>
 800778c:	682b      	ldr	r3, [r5, #0]
 800778e:	b103      	cbz	r3, 8007792 <_isatty_r+0x1a>
 8007790:	6023      	str	r3, [r4, #0]
 8007792:	bd38      	pop	{r3, r4, r5, pc}
 8007794:	200003c4 	.word	0x200003c4

08007798 <_lseek_r>:
 8007798:	b538      	push	{r3, r4, r5, lr}
 800779a:	4d07      	ldr	r5, [pc, #28]	; (80077b8 <_lseek_r+0x20>)
 800779c:	4604      	mov	r4, r0
 800779e:	4608      	mov	r0, r1
 80077a0:	4611      	mov	r1, r2
 80077a2:	2200      	movs	r2, #0
 80077a4:	602a      	str	r2, [r5, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	f7f9 fce6 	bl	8001178 <_lseek>
 80077ac:	1c43      	adds	r3, r0, #1
 80077ae:	d102      	bne.n	80077b6 <_lseek_r+0x1e>
 80077b0:	682b      	ldr	r3, [r5, #0]
 80077b2:	b103      	cbz	r3, 80077b6 <_lseek_r+0x1e>
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	bd38      	pop	{r3, r4, r5, pc}
 80077b8:	200003c4 	.word	0x200003c4

080077bc <_read_r>:
 80077bc:	b538      	push	{r3, r4, r5, lr}
 80077be:	4d07      	ldr	r5, [pc, #28]	; (80077dc <_read_r+0x20>)
 80077c0:	4604      	mov	r4, r0
 80077c2:	4608      	mov	r0, r1
 80077c4:	4611      	mov	r1, r2
 80077c6:	2200      	movs	r2, #0
 80077c8:	602a      	str	r2, [r5, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	f7f9 fc74 	bl	80010b8 <_read>
 80077d0:	1c43      	adds	r3, r0, #1
 80077d2:	d102      	bne.n	80077da <_read_r+0x1e>
 80077d4:	682b      	ldr	r3, [r5, #0]
 80077d6:	b103      	cbz	r3, 80077da <_read_r+0x1e>
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	bd38      	pop	{r3, r4, r5, pc}
 80077dc:	200003c4 	.word	0x200003c4

080077e0 <_init>:
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	bf00      	nop
 80077e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e6:	bc08      	pop	{r3}
 80077e8:	469e      	mov	lr, r3
 80077ea:	4770      	bx	lr

080077ec <_fini>:
 80077ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ee:	bf00      	nop
 80077f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077f2:	bc08      	pop	{r3}
 80077f4:	469e      	mov	lr, r3
 80077f6:	4770      	bx	lr
